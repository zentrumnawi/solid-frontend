{"version":3,"file":"zentrumnawi-solid-skeleton.mjs","sources":["../../../../../libs/solid/skeleton/src/lib/components/update-dialog/update-dialog.component.ts","../../../../../libs/solid/skeleton/src/lib/components/update-dialog/update-dialog.component.html","../../../../../libs/solid/skeleton/src/lib/services/update.service.ts","../../../../../libs/solid/skeleton/src/lib/solid-skeleton-config.ts","../../../../../libs/solid/skeleton/src/lib/components/privacy-dialog/privacy-dialog.component.ts","../../../../../libs/solid/skeleton/src/lib/components/privacy-dialog/privacy-dialog.component.html","../../../../../libs/solid/skeleton/src/lib/components/feedback/feedback.component.ts","../../../../../libs/solid/skeleton/src/lib/components/feedback/feedback.component.html","../../../../../libs/solid/skeleton/src/lib/services/feedback.service.ts","../../../../../libs/solid/skeleton/src/lib/state/menu.actions.ts","../../../../../libs/solid/skeleton/src/lib/state/menu.state.ts","../../../../../libs/solid/skeleton/src/lib/services/intro.service.ts","../../../../../libs/solid/skeleton/src/lib/components/landing-banner-dialog/landing-banner-dialog.component.ts","../../../../../libs/solid/skeleton/src/lib/components/landing-banner-dialog/landing-banner-dialog.component.html","../../../../../libs/solid/skeleton/src/lib/models/message.model.ts","../../../../../libs/solid/skeleton/src/lib/services/messages.service.ts","../../../../../libs/solid/skeleton/src/lib/directives/grid-cols.directive.ts","../../../../../libs/solid/skeleton/src/lib/components/landing/landing.component.ts","../../../../../libs/solid/skeleton/src/lib/components/landing/landing.component.html","../../../../../libs/solid/skeleton/src/lib/components/main-menu/main-menu.component.ts","../../../../../libs/solid/skeleton/src/lib/components/main-menu/main-menu.component.html","../../../../../libs/solid/skeleton/src/lib/components/base-layout/base-layout.component.ts","../../../../../libs/solid/skeleton/src/lib/components/base-layout/base-layout.component.html","../../../../../libs/solid/skeleton/src/lib/components/message-list/message-list.component.ts","../../../../../libs/solid/skeleton/src/lib/components/message-list/message-list.component.html","../../../../../libs/solid/skeleton/src/lib/components/info/info.component.ts","../../../../../libs/solid/skeleton/src/lib/components/info/info.component.html","../../../../../libs/solid/skeleton/src/lib/skeleton-routing.ts","../../../../../libs/solid/skeleton/src/lib/utils/deep-merge.ts","../../../../../libs/solid/skeleton/src/lib/solid-skeleton.module.ts","../../../../../libs/solid/skeleton/src/lib/sentry-initializer.ts","../../../../../libs/solid/skeleton/src/zentrumnawi-solid-skeleton.ts"],"sourcesContent":["import { Component, Inject } from '@angular/core';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\n\r\n@Component({\r\n  selector: 'solid-skeleton-update-dialog',\r\n  templateUrl: './update-dialog.component.html',\r\n  styleUrls: ['./update-dialog.component.scss'],\r\n})\r\nexport class UpdateDialogComponent {\r\n  private readonly cb: () => void;\r\n  constructor(\r\n    private _ref: MatDialogRef<UpdateDialogComponent>,\r\n    /** Inject the required service function to prevent a circular dependency between the Component and the service */\r\n    // callback is defined as any to prevent ng-packagr issues\r\n    // { cb: () => void }\r\n    @Inject(MAT_DIALOG_DATA) data: any\r\n  ) {\r\n    this.cb = data.cb;\r\n  }\r\n\r\n  onCancelClick() {\r\n    this._ref.close();\r\n  }\r\n\r\n  onOkClick() {\r\n    this.cb();\r\n    this._ref.close();\r\n  }\r\n}\r\n","<h1 mat-dialog-title>Update</h1>\r\n<div mat-dialog-content>Es steht eine neue Version der App zur Verf√ºgung.</div>\r\n<div mat-dialog-actions>\r\n  <div class=\"spacer\"></div>\r\n  <button (click)=\"onCancelClick()\" mat-button>Abbrechen</button>\r\n  <button (click)=\"onOkClick()\" mat-button>Updaten</button>\r\n</div>\r\n","import { Injectable } from '@angular/core';\r\nimport { SwUpdate } from '@angular/service-worker';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { UpdateDialogComponent } from '../components/update-dialog/update-dialog.component';\r\n\r\n@Injectable()\r\nexport class UpdateService {\r\n  constructor(updates: SwUpdate, dialog: MatDialog) {\r\n    updates.available.subscribe((event) => {\r\n      dialog.open(UpdateDialogComponent, {\r\n        disableClose: true,\r\n        data: {\r\n          cb: () =>\r\n            updates.activateUpdate().then(() => document.location.reload()),\r\n        },\r\n      });\r\n      console.log('current version is', event.current);\r\n      console.log('available version is', event.available);\r\n    });\r\n    updates.activated.subscribe((event) => {\r\n      console.log('old version was', event.previous);\r\n      console.log('new version is', event.current);\r\n    });\r\n  }\r\n}\r\n","import { InjectionToken, Type } from '@angular/core';\r\nimport { LoadChildren } from '@angular/router';\r\nimport { ErrorHandlerOptions } from '@sentry/angular';\r\n\r\nexport interface RouteConfig {\r\n  enabled: boolean;\r\n  showOnLandingPage: boolean;\r\n  showInMenu: boolean;\r\n  url: string;\r\n  title: string;\r\n  order: number;\r\n  matIcon?: string;\r\n  svgIcon?: string;\r\n  name?: string;\r\n}\r\n\r\nexport type RouteConfigWithComponent = RouteConfig & { component: Type<any> };\r\n\r\nexport type RouteConfigFromModule = RouteConfig & {\r\n  moduleImport: LoadChildren;\r\n};\r\n\r\nexport interface RoutingConfig {\r\n  landing: RouteConfig;\r\n  info: RouteConfig;\r\n  // privacy: RouteConfigWithComponent;\r\n  profile: RouteConfigFromModule;\r\n  quiz: RouteConfigFromModule;\r\n  slideshow: RouteConfigFromModule;\r\n  custom?: (RouteConfigWithComponent | RouteConfigFromModule)[];\r\n}\r\n\r\nexport interface SentryConfig {\r\n  errorHandlerOptions?: ErrorHandlerOptions;\r\n  dsn: string;\r\n  environment: string;\r\n  version: { semver: { version: string } };\r\n}\r\n\r\nexport interface InternalSolidSkeletonConfig {\r\n  feedbackEnabled: boolean;\r\n  infoPageContent: Type<any>;\r\n  privacyContent: Type<any>;\r\n  glossary: {\r\n    enabled: boolean;\r\n    svgIcon?: string;\r\n    matIcon?: string;\r\n  };\r\n  routingConfig: RoutingConfig;\r\n  sentry?: SentryConfig;\r\n}\r\n\r\nexport interface RequiredExternalConfig {\r\n  infoPageContent: Type<any>;\r\n  privacyContent: Type<any>;\r\n  routingConfig: {\r\n    // privacy: {\r\n    //   component: Type<any>;\r\n    // };\r\n  };\r\n  sentry?: SentryConfig;\r\n}\r\n\r\ntype componentPropertyKeys = 'component' | 'infoPageContent' | 'privacyContent';\r\n\r\nexport type PartialDeep<T> = {\r\n  [P in Exclude<keyof T, componentPropertyKeys>]?: PartialDeep<T[P]>;\r\n};\r\n\r\ntype Pick<T, K extends keyof T> = {\r\n  [P in K]: Omit<T[P], componentPropertyKeys>;\r\n};\r\ntype Exclude<T, U> = T extends U ? never : T;\r\ntype Omit<T, K extends keyof any> = Pick<T, Exclude<keyof T, K>>;\r\n\r\nexport const defaultSkeletonConfig: Omit<\r\n  InternalSolidSkeletonConfig,\r\n  componentPropertyKeys\r\n> = {\r\n  feedbackEnabled: true,\r\n  glossary: {\r\n    enabled: true,\r\n    matIcon: 'help',\r\n  },\r\n  routingConfig: {\r\n    landing: {\r\n      enabled: true,\r\n      showOnLandingPage: false,\r\n      showInMenu: true,\r\n      url: '',\r\n      title: 'Startseite',\r\n      order: 0,\r\n      matIcon: 'home',\r\n    },\r\n    profile: {\r\n      enabled: true,\r\n      showOnLandingPage: true,\r\n      showInMenu: true,\r\n      url: 'profiles',\r\n      title: 'Steckbriefe',\r\n      order: 1,\r\n      matIcon: 'list',\r\n      moduleImport: () =>\r\n        import('@zentrumnawi/solid-profile').then((m) => m.SolidProfileModule),\r\n    },\r\n    quiz: {\r\n      enabled: true,\r\n      showOnLandingPage: true,\r\n      showInMenu: true,\r\n      url: 'quiz',\r\n      title: 'Selbsttest',\r\n      order: 2,\r\n      matIcon: 'question_answer',\r\n      moduleImport: () =>\r\n        import('@zentrumnawi/solid-quiz').then((m) => m.SolidQuizModule),\r\n    },\r\n    slideshow: {\r\n      enabled: true,\r\n      showOnLandingPage: true,\r\n      showInMenu: true,\r\n      url: 'slideshow',\r\n      title: 'Bestimmungshelfer',\r\n      order: 3,\r\n      matIcon: 'help',\r\n      moduleImport: () =>\r\n        import('@zentrumnawi/solid-slideshow').then(\r\n          (m) => m.SolidSlideshowModule\r\n        ),\r\n    },\r\n    info: {\r\n      enabled: true,\r\n      showOnLandingPage: true,\r\n      showInMenu: true,\r\n      url: 'info',\r\n      title: 'Info | Datenschutz',\r\n      order: 4,\r\n      matIcon: 'info',\r\n    },\r\n    // privacy: {\r\n    //   enabled: true,\r\n    //   showOnLandingPage: true,\r\n    //   showInMenu: true,\r\n    //   url: 'privacy',\r\n    //   title: 'Datenschutz',\r\n    //   order: 5,\r\n    //   matIcon: 'info',\r\n    // },\r\n  },\r\n};\r\n\r\nexport type SolidSkeletonConfig = PartialDeep<InternalSolidSkeletonConfig> &\r\n  RequiredExternalConfig;\r\n\r\nexport const SOLID_SKELETON_CONFIG =\r\n  new InjectionToken<InternalSolidSkeletonConfig>('solid-skeleton-config');\r\n","import { Component, Inject, Type } from '@angular/core';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport {\r\n  InternalSolidSkeletonConfig,\r\n  SOLID_SKELETON_CONFIG,\r\n} from '../../solid-skeleton-config';\r\n\r\n@Component({\r\n  selector: 'solid-skeleton-privacy-dialog',\r\n  templateUrl: './privacy-dialog.component.html',\r\n  styleUrls: ['./privacy-dialog.component.scss'],\r\n})\r\nexport class PrivacyDialogComponent {\r\n  public PrivacyContentComponent: Type<any>;\r\n\r\n  constructor(\r\n    private _ref: MatDialogRef<PrivacyDialogComponent>,\r\n    @Inject(SOLID_SKELETON_CONFIG) cfg: InternalSolidSkeletonConfig\r\n  ) {\r\n    this.PrivacyContentComponent = cfg.privacyContent;\r\n  }\r\n\r\n  public onCancelClick() {\r\n    this._ref.close();\r\n  }\r\n}\r\n","<div class=\"header-container\">\r\n  <p class=\"title\">Datenschutzerkl√§rung</p>\r\n  <button class=\"closeBtn\" mat-icon-button mat-dialog-close>\r\n    <mat-icon>close</mat-icon>\r\n  </button>\r\n</div>\r\n<div class=\"content-container\" mat-dialog-content>\r\n  <ng-container *ngComponentOutlet=\"PrivacyContentComponent\"></ng-container>\r\n</div>\r\n","import { Component, Inject, OnDestroy, OnInit } from '@angular/core';\r\nimport {\r\n  UntypedFormBuilder,\r\n  UntypedFormGroup,\r\n  Validators,\r\n} from '@angular/forms';\r\nimport {\r\n  MAT_DIALOG_DATA,\r\n  MatDialogRef,\r\n  MatDialog,\r\n} from '@angular/material/dialog';\r\n\r\nimport {\r\n  FeedbackService,\r\n  SOLID_SKELETON_FEEDBACK_SERVICE,\r\n} from '../../services/feedback.service';\r\nimport { PrivacyDialogComponent } from '../privacy-dialog/privacy-dialog.component';\r\n\r\n@Component({\r\n  selector: 'solid-skeleton-feedback',\r\n  templateUrl: './feedback.component.html',\r\n  styleUrls: ['./feedback.component.scss'],\r\n})\r\nexport class FeedbackComponent implements OnInit, OnDestroy {\r\n  private static STORAGE_KEY_1 = 'FEEDBACK';\r\n  private static STORAGE_KEY_2 = 'ERROR_REPORT';\r\n  private _sent = false;\r\n  public Form: UntypedFormGroup;\r\n  public formTitle: string;\r\n  public privacyChecked = false;\r\n\r\n  constructor(\r\n    @Inject(SOLID_SKELETON_FEEDBACK_SERVICE)\r\n    public feedback: FeedbackService,\r\n    public fb: UntypedFormBuilder,\r\n    private _ref: MatDialogRef<FeedbackComponent>,\r\n    private _dialog: MatDialog,\r\n    /** Inject the required service function to prevent a circular dependency between the Component and the service */\r\n    /* type is defined as any to prevent ng-packagr issues\r\n     (data: any) => Observable<boolean> */\r\n    @Inject(MAT_DIALOG_DATA) private _submitFeedback: any\r\n  ) {\r\n    this.formTitle = _submitFeedback.title;\r\n\r\n    this.Form = fb.group({\r\n      name: [''],\r\n      email: ['', [Validators.required, Validators.email]],\r\n      subject: [_submitFeedback.subject, Validators.required],\r\n      message: [''],\r\n    });\r\n  }\r\n\r\n  public onCancelClick() {\r\n    this._ref.close();\r\n  }\r\n\r\n  public onOkClick() {\r\n    if (!this.Form.valid) {\r\n      this.Form.markAllAsTouched();\r\n    } else {\r\n      this.Form.value['message'] += '\\n\\n' + this._submitFeedback.location;\r\n      this.feedback.submitFeedback(this.Form.value).subscribe(() => {\r\n        this._sent = true;\r\n        this._ref.close();\r\n      });\r\n    }\r\n  }\r\n\r\n  public ngOnDestroy(): void {\r\n    const key = this.getLocation()\r\n      ? FeedbackComponent.STORAGE_KEY_2\r\n      : FeedbackComponent.STORAGE_KEY_1;\r\n    sessionStorage.setItem(key, JSON.stringify(this.Form.value));\r\n    if (this._sent) {\r\n      sessionStorage.removeItem(key);\r\n    }\r\n  }\r\n\r\n  public ngOnInit(): void {\r\n    const str = this.getLocation()\r\n      ? sessionStorage.getItem(FeedbackComponent.STORAGE_KEY_2)\r\n      : sessionStorage.getItem(FeedbackComponent.STORAGE_KEY_1);\r\n    if (!str) {\r\n      return;\r\n    }\r\n    const obj = JSON.parse(str);\r\n    this.Form.setValue(obj);\r\n  }\r\n\r\n  public getLocation(): string {\r\n    return this._submitFeedback.location;\r\n  }\r\n\r\n  public onPrivacyClick() {\r\n    this._dialog.open(PrivacyDialogComponent, {\r\n      maxWidth: '800px',\r\n      panelClass: 'privacy-dialog',\r\n    });\r\n  }\r\n}\r\n","<div class=\"header-container\">\r\n  <p class=\"title\">{{ formTitle }}</p>\r\n  <button class=\"closeBtn\" mat-icon-button mat-dialog-close>\r\n    <mat-icon>close</mat-icon>\r\n  </button>\r\n</div>\r\n<div class=\"feedback-content\" mat-dialog-content>\r\n  <form [formGroup]=\"Form\">\r\n    <mat-form-field>\r\n      <input formControlName=\"name\" matInput placeholder=\"Name\" type=\"text\" />\r\n    </mat-form-field>\r\n    <mat-form-field>\r\n      <input\r\n        formControlName=\"email\"\r\n        matInput\r\n        placeholder=\"Email\"\r\n        type=\"email\"\r\n      />\r\n    </mat-form-field>\r\n    <mat-form-field>\r\n      <input matInput formControlName=\"subject\" placeholder=\"Betreff\" />\r\n    </mat-form-field>\r\n    <mat-form-field>\r\n      <textarea\r\n        cdkAutosizeMinRows=\"10\"\r\n        cdkTextareaAutosize\r\n        formControlName=\"message\"\r\n        matInput\r\n        placeholder=\"Nachricht\"\r\n      ></textarea>\r\n    </mat-form-field>\r\n  </form>\r\n</div>\r\n<div class=\"additional-container\">\r\n  <mat-label class=\"location\" *ngIf=\"getLocation()\"\r\n    >Fehler gefunden in: {{ getLocation() }}</mat-label\r\n  >\r\n  <mat-checkbox [(ngModel)]=\"privacyChecked\">\r\n    Hiermit nehme ich die\r\n    <a class=\"privacy-link\" (click)=\"onPrivacyClick()\">Datenschutzerkl√§rung</a>\r\n    zur Kenntnis und stimme der Speicherung der in diesem Formular angegebenen\r\n    Daten zu.\r\n  </mat-checkbox>\r\n</div>\r\n<div mat-dialog-actions>\r\n  <div class=\"spacer\"></div>\r\n  <button type=\"submit\" (click)=\"onCancelClick()\" mat-button>Abbrechen</button>\r\n  <button\r\n    [disabled]=\"!privacyChecked\"\r\n    class=\"send-btn\"\r\n    (click)=\"onOkClick()\"\r\n    mat-button\r\n  >\r\n    Absenden\r\n  </button>\r\n</div>\r\n","import { InjectionToken } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { MatDialog, MatDialogConfig } from '@angular/material/dialog';\r\nimport { Observable, of } from 'rxjs';\r\nimport { FeedbackComponent } from '../components/feedback/feedback.component';\r\nimport { SolidCoreConfig } from '@zentrumnawi/solid-core';\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { InternalSolidSkeletonConfig } from '../solid-skeleton-config';\r\n\r\nexport const SOLID_SKELETON_FEEDBACK_SERVICE =\r\n  new InjectionToken<FeedbackService | null>('SOLID_SKELETON_FEEDBACK_SERVICE');\r\n\r\nexport function feedbackServiceFactory(\r\n  http: HttpClient,\r\n  dialog: MatDialog,\r\n  coreConfig: SolidCoreConfig,\r\n  skeletonConfig: InternalSolidSkeletonConfig\r\n) {\r\n  if (skeletonConfig.feedbackEnabled) {\r\n    return new FeedbackService(http, dialog, coreConfig);\r\n  }\r\n  return null;\r\n}\r\n\r\nexport class FeedbackService {\r\n  constructor(\r\n    private _http: HttpClient,\r\n    private _dialog: MatDialog,\r\n    private _config: SolidCoreConfig\r\n  ) {}\r\n\r\n  public showDialog(location?: string, title?: string) {\r\n    const dialogConfig = new MatDialogConfig();\r\n    const report = title == '' ? 'Fehler melden' : 'Fehler melden - ' + title;\r\n    dialogConfig.data = {\r\n      location: location,\r\n      title: location ? 'Fehler melden' : 'Kontakt und Feedback',\r\n      subject: location ? report : 'Feedback',\r\n    };\r\n    this._dialog.open(FeedbackComponent, {\r\n      data: dialogConfig.data,\r\n      maxWidth: '600px',\r\n      panelClass: location ? 'report-dialog' : 'feedback-dialog',\r\n    });\r\n  }\r\n\r\n  public submitFeedback(value: any): Observable<boolean> {\r\n    return this._http\r\n      .post<unknown>(`${this._config.apiUrl}/contact`, value)\r\n      .pipe(\r\n        map((_) => true),\r\n        catchError((err) => of(false))\r\n      );\r\n  }\r\n}\r\n","import { MenuItem } from './menu.model';\r\n\r\nexport class SetMenuEntries {\r\n  static readonly type = '[Menu] set entries';\r\n  constructor(public items: MenuItem[]) {}\r\n}\r\n","import { Action, Selector, State, StateContext, Store } from '@ngxs/store';\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { MenuItem } from './menu.model';\r\nimport { SetMenuEntries } from './menu.actions';\r\nimport { RouterDataResolved } from '@ngxs/router-plugin';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { SolidCoreConfig, SOLID_CORE_CONFIG } from '@zentrumnawi/solid-core';\r\n\r\nexport interface MenuStateModel {\r\n  items: MenuItem[];\r\n}\r\n\r\nconst isActive = (routerUrl: string, routeUrl: string) =>\r\n  routeUrl === ''\r\n    ? routerUrl === '/'\r\n    : routerUrl.substring(1).startsWith(routeUrl);\r\n\r\n@State<MenuStateModel>({\r\n  name: 'menu',\r\n  defaults: {\r\n    items: [],\r\n  },\r\n})\r\n@Injectable()\r\nexport class MenuState {\r\n  private items: MenuItem[];\r\n\r\n  @Selector()\r\n  public static getLandingItems(state: MenuStateModel): MenuItem[] {\r\n    const filter = function (item: MenuItem) {\r\n      return item.showOnLanding;\r\n    };\r\n    return state.items.filter(filter);\r\n  }\r\n\r\n  @Selector()\r\n  public static getMenuItems(state: MenuStateModel): MenuItem[] {\r\n    const filter = function (item: MenuItem) {\r\n      return item.showInMenu;\r\n    };\r\n    return state.items.filter(filter);\r\n  }\r\n  constructor(\r\n    router: Router,\r\n    private store: Store,\r\n    private _http: HttpClient,\r\n    @Inject(SOLID_CORE_CONFIG) private _config: SolidCoreConfig\r\n  ) {\r\n    const items: MenuItem[] = [];\r\n    for (const route of router.config.sort(\r\n      (a, b) => a.data?.order - b.data?.order\r\n    )) {\r\n      items.push({\r\n        route: route.path || '',\r\n        active: isActive(router.url, route.path || ''),\r\n        title: route.data?.title,\r\n        icon: route.data?.icon,\r\n        svgIcon: route.data?.svgIcon,\r\n        showInMenu: route.data?.showInMenu,\r\n        showOnLanding: route.data?.showOnLandingPage,\r\n        name: route.data?.name,\r\n      });\r\n    }\r\n    this.items = items;\r\n    setTimeout(() => this.store.dispatch(new SetMenuEntries(items)));\r\n  }\r\n\r\n  public getItemsCount(): number {\r\n    const filter = function (item: MenuItem) {\r\n      return item.showOnLanding;\r\n    };\r\n    return this.items.filter(filter).length;\r\n  }\r\n\r\n  @Action(SetMenuEntries)\r\n  public setEntries(\r\n    { setState }: StateContext<MenuStateModel>,\r\n    { items }: SetMenuEntries\r\n  ) {\r\n    return setState({\r\n      items: [...items],\r\n    });\r\n  }\r\n\r\n  @Action(RouterDataResolved)\r\n  public test(\r\n    ctx: StateContext<MenuStateModel>,\r\n    { event }: RouterDataResolved\r\n  ) {\r\n    const newUrl = event.urlAfterRedirects;\r\n    const newItems = ctx.getState().items.map((item) => {\r\n      return { ...item, active: isActive(newUrl, item.route) };\r\n    });\r\n    return ctx.patchState({\r\n      items: newItems,\r\n    });\r\n  }\r\n}\r\n","import { Inject, Injectable } from '@angular/core';\r\nimport { Dispatch } from '@ngxs-labs/dispatch-decorator';\r\nimport { Navigate } from '@ngxs/router-plugin';\r\nimport { SolidCoreConfig, SOLID_CORE_CONFIG } from '@zentrumnawi/solid-core';\r\nimport introJs from 'intro.js';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class IntroService {\r\n  introJS: any;\r\n\r\n  constructor(@Inject(SOLID_CORE_CONFIG) public config: SolidCoreConfig) {}\r\n\r\n  @Dispatch()\r\n  static async navigateTo(url: string) {\r\n    return new Navigate([url]);\r\n  }\r\n\r\n  guidedTour(callback: (target: any) => void) {\r\n    this.introJS = introJs();\r\n    if (\r\n      localStorage.getItem('hide_landing_tour') == 'false' ||\r\n      localStorage.getItem('hide_landing_tour') == null\r\n    ) {\r\n      this.introJS\r\n        .setOptions({\r\n          tooltipClass: 'customTooltip',\r\n          steps: this.config.guidedTour.steps.filter(function (step: any) {\r\n            if (step.element) {\r\n              const id = step.element.slice(1, step.element.length);\r\n              const element = document.getElementById(id);\r\n              if (element != null || id == 'welcome' || id == 'end-tour') {\r\n                return step.element;\r\n              }\r\n            }\r\n          }),\r\n          exitOnOverlayClick: false,\r\n          hidePrev: true,\r\n          hideNext: true,\r\n        })\r\n        .onbeforechange(callback)\r\n        .start();\r\n      localStorage.setItem('hide_landing_tour', 'true');\r\n    }\r\n  }\r\n}\r\n","import { Component, Inject } from '@angular/core';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSlideToggleChange } from '@angular/material/slide-toggle';\r\nimport { SolidCoreConfig, SOLID_CORE_CONFIG } from '@zentrumnawi/solid-core';\r\n\r\n@Component({\r\n  selector: 'solid-skeleton-landing-banner-dialog',\r\n  templateUrl: './landing-banner-dialog.component.html',\r\n  styleUrls: ['./landing-banner-dialog.component.scss'],\r\n})\r\nexport class LandingBannerDialogComponent {\r\n  public landingInfo;\r\n\r\n  constructor(\r\n    private _ref: MatDialogRef<LandingBannerDialogComponent>,\r\n    @Inject(SOLID_CORE_CONFIG) private coreConfig: SolidCoreConfig\r\n  ) {\r\n    _ref.disableClose = true;\r\n    this.landingInfo = coreConfig.landingBannerContent;\r\n    localStorage.setItem('hide_landing_tour', 'false');\r\n  }\r\n\r\n  public onCloseClick() {\r\n    this._ref.close();\r\n  }\r\n\r\n  public onNotShowAgainToggle(change: MatSlideToggleChange) {\r\n    if (change.checked) localStorage.setItem('hide_landing_banner', 'true');\r\n    else localStorage.setItem('hide_landing_banner', 'false');\r\n  }\r\n\r\n  public onStartTourToggle(change: MatSlideToggleChange) {\r\n    if (change.checked) localStorage.setItem('hide_landing_tour', 'false');\r\n    else localStorage.setItem('hide_landing_tour', 'true');\r\n  }\r\n}\r\n","<div class=\"content-container\" mat-dialog-content>\r\n  <mat-card-header class=\"header\">\r\n    <img class=\"image\" mat-card-avatar [src]=\"landingInfo.header.image\" />\r\n    <mat-card-title class=\"title\">{{\r\n      landingInfo.header.title\r\n    }}</mat-card-title>\r\n    <mat-card-subtitle class=\"subtitle\">\r\n      {{ landingInfo.header.subtitle }}</mat-card-subtitle\r\n    >\r\n  </mat-card-header>\r\n  <mat-card-content class=\"content\" *ngFor=\"let content of landingInfo.content\">\r\n    <p [data]=\"content.p\" markdown></p>\r\n  </mat-card-content>\r\n  <div class=\"toggle-container\">\r\n    <mat-slide-toggle\r\n      class=\"notShowAgainToggle\"\r\n      (change)=\"onNotShowAgainToggle($event)\"\r\n      >Nicht mehr zeigen</mat-slide-toggle\r\n    >\r\n    <mat-slide-toggle\r\n      class=\"startTourToggle\"\r\n      checked=\"true\"\r\n      (change)=\"onStartTourToggle($event)\"\r\n    >\r\n      Tour starten\r\n    </mat-slide-toggle>\r\n  </div>\r\n  <div class=\"button-container\">\r\n    <button\r\n      class=\"closeBtn\"\r\n      mat-stroked-button\r\n      color=\"primary\"\r\n      (click)=\"onCloseClick()\"\r\n    >\r\n      Schlie√üen\r\n    </button>\r\n  </div>\r\n</div>\r\n","export interface MessageModel {\r\n  id: number;\r\n  img: any;\r\n  type: MessageType;\r\n  title: string;\r\n  text: string;\r\n  valid_from: Date;\r\n  valid_to: Date | null;\r\n  unread: boolean;\r\n}\r\n\r\nexport enum MessageType {\r\n  Changelog = 'CL',\r\n  Series = 'SE',\r\n  Notice = 'NO',\r\n}\r\n","import { ReplaySubject, Observable, map, tap } from 'rxjs';\r\nimport { MessageModel } from '../models/message.model';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { SOLID_CORE_CONFIG, SolidCoreConfig } from '@zentrumnawi/solid-core';\r\n\r\nconst sortByDate = function (a: MessageModel, b: MessageModel) {\r\n  return b.valid_from.getTime() - a.valid_from.getTime();\r\n};\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class MessagesService {\r\n  public messages: ReplaySubject<MessageModel[]> = new ReplaySubject<\r\n    MessageModel[]\r\n  >();\r\n  public messages$: Observable<MessageModel[]> = this.messages.asObservable();\r\n\r\n  private messageKey = 'solid_skeleton_messages';\r\n\r\n  constructor(\r\n    @Inject(SOLID_CORE_CONFIG) private _config: SolidCoreConfig,\r\n    private _http: HttpClient\r\n  ) {\r\n    this.getMessages().subscribe();\r\n  }\r\n\r\n  public getMessages(): Observable<MessageModel[]> {\r\n    const now = new Date(Date.now());\r\n    const localMessages: MessageModel[] = [];\r\n    const localData = localStorage.getItem(this.messageKey);\r\n    if (localData) {\r\n      localMessages.push(...JSON.parse(localData));\r\n    }\r\n    return this._http\r\n      .get<MessageModel[]>(`${this._config.apiUrl}/messages`)\r\n      .pipe(\r\n        map((res) => {\r\n          return res\r\n            .map((message) => {\r\n              return {\r\n                ...message,\r\n                valid_to:\r\n                  message.valid_to === null\r\n                    ? null\r\n                    : new Date(message.valid_to as any),\r\n                valid_from: new Date(message.valid_from as any),\r\n                unread:\r\n                  localMessages.find((msg) => msg.id === message.id)?.unread ??\r\n                  true,\r\n              };\r\n            })\r\n            .filter((msg) => {\r\n              return (\r\n                msg.valid_from < now &&\r\n                (msg.valid_to === null || msg.valid_to > now)\r\n              );\r\n            })\r\n            .sort(sortByDate);\r\n        }),\r\n        tap((res) => {\r\n          this.updateMessageState(res);\r\n        })\r\n      );\r\n  }\r\n\r\n  public updateMessageState(msgs: MessageModel[]) {\r\n    if (!msgs) {\r\n      return;\r\n    }\r\n\r\n    this.messages.next(msgs);\r\n    localStorage.setItem(this.messageKey, JSON.stringify(msgs));\r\n  }\r\n}\r\n","import { Directive, HostBinding, Input, OnInit } from '@angular/core';\r\nimport { MatGridList } from '@angular/material/grid-list';\r\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\r\n\r\nexport interface GridColumns {\r\n  xs: number;\r\n  sm: number;\r\n  md: number;\r\n  lg: number;\r\n  xl: number;\r\n}\r\n@Directive({\r\n  selector: '[solidSkeletonGridCols]',\r\n})\r\nexport class GridColsDirective implements OnInit {\r\n  @HostBinding('style.width') gridWidth?: string;\r\n  @HostBinding('style.marginTop') gridMarginTop?: string;\r\n\r\n  private gridCols: GridColumns = { xs: 1, sm: 2, md: 4, lg: 6, xl: 7 };\r\n\r\n  public get cols(): GridColumns {\r\n    return this.gridCols;\r\n  }\r\n\r\n  @Input('solidSkeletonGridCols')\r\n  public set cols(map: GridColumns) {\r\n    if (map && 'object' === typeof map) {\r\n      this.gridCols = map;\r\n    }\r\n  }\r\n\r\n  public constructor(\r\n    private grid: MatGridList,\r\n    private breakpointObserver: BreakpointObserver\r\n  ) {\r\n    if (this.grid != null) {\r\n      this.grid.cols = this.gridCols.md;\r\n    }\r\n  }\r\n\r\n  public ngOnInit(): void {\r\n    if (this.grid != null) {\r\n      this.grid.cols = this.gridCols.md;\r\n    }\r\n    this.breakpointObserver\r\n      .observe([\r\n        Breakpoints.XSmall,\r\n        Breakpoints.Small,\r\n        Breakpoints.Medium,\r\n        Breakpoints.Large,\r\n        Breakpoints.XLarge,\r\n      ])\r\n      .subscribe((result) => {\r\n        if (result.breakpoints[Breakpoints.XSmall]) {\r\n          this.grid.cols = this.gridCols.xs;\r\n          this.gridWidth = '23rem';\r\n        }\r\n        if (result.breakpoints[Breakpoints.Small]) {\r\n          this.grid.cols = this.gridCols.sm;\r\n          this.gridWidth = '34rem';\r\n          this.gridMarginTop = '1vh';\r\n        }\r\n        if (result.breakpoints[Breakpoints.Medium]) {\r\n          this.grid.cols = this.gridCols.md;\r\n          this.gridWidth = '34rem';\r\n          this.gridMarginTop = '1vh';\r\n        }\r\n        if (result.breakpoints[Breakpoints.Large]) {\r\n          this.grid.cols = this.gridCols.lg;\r\n          this.gridWidth = '34rem';\r\n          this.gridMarginTop = '1vh';\r\n        }\r\n        if (result.breakpoints[Breakpoints.XLarge]) {\r\n          this.grid.cols = this.gridCols.xl;\r\n          this.gridWidth = this.grid.cols > 6 ? '80rem ' : '70rem';\r\n          this.gridMarginTop = '4vh';\r\n        }\r\n      });\r\n  }\r\n}\r\n","import {\r\n  AfterViewInit,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  HostListener,\r\n  Inject,\r\n  InjectionToken,\r\n  OnDestroy,\r\n  OnInit,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport { MenuState } from '../../state/menu.state';\r\nimport { Observable, Subject, takeUntil } from 'rxjs';\r\nimport { MenuItem } from '../../state/menu.model';\r\nimport { Select } from '@ngxs/store';\r\nimport {\r\n  FeedbackService,\r\n  SOLID_SKELETON_FEEDBACK_SERVICE,\r\n} from '../../services/feedback.service';\r\nimport { IntroService } from '../../services/intro.service';\r\nimport { SolidCoreConfig, SOLID_CORE_CONFIG } from '@zentrumnawi/solid-core';\r\nimport { MatIconRegistry } from '@angular/material/icon';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { LandingBannerDialogComponent } from '../landing-banner-dialog/landing-banner-dialog.component';\r\nimport { MatSlideToggleChange } from '@angular/material/slide-toggle';\r\nimport { GridColumns } from '../../directives/grid-cols.directive';\r\nimport { MessageModel, MessageType } from '../../models/message.model';\r\nimport { MessagesService } from '../../services/messages.service';\r\n\r\nexport const SOLID_SKELETON_HACKY_INJECTION = new InjectionToken<() => void>(\r\n  'solid-skeleton-hacky-injection'\r\n);\r\n\r\n@Component({\r\n  selector: 'solid-skeleton-landing',\r\n  templateUrl: './landing.component.html',\r\n  styleUrls: ['./landing.component.scss'],\r\n})\r\nexport class LandingComponent implements OnInit, AfterViewInit, OnDestroy {\r\n  @Select(MenuState.getLandingItems)\r\n  public menuItems$!: Observable<MenuItem[]>;\r\n\r\n  @ViewChild('landing') Landing?: ElementRef;\r\n  public onGlossaryClick = new EventEmitter();\r\n\r\n  public destroy$ = new Subject<void>();\r\n\r\n  private landingBannerKey = 'hide_landing_banner';\r\n  private landingTourKey = 'hide_landing_tour';\r\n\r\n  private messages: MessageModel[] = [];\r\n  public msgCount = 0;\r\n  public messagesLoading = true;\r\n\r\n  public showLanding =\r\n    localStorage.getItem(this.landingBannerKey) == 'false' ? true : false;\r\n  public showTour =\r\n    localStorage.getItem(this.landingTourKey) == 'false' || this.showLanding\r\n      ? true\r\n      : false;\r\n\r\n  public innerWidth = window.innerWidth;\r\n  public gridColumns!: GridColumns;\r\n\r\n  public landingInfo: any;\r\n  public landingRef: any;\r\n\r\n  constructor(\r\n    @Inject(SOLID_SKELETON_FEEDBACK_SERVICE) public feedback: FeedbackService,\r\n    @Inject(SOLID_CORE_CONFIG) public coreConfig: SolidCoreConfig,\r\n    iconRegistry: MatIconRegistry,\r\n    sanitizer: DomSanitizer,\r\n    private introService: IntroService,\r\n    private landingDialog: MatDialog,\r\n    private menuState: MenuState,\r\n    private messagesService: MessagesService\r\n  ) {\r\n    iconRegistry.addSvgIcon(\r\n      'glossary_custom',\r\n      sanitizer.bypassSecurityTrustResourceUrl(coreConfig.glossaryLogo)\r\n    );\r\n  }\r\n\r\n  @HostListener('window:resize', ['$event'])\r\n  onResize(event: Event) {\r\n    this.innerWidth = window.innerWidth;\r\n    if (this.innerWidth > 700 && this.landingRef) {\r\n      this.landingRef.close();\r\n      this.showTour = false;\r\n    }\r\n  }\r\n\r\n  public ngOnInit(): void {\r\n    this.getNewMessagesCount();\r\n    const itemsCount = this.menuState.getItemsCount();\r\n    this.gridColumns = { xs: 2, sm: 3, md: 3, lg: 3, xl: itemsCount + 2 };\r\n    this.landingInfo = this.coreConfig.landingBannerContent;\r\n  }\r\n\r\n  public ngAfterViewInit(): void {\r\n    if (this.innerWidth < 700 && this.showLanding) {\r\n      this.landingRef = this.landingDialog.open(LandingBannerDialogComponent, {\r\n        panelClass: 'landing-banner-dialog',\r\n      });\r\n      this.landingRef.afterClosed().subscribe(() => {\r\n        if (this.showTour) this.startGuidedTour();\r\n      });\r\n    } else if (!this.showLanding && this.showTour) this.startGuidedTour();\r\n  }\r\n\r\n  public ngOnDestroy(): void {\r\n    if (this.showTour) localStorage.setItem(this.landingTourKey, 'false');\r\n    this.destroy$.next();\r\n    this.destroy$.complete();\r\n  }\r\n\r\n  private startGuidedTour(): void {\r\n    setTimeout(() => {\r\n      this.introService.guidedTour((_targetElement: any) => {\r\n        try {\r\n          const id = _targetElement.id;\r\n          const landing = this.Landing?.nativeElement;\r\n          const menuOffSetTop =\r\n            document.getElementById('menu-grid-list')?.offsetTop;\r\n\r\n          if (id.slice(0, 9) == 'menu-tile' || id == 'feedback') {\r\n            if (menuOffSetTop) landing.scrollTop = menuOffSetTop - 50;\r\n          }\r\n\r\n          if (id == '') {\r\n            if (menuOffSetTop) landing.scrollTop = 0;\r\n          }\r\n        } catch (error) {\r\n          return;\r\n        }\r\n        return;\r\n      });\r\n    }, 500);\r\n  }\r\n\r\n  public onNotShowAgainToggle(change: MatSlideToggleChange) {\r\n    if (change.checked) localStorage.setItem(this.landingBannerKey, 'true');\r\n    else localStorage.setItem(this.landingBannerKey, 'false');\r\n  }\r\n\r\n  public onStartTourToggle(change: MatSlideToggleChange) {\r\n    this.showTour = !this.showTour;\r\n    if (change.checked) localStorage.setItem(this.landingTourKey, 'false');\r\n    else localStorage.setItem(this.landingTourKey, 'true');\r\n  }\r\n\r\n  public onCloseClick() {\r\n    this.showLanding = false;\r\n    localStorage.setItem(this.landingBannerKey, 'true');\r\n    if (this.showTour) {\r\n      localStorage.setItem(this.landingTourKey, 'false');\r\n      this.startGuidedTour();\r\n    }\r\n  }\r\n\r\n  public getNewMessagesCount() {\r\n    this.messagesService.messages$\r\n      .pipe(takeUntil(this.destroy$))\r\n      .subscribe((msgs: MessageModel[]) => {\r\n        this.messages = msgs.filter((msg: MessageModel) => {\r\n          return msg.unread && msg.type !== MessageType.Changelog;\r\n        });\r\n        this.msgCount = this.messages.length;\r\n        this.messagesLoading = false;\r\n      });\r\n  }\r\n}\r\n","<div class=\"landing-container\" #landing>\r\n  <mat-card *ngIf=\"innerWidth >= 700 && showLanding && !messagesLoading\">\r\n    <mat-card-header>\r\n      <img mat-card-avatar [src]=\"landingInfo.header.image\" />\r\n      <mat-card-title>{{ landingInfo.header.title }}</mat-card-title>\r\n      <mat-card-subtitle>{{ landingInfo.header.subtitle }}</mat-card-subtitle>\r\n    </mat-card-header>\r\n    <mat-card-content *ngFor=\"let content of landingInfo.content\">\r\n      <p>\r\n        {{ content.p }}\r\n      </p>\r\n    </mat-card-content>\r\n    <div class=\"toggle-container\">\r\n      <mat-slide-toggle\r\n        class=\"notShowAgainToggle\"\r\n        (change)=\"onNotShowAgainToggle($event)\"\r\n        >Nicht mehr zeigen</mat-slide-toggle\r\n      >\r\n      <mat-slide-toggle\r\n        class=\"startTourToggle\"\r\n        checked=\"true\"\r\n        (change)=\"onStartTourToggle($event)\"\r\n      >\r\n        Tour starten\r\n      </mat-slide-toggle>\r\n    </div>\r\n    <div class=\"button-container\">\r\n      <button\r\n        class=\"closeBtn\"\r\n        mat-stroked-button\r\n        color=\"primary\"\r\n        (click)=\"onCloseClick()\"\r\n      >\r\n        Schlie√üen\r\n      </button>\r\n    </div>\r\n  </mat-card>\r\n  <mat-grid-list\r\n    id=\"menu-grid-list\"\r\n    [solidSkeletonGridCols]=\"gridColumns\"\r\n    gutterSize=\"1rem\"\r\n    rowHeight=\"1:1\"\r\n  >\r\n    <mat-grid-tile\r\n      *ngFor=\"let menuItem of menuItems$ | async; let index = index\"\r\n      class=\"mat-elevation-z2\"\r\n      [routerLink]=\"menuItem.route\"\r\n      [queryParams]=\"{ directTo: msgCount > 0 ? 'news' : undefined }\"\r\n      id=\"menu-tile-{{ index }}\"\r\n    >\r\n      <mat-icon\r\n        *ngIf=\"menuItem.svgIcon && menuItem.route !== 'info'\"\r\n        [svgIcon]=\"menuItem.svgIcon\"\r\n      ></mat-icon>\r\n      <mat-icon *ngIf=\"!menuItem.svgIcon && menuItem.route !== 'info'\">{{\r\n        menuItem.icon\r\n      }}</mat-icon>\r\n      <mat-icon\r\n        *ngIf=\"menuItem.svgIcon && menuItem.route === 'info'\"\r\n        [svgIcon]=\"menuItem.svgIcon\"\r\n        [matBadge]=\"msgCount\"\r\n        [matBadgeHidden]=\"msgCount === 0\"\r\n        matBadgeSize=\"large\"\r\n      ></mat-icon>\r\n      <span class=\"navTitle\">{{ menuItem.title }}</span>\r\n    </mat-grid-tile>\r\n    <mat-grid-tile\r\n      id=\"glossary\"\r\n      (click)=\"onGlossaryClick.emit()\"\r\n      class=\"mat-elevation-z2\"\r\n      ><mat-icon matListIcon svgIcon=\"glossary_custom\"></mat-icon>\r\n      <span class=\"navTitle\">Glossar</span>\r\n    </mat-grid-tile>\r\n    <mat-grid-tile\r\n      id=\"feedback\"\r\n      (click)=\"feedback.showDialog()\"\r\n      class=\"mat-elevation-z2\"\r\n      ><mat-icon matListIcon svgIcon=\"feedback\"></mat-icon>\r\n      <span class=\"navTitle\">Kontakt</span>\r\n    </mat-grid-tile>\r\n  </mat-grid-list>\r\n  <div class=\"footer-container\">\r\n    <a routerLink=\"info\">Impressum</a>\r\n    <a routerLink=\"info\" [queryParams]=\"{ directTo: 'privacy' }\">\r\n      Datenschutz</a\r\n    >\r\n  </div>\r\n</div>\r\n","import { Component, EventEmitter, Inject, OnInit, Output } from '@angular/core';\r\nimport { Select } from '@ngxs/store';\r\nimport { Observable } from 'rxjs';\r\nimport {\r\n  FeedbackService,\r\n  SOLID_SKELETON_FEEDBACK_SERVICE,\r\n} from '../../services/feedback.service';\r\nimport { MenuState } from '../../state/menu.state';\r\nimport { MenuItem } from '../../state/menu.model';\r\n\r\n@Component({\r\n  selector: 'solid-skeleton-main-menu',\r\n  templateUrl: './main-menu.component.html',\r\n  styleUrls: ['./main-menu.component.scss'],\r\n})\r\nexport class MainMenuComponent implements OnInit {\r\n  @Output() public selectMenuEntry = new EventEmitter();\r\n  @Select(MenuState.getMenuItems)\r\n  public MenuItems!: Observable<MenuItem[]>;\r\n  @Output() public openGlossaryClick = new EventEmitter();\r\n  private messages: any;\r\n  public msgNumber: number;\r\n\r\n  constructor(\r\n    @Inject(SOLID_SKELETON_FEEDBACK_SERVICE)\r\n    public feedback: FeedbackService\r\n  ) {\r\n    this.messages = localStorage.getItem('solid_skeleton_messages');\r\n    this.msgNumber = 0;\r\n  }\r\n\r\n  public ngOnInit(): void {\r\n    const msgObj = JSON.parse(this.messages);\r\n    msgObj?.forEach((msg: any) => {\r\n      if (msg.unread && msg.type != 'CL') this.msgNumber++;\r\n    });\r\n  }\r\n\r\n  public onMenuItemSelected(item: string) {\r\n    if (item === 'info') this.msgNumber = 0;\r\n  }\r\n}\r\n","<!-- Without Dropdown Version -->\r\n<div class=\"main-menu-container\">\r\n  <mat-nav-list id=\"menu\">\r\n    <ng-container *ngFor=\"let item of MenuItems | async; let index = index\">\r\n      <mat-list-item\r\n        *ngIf=\"item.route === 'info'\"\r\n        (click)=\"openGlossaryClick.emit()\"\r\n      >\r\n        <h3 matLine>Glossar</h3>\r\n      </mat-list-item>\r\n      <mat-list-item\r\n        (click)=\"selectMenuEntry.emit(); onMenuItemSelected(item.route)\"\r\n        [class.active]=\"item.active\"\r\n        [routerLink]=\"item.route\"\r\n        [queryParams]=\"{ directTo: msgNumber > 0 ? 'news' : undefined }\"\r\n      >\r\n        <h3 matLine>\r\n          {{ item.title }}\r\n        </h3>\r\n      </mat-list-item>\r\n    </ng-container>\r\n    <mat-list-item (click)=\"feedback.showDialog()\" *ngIf=\"feedback\">\r\n      <h3 matLine>Kontakt</h3>\r\n    </mat-list-item>\r\n  </mat-nav-list>\r\n</div>\r\n<!-- Slideshow Dropdown Version -->\r\n<!-- <div class=\"main-menu-container\">\r\n  <mat-accordion>\r\n    <ng-container *ngFor=\"let menuItem of MenuItems | async\">\r\n      <mat-expansion-panel\r\n        (click)=\"navigateTo(menuItem.route)\"\r\n        *ngIf=\"menuItem.name !== 'slideshow'\"\r\n        [class.active]=\"menuItem.active\"\r\n        hideToggle\r\n      >\r\n        <mat-expansion-panel-header>\r\n          <mat-panel-title\r\n            ><h3 matLine>{{ menuItem.title }}</h3></mat-panel-title\r\n          >\r\n        </mat-expansion-panel-header>\r\n      </mat-expansion-panel>\r\n      <mat-expansion-panel *ngIf=\"menuItem.name === 'slideshow'\" hideToggle>\r\n        <mat-expansion-panel-header [class.active]=\"menuItem.active\">\r\n          <mat-panel-title\r\n            ><h3 matLine>{{ menuItem.title }}</h3></mat-panel-title\r\n          >\r\n        </mat-expansion-panel-header>\r\n        <mat-nav-list *ngIf=\"CategoriesItems | async as categories\">\r\n          <mat-list-item\r\n            (click)=\"navigateTo(menuItem.route + '/' + category.slug)\"\r\n            *ngFor=\"let category of categories\"\r\n          >\r\n            <span matLine>{{ category.name }}</span>\r\n          </mat-list-item>\r\n        </mat-nav-list>\r\n      </mat-expansion-panel>\r\n    </ng-container>\r\n    <mat-expansion-panel\r\n      (click)=\"feedback.showDialog()\"\r\n      *ngIf=\"feedback\"\r\n      hideToggle\r\n    >\r\n      <mat-expansion-panel-header>\r\n        <mat-panel-title><h3 matLine>Kontakt</h3></mat-panel-title>\r\n      </mat-expansion-panel-header>\r\n    </mat-expansion-panel>\r\n  </mat-accordion>\r\n</div> -->\r\n","import { Component, Inject, OnInit, ViewChild } from '@angular/core';\r\nimport { MatDrawer } from '@angular/material/sidenav';\r\nimport { BreakpointObserver } from '@angular/cdk/layout';\r\nimport { UpdateService } from '../../services/update.service';\r\nimport { SOLID_CORE_CONFIG, SolidCoreConfig } from '@zentrumnawi/solid-core';\r\nimport {\r\n  FeedbackService,\r\n  SOLID_SKELETON_FEEDBACK_SERVICE,\r\n} from '../../services/feedback.service';\r\nimport { Router } from '@angular/router';\r\nimport { LandingComponent } from '../landing/landing.component';\r\nimport { Subscription } from 'rxjs';\r\nimport { Navigate } from '@ngxs/router-plugin';\r\nimport { Dispatch } from '@ngxs-labs/dispatch-decorator';\r\nimport { BaseComponent } from '@zentrumnawi/solid-profile';\r\n\r\n@Component({\r\n  selector: 'solid-skeleton-base-layout',\r\n  templateUrl: './base-layout.component.html',\r\n  styleUrls: ['./base-layout.component.scss'],\r\n})\r\nexport class BaseLayoutComponent implements OnInit {\r\n  public FixedLayout = false;\r\n  public subscription!: Subscription;\r\n  public title = '';\r\n  @ViewChild('mainmenu', { static: true }) MainMenu?: MatDrawer;\r\n  @ViewChild('glossary', { static: true }) Glossary?: MatDrawer;\r\n\r\n  // noinspection JSUnusedLocalSymbols.\r\n  constructor(\r\n    @Inject(SOLID_SKELETON_FEEDBACK_SERVICE)\r\n    public feedback: FeedbackService,\r\n    @Inject(SOLID_CORE_CONFIG) public config: SolidCoreConfig,\r\n    update: UpdateService,\r\n    private _breakpointObserver: BreakpointObserver,\r\n    private _router: Router\r\n  ) {}\r\n\r\n  public ngOnInit() {\r\n    this._breakpointObserver\r\n      .observe(['(min-width: 1000px)'])\r\n      .subscribe((isFixed) => {\r\n        const newFixedLayout = isFixed.matches;\r\n        if (newFixedLayout) {\r\n          if (this.MainMenu) {\r\n            this.MainMenu.open();\r\n          }\r\n          if (this.Glossary) {\r\n            this.Glossary.close();\r\n          }\r\n        } else {\r\n          if (this.MainMenu) {\r\n            this.MainMenu.close();\r\n          }\r\n          if (this.Glossary) {\r\n            this.Glossary.close();\r\n          }\r\n        }\r\n        this.FixedLayout = newFixedLayout;\r\n      });\r\n  }\r\n\r\n  public async onMenuSelectionChanged() {\r\n    if (!this.FixedLayout && this.MainMenu) {\r\n      await this.MainMenu.close();\r\n    }\r\n    if (!this.FixedLayout && this.Glossary) {\r\n      await this.Glossary.close();\r\n    }\r\n  }\r\n  public onMenuGlossaryClick() {\r\n    if (this.Glossary) {\r\n      this.Glossary.open();\r\n    }\r\n    if (!this.FixedLayout && this.MainMenu) {\r\n      this.MainMenu.close();\r\n    }\r\n  }\r\n\r\n  public closeMenu() {\r\n    if (this.MainMenu && !this.FixedLayout) this.MainMenu.close();\r\n  }\r\n\r\n  public reportError() {\r\n    const location = this.Glossary?.opened ? 'glossary' : this._router.url;\r\n    this.feedback.showDialog(location, this.title);\r\n    this.title = '';\r\n  }\r\n\r\n  public onLandingGlossaryClick(ref: any) {\r\n    if (!(ref instanceof LandingComponent)) {\r\n      return;\r\n    }\r\n\r\n    ref.onGlossaryClick.subscribe(() => {\r\n      if (this.Glossary) {\r\n        this.Glossary.open();\r\n      }\r\n    });\r\n  }\r\n\r\n  public unsubscribe() {\r\n    if (this.subscription) {\r\n      this.subscription.unsubscribe();\r\n    }\r\n  }\r\n\r\n  @Dispatch()\r\n  public async navigateTo(url: string) {\r\n    return new Navigate([url]);\r\n  }\r\n\r\n  public profileTitle(ref: any): void {\r\n    if (!(ref instanceof BaseComponent)) {\r\n      return;\r\n    }\r\n    ref.profileTitle.subscribe((profileTitle: string) => {\r\n      this.title = profileTitle;\r\n    });\r\n  }\r\n}\r\n","<div class=\"base-layout-container mat-typography\">\r\n  <mat-toolbar color=\"primary\" class=\"base-layout-main-toolbar\">\r\n    <ng-container *ngIf=\"FixedLayout\">\r\n      <div class=\"right-border\">\r\n        <span>Men√º</span>\r\n      </div>\r\n      <img\r\n        id=\"Logo\"\r\n        [src]=\"config.appLogo\"\r\n        onerror='this.style.display = \"none\"'\r\n        (click)=\"navigateTo('/')\"\r\n      />\r\n      <span id=\"app-name\" class=\"appName\" (click)=\"navigateTo('/')\">{{\r\n        config.appName\r\n      }}</span>\r\n      <div class=\"spacer\"></div>\r\n      <div class=\"reportButton\" *ngIf=\"this.config.error_report\">\r\n        <button\r\n          id=\"reportButton\"\r\n          class=\"button\"\r\n          (click)=\"reportError()\"\r\n          mat-icon-button\r\n        >\r\n          <mat-icon\r\n            aria-label=\"Fehler melden\"\r\n            svgIcon=\"feedback_outline\"\r\n          ></mat-icon>\r\n        </button>\r\n        <div class=\"bottom\"></div>\r\n      </div>\r\n      <div id=\"glossary\">\r\n        <button (click)=\"Glossary?.toggle()\" mat-icon-button>\r\n          <mat-icon\r\n            aria-label=\"Glossar √∂ffnen\"\r\n            svgIcon=\"glossary_generic\"\r\n          ></mat-icon>\r\n        </button>\r\n      </div>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"!FixedLayout\">\r\n      <div class=\"mainmenu-button\">\r\n        <button\r\n          id=\"menu\"\r\n          (click)=\"MainMenu?.toggle(); Glossary?.close()\"\r\n          mat-icon-button\r\n        >\r\n          <mat-icon aria-label=\"Men√º √∂ffnen\">menu</mat-icon>\r\n        </button>\r\n      </div>\r\n      <img\r\n        id=\"Logo\"\r\n        [src]=\"config.appLogo\"\r\n        onerror='this.style.display = \"none\"'\r\n        (click)=\"navigateTo('/')\"\r\n      />\r\n      <span\r\n        id=\"app-name\"\r\n        [class.app-title-fixed]=\"FixedLayout\"\r\n        class=\"appName\"\r\n        (click)=\"navigateTo('/')\"\r\n        >{{ config.appName }}</span\r\n      >\r\n      <div class=\"spacer\"></div>\r\n      <div class=\"reportButton\" *ngIf=\"this.config.error_report\">\r\n        <button\r\n          id=\"reportButton\"\r\n          class=\"button\"\r\n          (click)=\"reportError()\"\r\n          mat-icon-button\r\n        >\r\n          <mat-icon\r\n            aria-label=\"Fehler melden\"\r\n            svgIcon=\"feedback_outline\"\r\n          ></mat-icon>\r\n        </button>\r\n        <div class=\"bottom\"></div>\r\n      </div>\r\n      <button\r\n        id=\"glossary\"\r\n        (click)=\"Glossary?.toggle(); MainMenu?.close()\"\r\n        mat-icon-button\r\n      >\r\n        <mat-icon\r\n          aria-label=\"Glossar √∂ffnen\"\r\n          svgIcon=\"glossary_generic\"\r\n        ></mat-icon>\r\n      </button>\r\n    </ng-container>\r\n  </mat-toolbar>\r\n  <mat-sidenav-container (backdropClick)=\"closeMenu()\">\r\n    <mat-sidenav\r\n      #mainmenu\r\n      [fixedInViewport]=\"!FixedLayout\"\r\n      [mode]=\"FixedLayout ? 'side' : 'over'\"\r\n      class=\"mainmenu-sidenav\"\r\n      position=\"start\"\r\n      disableClose\r\n    >\r\n      <mat-toolbar\r\n        (click)=\"MainMenu?.toggle()\"\r\n        *ngIf=\"!FixedLayout\"\r\n        color=\"primary\"\r\n      >\r\n        Men√º\r\n      </mat-toolbar>\r\n      <solid-skeleton-main-menu\r\n        (selectMenuEntry)=\"onMenuSelectionChanged()\"\r\n        (openGlossaryClick)=\"onMenuGlossaryClick()\"\r\n      ></solid-skeleton-main-menu>\r\n    </mat-sidenav>\r\n    <mat-sidenav-content>\r\n      <router-outlet\r\n        (activate)=\"onLandingGlossaryClick($event); profileTitle($event)\"\r\n        (deactivate)=\"unsubscribe()\"\r\n      >\r\n      </router-outlet>\r\n    </mat-sidenav-content>\r\n    <mat-sidenav\r\n      #glossary\r\n      [fixedInViewport]=\"true\"\r\n      [mode]=\"'over'\"\r\n      class=\"glossary-sidenav\"\r\n      position=\"end\"\r\n    >\r\n      <mat-toolbar\r\n        (click)=\"Glossary?.toggle()\"\r\n        class=\"glossary-toolbar\"\r\n        color=\"primary\"\r\n      >\r\n        Glossar\r\n      </mat-toolbar>\r\n      <solid-glossary></solid-glossary>\r\n    </mat-sidenav>\r\n  </mat-sidenav-container>\r\n</div>\r\n","import { Component, Input } from '@angular/core';\r\nimport { MessageModel } from '../../models/message.model';\r\n\r\n@Component({\r\n  selector: 'solid-skeleton-message-list',\r\n  templateUrl: './message-list.component.html',\r\n  styleUrls: ['./message-list.component.scss'],\r\n})\r\nexport class MessageListComponent {\r\n  @Input() messages!: MessageModel[];\r\n  @Input() tabIndex!: number;\r\n}\r\n","<mat-list>\r\n  <mat-list-item *ngFor=\"let msg of messages\">\r\n    <h3 matLine [ngStyle]=\"{ fontWeight: msg.unread ? '500' : 'normal' }\">\r\n      {{ msg.title\r\n      }}<span *ngIf=\"msg.valid_from\"\r\n        >&nbsp;|&nbsp;{{ msg.valid_from | date: 'dd.MM.yyyy' }}</span\r\n      >\r\n      <span *ngIf=\"msg.valid_to\"\r\n        >&nbsp;- {{ msg.valid_to | date: 'dd.MM.yyyy' }}</span\r\n      >\r\n    </h3>\r\n    <div class=\"content-container\">\r\n      <img\r\n        *ngIf=\"msg.img\"\r\n        [src]=\"msg.img.img.thumbnail\"\r\n        [alt]=\"msg.img.img_alt\"\r\n      />\r\n      <div\r\n        class=\"text\"\r\n        *ngIf=\"msg.text !== ''\"\r\n        [data]=\"msg.text\"\r\n        markdown\r\n        matLine\r\n      ></div>\r\n    </div>\r\n  </mat-list-item>\r\n</mat-list>\r\n","import {\r\n  Component,\r\n  ElementRef,\r\n  Inject,\r\n  OnDestroy,\r\n  OnInit,\r\n  Type,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport {\r\n  InternalSolidSkeletonConfig,\r\n  SOLID_SKELETON_CONFIG,\r\n} from '../../solid-skeleton-config';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { MessageModel, MessageType } from '../../models/message.model';\r\nimport { Subject, takeUntil } from 'rxjs';\r\nimport { MessagesService } from '../../services/messages.service';\r\n\r\n@Component({\r\n  selector: 'solid-skeleton-info',\r\n  templateUrl: './info.component.html',\r\n  styleUrls: ['./info.component.scss'],\r\n})\r\nexport class InfoComponent implements OnInit, OnDestroy {\r\n  public destroy$: Subject<void> = new Subject();\r\n\r\n  public tourLandingChecked = false;\r\n  public tourProfileChecked = false;\r\n  public landingChecked = false;\r\n  public messagesLoading = true;\r\n\r\n  public route: ActivatedRoute;\r\n  public profileTitle = '';\r\n\r\n  public changeLogMsg: MessageModel[] = [];\r\n  public newsMsg: MessageModel[] = [];\r\n  public messages: MessageModel[] = [];\r\n\r\n  public prevTab = -1;\r\n\r\n  public InfoPageContentComponent: Type<any>;\r\n  public PrivacyContentComponent: Type<any>;\r\n\r\n  tabIndex = 0;\r\n  @ViewChild('info_container') public info_container?: ElementRef;\r\n\r\n  constructor(\r\n    @Inject(SOLID_SKELETON_CONFIG) cfg: InternalSolidSkeletonConfig,\r\n    route: ActivatedRoute,\r\n    private msgService: MessagesService\r\n  ) {\r\n    this.InfoPageContentComponent = cfg.infoPageContent;\r\n    this.PrivacyContentComponent = cfg.privacyContent;\r\n    this.profileTitle = cfg.routingConfig.profile.title;\r\n    this.landingChecked =\r\n      localStorage.getItem('hide_landing_banner') === 'false';\r\n    this.tourLandingChecked =\r\n      localStorage.getItem('hide_landing_tour') === 'false';\r\n    this.tourProfileChecked =\r\n      localStorage.getItem('hide_profile_tour') === 'false';\r\n    this.route = route;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.getMessages();\r\n    this.navigateTab();\r\n\r\n    if (this.tabIndex === 2) {\r\n      this.prevTab = 2;\r\n      this.updateMessages(MessageType.Notice);\r\n    } else if (this.tabIndex === 3) {\r\n      this.prevTab = 3;\r\n      this.updateMessages(MessageType.Changelog);\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroy$.next();\r\n    this.destroy$.complete();\r\n    this.msgService.updateMessageState(this.messages);\r\n  }\r\n\r\n  moveTabToPrivacy(event: any) {\r\n    event.preventDefault();\r\n    this.tabIndex = 1;\r\n  }\r\n\r\n  public scrollToTop() {\r\n    const info_container = this.info_container;\r\n    if (!info_container || info_container.nativeElement.scrollTop === 0) {\r\n      return;\r\n    }\r\n    info_container.nativeElement.scrollTop = 0;\r\n  }\r\n\r\n  public toggleChange() {\r\n    if (this.tourLandingChecked)\r\n      localStorage.setItem('hide_landing_tour', 'false');\r\n    else localStorage.setItem('hide_landing_tour', 'true');\r\n    if (this.tourProfileChecked)\r\n      localStorage.setItem('hide_profile_tour', 'false');\r\n    else localStorage.setItem('hide_profile_tour', 'true');\r\n    if (this.landingChecked)\r\n      localStorage.setItem('hide_landing_banner', 'false');\r\n    else localStorage.setItem('hide_landing_banner', 'true');\r\n  }\r\n\r\n  public onSelectedIndexChange(index: number) {\r\n    if (this.prevTab === 2 || this.prevTab === 3) {\r\n      this.msgService.updateMessageState(this.messages);\r\n    }\r\n\r\n    if (index === 2) {\r\n      this.updateMessages(MessageType.Notice);\r\n    } else if (index === 3) {\r\n      this.updateMessages(MessageType.Changelog);\r\n    }\r\n    this.prevTab = index;\r\n  }\r\n\r\n  public getMessages() {\r\n    this.messagesLoading = true;\r\n    this.msgService.messages$\r\n      .pipe(takeUntil(this.destroy$))\r\n      .subscribe((msgs) => {\r\n        this.newsMsg = msgs.filter((msg: MessageModel) => {\r\n          return msg.type !== MessageType.Changelog;\r\n        });\r\n        this.changeLogMsg = msgs.filter((msg: MessageModel) => {\r\n          return msg.type === MessageType.Changelog;\r\n        });\r\n        this.messages = msgs;\r\n        this.messagesLoading = false;\r\n      });\r\n  }\r\n\r\n  public navigateTab() {\r\n    const directTo = this.route.snapshot.queryParams.directTo;\r\n    switch (directTo) {\r\n      case 'privacy':\r\n        this.tabIndex = 1;\r\n        break;\r\n\r\n      case 'news':\r\n        this.tabIndex = 2;\r\n        break;\r\n\r\n      default:\r\n        this.tabIndex = 0;\r\n        break;\r\n    }\r\n  }\r\n\r\n  public updateMessages(type: MessageType) {\r\n    switch (type) {\r\n      case MessageType.Changelog:\r\n        this.messages = this.messages.map((msg: MessageModel) => {\r\n          if (msg.type === MessageType.Changelog) {\r\n            return { ...msg, unread: false };\r\n          } else {\r\n            return msg;\r\n          }\r\n        });\r\n        break;\r\n      case MessageType.Notice:\r\n      case MessageType.Series:\r\n        this.messages = this.messages.map((msg: MessageModel) => {\r\n          if (msg.type !== MessageType.Changelog) {\r\n            return { ...msg, unread: false };\r\n          } else {\r\n            return msg;\r\n          }\r\n        });\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n  }\r\n}\r\n","<div class=\"container\" *ngIf=\"!messagesLoading\">\r\n  <div class=\"info-container\" #info_container>\r\n    <div class=\"button-back-container\">\r\n      <button id=\"backBtn\" mat-icon-button class=\"button-back\" routerLink=\"\">\r\n        <mat-icon>arrow_back</mat-icon>\r\n      </button>\r\n    </div>\r\n    <mat-tab-group\r\n      [(selectedIndex)]=\"tabIndex\"\r\n      (selectedIndexChange)=\"onSelectedIndexChange($event)\"\r\n    >\r\n      <mat-tab label=\"Info\">\r\n        <ng-container\r\n          *ngComponentOutlet=\"InfoPageContentComponent\"\r\n        ></ng-container>\r\n        <p class=\"privacy\">\r\n          Beachten Sie auch die\r\n          <a class=\"info-link\" (click)=\"moveTabToPrivacy($event)\" href=\"\"\r\n            >Datenschutzerkl√§rung</a\r\n          >\r\n          gem√§√ü Art 13. EU DSGVO.\r\n        </p>\r\n      </mat-tab>\r\n      <mat-tab label=\"Datenschutz\">\r\n        <ng-container\r\n          *ngComponentOutlet=\"PrivacyContentComponent\"\r\n        ></ng-container>\r\n      </mat-tab>\r\n      <mat-tab label=\"News\" *ngIf=\"newsMsg.length > 0\">\r\n        <solid-skeleton-message-list\r\n          [messages]=\"newsMsg\"\r\n          [tabIndex]=\"tabIndex\"\r\n        ></solid-skeleton-message-list>\r\n      </mat-tab>\r\n      <mat-tab label=\"Changelog\" *ngIf=\"changeLogMsg.length > 0\">\r\n        <solid-skeleton-message-list\r\n          [messages]=\"changeLogMsg\"\r\n          [tabIndex]=\"tabIndex\"\r\n        >\r\n        </solid-skeleton-message-list>\r\n      </mat-tab>\r\n      <mat-tab label=\"Einstellungen\">\r\n        <div class=\"setting-container\">\r\n          <div mat-subheader class=\"hint\">\r\n            Hinweis: Alle Einstellungen werden nur auf diesem Ger√§t gespeichert.\r\n          </div>\r\n\r\n          <mat-list id=\"setting\" class=\"setting-list\">\r\n            <div mat-subheader>Startseite</div>\r\n            <mat-list-item>\r\n              <mat-slide-toggle\r\n                (change)=\"toggleChange()\"\r\n                [(ngModel)]=\"landingChecked\"\r\n              >\r\n                Willkommensnachricht anzeigen\r\n              </mat-slide-toggle>\r\n            </mat-list-item>\r\n            <mat-list-item>\r\n              <mat-slide-toggle\r\n                (change)=\"toggleChange()\"\r\n                [(ngModel)]=\"tourLandingChecked\"\r\n              >\r\n                Tour anzeigen\r\n              </mat-slide-toggle>\r\n            </mat-list-item>\r\n            <div mat-subheader class=\"hint\" *ngIf=\"tourLandingChecked\">\r\n              Die Tour wird beim n√§chsten Besuch der Startseite angezeigt.\r\n            </div>\r\n            <div mat-subheader>{{ profileTitle }}</div>\r\n            <mat-list-item>\r\n              <mat-slide-toggle\r\n                (change)=\"toggleChange()\"\r\n                [(ngModel)]=\"tourProfileChecked\"\r\n              >\r\n                Tour anzeigen\r\n              </mat-slide-toggle>\r\n            </mat-list-item>\r\n            <div mat-subheader class=\"hint\" *ngIf=\"tourProfileChecked\">\r\n              Die Tour wird beim n√§chsten Besuch der\r\n              {{ profileTitle }} angezeigt.\r\n            </div>\r\n          </mat-list>\r\n        </div>\r\n      </mat-tab>\r\n    </mat-tab-group>\r\n  </div>\r\n</div>\r\n","import { LandingComponent } from './components/landing/landing.component';\r\nimport {\r\n  RouteConfigFromModule,\r\n  RouteConfigWithComponent,\r\n  RoutingConfig,\r\n} from './solid-skeleton-config';\r\nimport { Route } from '@angular/router';\r\nimport { InfoComponent } from './components/info/info.component';\r\n\r\nexport function generateRoutes(config: RoutingConfig) {\r\n  const routes: Route[] = [];\r\n  const addRoute = (cfg: RouteConfigWithComponent) => {\r\n    routes.push({\r\n      path: cfg.url,\r\n      component: cfg.component,\r\n      data: {\r\n        title: cfg.title,\r\n        showInMenu: cfg.showInMenu,\r\n        showOnLandingPage: cfg.showOnLandingPage,\r\n        icon: cfg.matIcon,\r\n        svgIcon: cfg.svgIcon,\r\n        order: cfg.order,\r\n        name: cfg.name,\r\n      },\r\n    });\r\n  };\r\n  const addModuleRoute = (cfg: RouteConfigFromModule) => {\r\n    routes.push({\r\n      path: cfg.url,\r\n      loadChildren: cfg.moduleImport,\r\n      data: {\r\n        title: cfg.title,\r\n        showInMenu: cfg.showInMenu,\r\n        showOnLandingPage: cfg.showOnLandingPage,\r\n        icon: cfg.matIcon,\r\n        svgIcon: cfg.svgIcon,\r\n        order: cfg.order,\r\n        name: cfg.name,\r\n      },\r\n    });\r\n  };\r\n  // landing page\r\n  if (config.landing.enabled) {\r\n    addRoute({ ...config.landing, component: LandingComponent });\r\n  }\r\n  if (config.profile.enabled) {\r\n    addModuleRoute(config.profile);\r\n  }\r\n  if (config.quiz.enabled) {\r\n    addModuleRoute(config.quiz);\r\n  }\r\n  if (config.slideshow.enabled) {\r\n    addModuleRoute(config.slideshow);\r\n  }\r\n  if (config.info.enabled) {\r\n    addRoute({ ...config.info, component: InfoComponent });\r\n  }\r\n  // if (config.privacy.enabled) {\r\n  //   addRoute(config.privacy);\r\n  // }\r\n  config.custom?.forEach((custom) => {\r\n    if (custom.enabled) {\r\n      if ((custom as RouteConfigWithComponent).component) {\r\n        addRoute(custom as RouteConfigWithComponent);\r\n      } else {\r\n        addModuleRoute(custom as RouteConfigFromModule);\r\n      }\r\n    }\r\n  });\r\n  routes.push({ path: '**', redirectTo: '' });\r\n  return routes.sort((a, b) => a.data?.order - b.data?.order);\r\n}\r\n","export function isObject(item: any) {\r\n  return item && typeof item === 'object' && !Array.isArray(item);\r\n}\r\n\r\nexport function deepMerge(target: any, source: any) {\r\n  const output = Object.assign({}, target);\r\n  if (isObject(target) && isObject(source)) {\r\n    Object.keys(source).forEach((key) => {\r\n      if (isObject(source[key])) {\r\n        if (!(key in target)) Object.assign(output, { [key]: source[key] });\r\n        else output[key] = deepMerge(target[key], source[key]);\r\n      } else {\r\n        Object.assign(output, { [key]: source[key] });\r\n      }\r\n    });\r\n  }\r\n  return output;\r\n}\r\n","import {\r\n  CUSTOM_ELEMENTS_SCHEMA,\r\n  ErrorHandler,\r\n  ModuleWithProviders,\r\n  NgModule,\r\n} from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { SOLID_CORE_CONFIG, SolidCoreModule } from '@zentrumnawi/solid-core';\r\nimport { BaseLayoutComponent } from './components/base-layout/base-layout.component';\r\nimport { SolidGlossaryModule } from '@zentrumnawi/solid-glossary';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatSidenavModule } from '@angular/material/sidenav';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { RouterModule, ROUTES } from '@angular/router';\r\nimport { MainMenuComponent } from './components/main-menu/main-menu.component';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { FeedbackComponent } from './components/feedback/feedback.component';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport {\r\n  feedbackServiceFactory,\r\n  SOLID_SKELETON_FEEDBACK_SERVICE,\r\n} from './services/feedback.service';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { MatDialog, MatDialogModule } from '@angular/material/dialog';\r\nimport {\r\n  defaultSkeletonConfig,\r\n  InternalSolidSkeletonConfig,\r\n  SOLID_SKELETON_CONFIG,\r\n  SolidSkeletonConfig,\r\n} from './solid-skeleton-config';\r\nimport { UpdateService } from './services/update.service';\r\nimport { UpdateDialogComponent } from './components/update-dialog/update-dialog.component';\r\nimport { MatGridListModule } from '@angular/material/grid-list';\r\nimport { LandingComponent } from './components/landing/landing.component';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { NgxsModule } from '@ngxs/store';\r\nimport { MenuState } from './state/menu.state';\r\nimport { generateRoutes } from './skeleton-routing';\r\nimport { createErrorHandler } from '@sentry/angular';\r\nimport { InfoComponent } from './components/info/info.component';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { MessageListComponent } from './components/message-list/message-list.component';\r\nimport { SOLID_PROFILE_BASE_URL } from '@zentrumnawi/solid-profile';\r\nimport { SOLID_SLIDESHOW_APP_ROUTING_CONFIG } from '@zentrumnawi/solid-slideshow';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { IntroService } from './services/intro.service';\r\nimport { deepMerge } from './utils/deep-merge';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { PrivacyDialogComponent } from './components/privacy-dialog/privacy-dialog.component';\r\nimport { LandingBannerDialogComponent } from './components/landing-banner-dialog/landing-banner-dialog.component';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { GridColsDirective } from './directives/grid-cols.directive';\r\n\r\n// This workaround is required for the \"old\" angular compiler in production mode. Ivy library publishing is not supported until angular 10.\r\n// https://github.com/ng-packagr/ng-packagr/issues/767\r\nexport const ngxsFeatureModule = NgxsModule.forFeature([MenuState]);\r\n\r\nexport function configFactory(\r\n  cfg: SolidSkeletonConfig\r\n): () => () => InternalSolidSkeletonConfig {\r\n  const fn = function () {\r\n    return deepMerge(defaultSkeletonConfig, cfg);\r\n  };\r\n  return fn;\r\n}\r\n\r\nexport function routingFactory(cfg: InternalSolidSkeletonConfig) {\r\n  return generateRoutes(cfg.routingConfig);\r\n}\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    SolidCoreModule,\r\n    SolidGlossaryModule,\r\n    RouterModule,\r\n    MatButtonModule,\r\n    MatCardModule,\r\n    MatDialogModule,\r\n    MatFormFieldModule,\r\n    MatGridListModule,\r\n    MatIconModule,\r\n    MatInputModule,\r\n    MatListModule,\r\n    MatSelectModule,\r\n    MatCheckboxModule,\r\n    MatSidenavModule,\r\n    MatTabsModule,\r\n    MatToolbarModule,\r\n    ngxsFeatureModule,\r\n    MatExpansionModule,\r\n    MatSlideToggleModule,\r\n    MatBadgeModule,\r\n  ],\r\n  declarations: [\r\n    BaseLayoutComponent,\r\n    FeedbackComponent,\r\n    MainMenuComponent,\r\n    UpdateDialogComponent,\r\n    LandingComponent,\r\n    InfoComponent,\r\n    MessageListComponent,\r\n    PrivacyDialogComponent,\r\n    LandingBannerDialogComponent,\r\n    GridColsDirective,\r\n  ],\r\n  exports: [BaseLayoutComponent],\r\n  providers: [UpdateService, IntroService],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\r\n})\r\nexport class SolidSkeletonModule {\r\n  public static forRoot(\r\n    cfg: SolidSkeletonConfig\r\n  ): ModuleWithProviders<SolidSkeletonModule> {\r\n    const errHandler = createErrorHandler(cfg.sentry?.errorHandlerOptions);\r\n    return {\r\n      ngModule: SolidSkeletonModule,\r\n      providers: [\r\n        {\r\n          provide: SOLID_SKELETON_CONFIG,\r\n          useFactory: configFactory(cfg),\r\n        },\r\n        {\r\n          provide: SOLID_SKELETON_FEEDBACK_SERVICE,\r\n          useFactory: feedbackServiceFactory,\r\n          deps: [\r\n            HttpClient,\r\n            MatDialog,\r\n            SOLID_CORE_CONFIG,\r\n            SOLID_SKELETON_CONFIG,\r\n          ],\r\n        },\r\n        {\r\n          provide: ROUTES,\r\n          useFactory: routingFactory,\r\n          deps: [SOLID_SKELETON_CONFIG],\r\n          multi: true,\r\n        },\r\n        {\r\n          provide: ErrorHandler,\r\n          useValue: createErrorHandler(cfg.sentry?.errorHandlerOptions),\r\n        },\r\n        {\r\n          provide: SOLID_PROFILE_BASE_URL,\r\n          useValue: cfg.routingConfig.profile?.url ?? 'profile',\r\n        },\r\n        {\r\n          provide: SOLID_SLIDESHOW_APP_ROUTING_CONFIG,\r\n          useValue: cfg.routingConfig.slideshow,\r\n        },\r\n      ],\r\n    };\r\n  }\r\n}\r\n","import { SentryConfig } from './solid-skeleton-config';\r\nimport { init } from '@sentry/angular';\r\n\r\nexport const initSentry = (cfg?: SentryConfig) => {\r\n  init({\r\n    enabled: cfg !== undefined,\r\n    dsn: cfg?.dsn,\r\n    environment: cfg?.environment,\r\n    release: cfg?.version.semver.version,\r\n    autoSessionTracking: false,\r\n    integrations: [\r\n      // new Integrations.BrowserTracing({\r\n      //   tracingOrigins: [\"localhost\", \"https://yourserver.io/api\"],\r\n      //   routingInstrumentation: Sentry.routingInstrumentation,\r\n      // }),\r\n    ],\r\n  });\r\n};\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["i2","i1","i3","i4","i6","__decorate","i5","map","i3.IntroService","i5.MenuState","i6.MessagesService","i7","i8","i9","i11","i12","i14.GridColsDirective","i1.UpdateService","i10.MainMenuComponent","i2.MessagesService","i10.MessageListComponent"],"mappings":"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"}