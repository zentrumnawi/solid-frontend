// Process $overline$
// same as UNESCAPE_MD_RE plus a space
const UNESCAPE_RE = /\\([ \\!"#$%&'()*+,./:;<=>?@[\]^_`{|}$-])/g;
function subscript(state, silent) {
  let found, token;
  const max = state.posMax,
    start = state.pos;
  if (state.src.charCodeAt(start) !== 0x24 /* $ */) {
    return false;
  }
  if (silent) {
    return false;
  } // don't run any pairs in validation mode
  if (start + 2 >= max) {
    return false;
  }
  state.pos = start + 1;
  while (state.pos < max) {
    if (state.src.charCodeAt(state.pos) === 0x24 /* $ */) {
      found = true;
      break;
    }
    state.md.inline.skipToken(state);
  }
  if (!found || start + 1 === state.pos) {
    state.pos = start;
    return false;
  }
  const content = state.src.slice(start + 1, state.pos);
  // don't allow unescaped spaces/newlines inside
  if (content.match(/(^|[^\\])(\\\\)*\s/)) {
    state.pos = start;
    return false;
  }
  // found!
  state.posMax = state.pos;
  state.pos = start + 1;
  // Earlier we checked !silent, but this implementation does not need it
  token = state.push('over_open', 'span', 1);
  token.attrPush(['class', 'md-overline']);
  token.markup = '$';
  token = state.push('text', '', 0);
  token.content = content.replace(UNESCAPE_RE, '$1');
  token = state.push('over_close', 'span', -1);
  token.markup = '$';
  state.pos = state.posMax + 1;
  state.posMax = max;
  return true;
}
export function overlinePlugin(md) {
  md.inline.ruler.after('emphasis', 'over', subscript);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3ZlcmxpbmUucGx1Z2luLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9zb2xpZC9jb3JlL3NyYy9saWIvbWFya2Rvd24vb3ZlcmxpbmUucGx1Z2luLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHFCQUFxQjtBQUVyQixzQ0FBc0M7QUFDdEMsTUFBTSxXQUFXLEdBQUcsNENBQTRDLENBQUM7QUFFakUsU0FBUyxTQUFTLENBQUMsS0FBVSxFQUFFLE1BQVc7SUFDeEMsSUFBSSxLQUFLLEVBQUUsS0FBSyxDQUFDO0lBQ2pCLE1BQU0sR0FBRyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQ3RCLEtBQUssR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDO0lBRXBCLElBQUksS0FBSyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLEtBQUssSUFBSSxDQUFDLE9BQU8sRUFBRTtRQUNoRCxPQUFPLEtBQUssQ0FBQztLQUNkO0lBQ0QsSUFBSSxNQUFNLEVBQUU7UUFDVixPQUFPLEtBQUssQ0FBQztLQUNkLENBQUMseUNBQXlDO0lBQzNDLElBQUksS0FBSyxHQUFHLENBQUMsSUFBSSxHQUFHLEVBQUU7UUFDcEIsT0FBTyxLQUFLLENBQUM7S0FDZDtJQUVELEtBQUssQ0FBQyxHQUFHLEdBQUcsS0FBSyxHQUFHLENBQUMsQ0FBQztJQUV0QixPQUFPLEtBQUssQ0FBQyxHQUFHLEdBQUcsR0FBRyxFQUFFO1FBQ3RCLElBQUksS0FBSyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDcEQsS0FBSyxHQUFHLElBQUksQ0FBQztZQUNiLE1BQU07U0FDUDtRQUVELEtBQUssQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUNsQztJQUVELElBQUksQ0FBQyxLQUFLLElBQUksS0FBSyxHQUFHLENBQUMsS0FBSyxLQUFLLENBQUMsR0FBRyxFQUFFO1FBQ3JDLEtBQUssQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDO1FBQ2xCLE9BQU8sS0FBSyxDQUFDO0tBQ2Q7SUFFRCxNQUFNLE9BQU8sR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUV0RCwrQ0FBK0M7SUFDL0MsSUFBSSxPQUFPLENBQUMsS0FBSyxDQUFDLG9CQUFvQixDQUFDLEVBQUU7UUFDdkMsS0FBSyxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUM7UUFDbEIsT0FBTyxLQUFLLENBQUM7S0FDZDtJQUVELFNBQVM7SUFDVCxLQUFLLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUM7SUFDekIsS0FBSyxDQUFDLEdBQUcsR0FBRyxLQUFLLEdBQUcsQ0FBQyxDQUFDO0lBRXRCLHVFQUF1RTtJQUN2RSxLQUFLLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzNDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLEVBQUUsYUFBYSxDQUFDLENBQUMsQ0FBQztJQUN6QyxLQUFLLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQztJQUVuQixLQUFLLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ2xDLEtBQUssQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFFbkQsS0FBSyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzdDLEtBQUssQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDO0lBRW5CLEtBQUssQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFDN0IsS0FBSyxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUM7SUFDbkIsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDO0FBRUQsTUFBTSxVQUFVLGNBQWMsQ0FBQyxFQUFPO0lBQ3BDLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUUsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQ3ZELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBQcm9jZXNzICRvdmVybGluZSRcclxuXHJcbi8vIHNhbWUgYXMgVU5FU0NBUEVfTURfUkUgcGx1cyBhIHNwYWNlXHJcbmNvbnN0IFVORVNDQVBFX1JFID0gL1xcXFwoWyBcXFxcIVwiIyQlJicoKSorLC4vOjs8PT4/QFtcXF1eX2B7fH0kLV0pL2c7XHJcblxyXG5mdW5jdGlvbiBzdWJzY3JpcHQoc3RhdGU6IGFueSwgc2lsZW50OiBhbnkpIHtcclxuICBsZXQgZm91bmQsIHRva2VuO1xyXG4gIGNvbnN0IG1heCA9IHN0YXRlLnBvc01heCxcclxuICAgIHN0YXJ0ID0gc3RhdGUucG9zO1xyXG5cclxuICBpZiAoc3RhdGUuc3JjLmNoYXJDb2RlQXQoc3RhcnQpICE9PSAweDI0IC8qICQgKi8pIHtcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcbiAgaWYgKHNpbGVudCkge1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH0gLy8gZG9uJ3QgcnVuIGFueSBwYWlycyBpbiB2YWxpZGF0aW9uIG1vZGVcclxuICBpZiAoc3RhcnQgKyAyID49IG1heCkge1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgc3RhdGUucG9zID0gc3RhcnQgKyAxO1xyXG5cclxuICB3aGlsZSAoc3RhdGUucG9zIDwgbWF4KSB7XHJcbiAgICBpZiAoc3RhdGUuc3JjLmNoYXJDb2RlQXQoc3RhdGUucG9zKSA9PT0gMHgyNCAvKiAkICovKSB7XHJcbiAgICAgIGZvdW5kID0gdHJ1ZTtcclxuICAgICAgYnJlYWs7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGUubWQuaW5saW5lLnNraXBUb2tlbihzdGF0ZSk7XHJcbiAgfVxyXG5cclxuICBpZiAoIWZvdW5kIHx8IHN0YXJ0ICsgMSA9PT0gc3RhdGUucG9zKSB7XHJcbiAgICBzdGF0ZS5wb3MgPSBzdGFydDtcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcblxyXG4gIGNvbnN0IGNvbnRlbnQgPSBzdGF0ZS5zcmMuc2xpY2Uoc3RhcnQgKyAxLCBzdGF0ZS5wb3MpO1xyXG5cclxuICAvLyBkb24ndCBhbGxvdyB1bmVzY2FwZWQgc3BhY2VzL25ld2xpbmVzIGluc2lkZVxyXG4gIGlmIChjb250ZW50Lm1hdGNoKC8oXnxbXlxcXFxdKShcXFxcXFxcXCkqXFxzLykpIHtcclxuICAgIHN0YXRlLnBvcyA9IHN0YXJ0O1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgLy8gZm91bmQhXHJcbiAgc3RhdGUucG9zTWF4ID0gc3RhdGUucG9zO1xyXG4gIHN0YXRlLnBvcyA9IHN0YXJ0ICsgMTtcclxuXHJcbiAgLy8gRWFybGllciB3ZSBjaGVja2VkICFzaWxlbnQsIGJ1dCB0aGlzIGltcGxlbWVudGF0aW9uIGRvZXMgbm90IG5lZWQgaXRcclxuICB0b2tlbiA9IHN0YXRlLnB1c2goJ292ZXJfb3BlbicsICdzcGFuJywgMSk7XHJcbiAgdG9rZW4uYXR0clB1c2goWydjbGFzcycsICdtZC1vdmVybGluZSddKTtcclxuICB0b2tlbi5tYXJrdXAgPSAnJCc7XHJcblxyXG4gIHRva2VuID0gc3RhdGUucHVzaCgndGV4dCcsICcnLCAwKTtcclxuICB0b2tlbi5jb250ZW50ID0gY29udGVudC5yZXBsYWNlKFVORVNDQVBFX1JFLCAnJDEnKTtcclxuXHJcbiAgdG9rZW4gPSBzdGF0ZS5wdXNoKCdvdmVyX2Nsb3NlJywgJ3NwYW4nLCAtMSk7XHJcbiAgdG9rZW4ubWFya3VwID0gJyQnO1xyXG5cclxuICBzdGF0ZS5wb3MgPSBzdGF0ZS5wb3NNYXggKyAxO1xyXG4gIHN0YXRlLnBvc01heCA9IG1heDtcclxuICByZXR1cm4gdHJ1ZTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG92ZXJsaW5lUGx1Z2luKG1kOiBhbnkpIHtcclxuICBtZC5pbmxpbmUucnVsZXIuYWZ0ZXIoJ2VtcGhhc2lzJywgJ292ZXInLCBzdWJzY3JpcHQpO1xyXG59XHJcbiJdfQ==
