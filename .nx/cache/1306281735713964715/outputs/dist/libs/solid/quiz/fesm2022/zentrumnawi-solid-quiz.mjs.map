{"version":3,"file":"zentrumnawi-solid-quiz.mjs","sources":["../../../../../libs/solid/quiz/src/lib/state/quiz.actions.ts","../../../../../libs/solid/quiz/src/lib/state/quiz.state.ts","../../../../../libs/solid/quiz/src/lib/components/start/start.component.ts","../../../../../libs/solid/quiz/src/lib/components/start/start.component.html","../../../../../libs/solid/quiz/src/lib/state/quiz.model.ts","../../../../../libs/solid/quiz/src/lib/components/single-choice-question/single-choice-question.component.ts","../../../../../libs/solid/quiz/src/lib/components/single-choice-question/single-choice-question.component.html","../../../../../libs/solid/quiz/src/lib/components/multiple-choice-question/multiple-choice-question.component.ts","../../../../../libs/solid/quiz/src/lib/components/multiple-choice-question/multiple-choice-question.component.html","../../../../../libs/solid/quiz/src/lib/components/true-false-question/true-false-question.component.ts","../../../../../libs/solid/quiz/src/lib/components/true-false-question/true-false-question.component.html","../../../../../libs/solid/quiz/src/lib/components/ranking-question/ranking-question.component.ts","../../../../../libs/solid/quiz/src/lib/components/ranking-question/ranking-question.component.html","../../../../../libs/solid/quiz/src/lib/components/range-question/range-question.component.ts","../../../../../libs/solid/quiz/src/lib/components/range-question/range-question.component.html","../../../../../libs/solid/quiz/src/lib/components/question/question.component.ts","../../../../../libs/solid/quiz/src/lib/components/question/question.component.html","../../../../../libs/solid/quiz/src/lib/components/end/end-feedback.ts","../../../../../libs/solid/quiz/src/lib/components/end/end.component.ts","../../../../../libs/solid/quiz/src/lib/components/end/end.component.html","../../../../../libs/solid/quiz/src/lib/components/main/main.component.ts","../../../../../libs/solid/quiz/src/lib/components/main/main.component.html","../../../../../libs/solid/quiz/src/lib/solid-quiz.module.ts","../../../../../libs/solid/quiz/src/zentrumnawi-solid-quiz.ts"],"sourcesContent":["export class LoadQuizQuestions {\r\n  static readonly type = '[Quiz] questions load';\r\n\r\n  constructor(\r\n    public questionCount: number,\r\n    public tags: string[],\r\n    public difficulty: number[]\r\n  ) {}\r\n}\r\n\r\nexport class StartQuizSession {\r\n  static readonly type = '[Quiz] session start';\r\n\r\n  constructor(public questionCount: number) {}\r\n}\r\n\r\nexport class EndQuizSession {\r\n  static readonly type = '[Quiz] session end';\r\n}\r\n\r\nexport class QuizQuestionAnswered {\r\n  static readonly type = '[Quiz] question answered';\r\n\r\n  constructor(public correct: number) {}\r\n}\r\n\r\nexport class LoadQuizMetadata {\r\n  static readonly type = '[Quiz] metadata load';\r\n}\r\n\r\nexport class ToggleExpertMode {\r\n  static readonly type = '[Quiz] expert mode set';\r\n}\r\n","import { Action, Selector, State, StateContext } from '@ngxs/store';\r\nimport {\r\n  QuizAnswer,\r\n  QuizMetadata,\r\n  QuizQuestion,\r\n  QuizQuestionApi,\r\n  QuizQuestionInSession,\r\n  QuizSession,\r\n} from './quiz.model';\r\nimport {\r\n  LoadQuizQuestions,\r\n  StartQuizSession,\r\n  EndQuizSession,\r\n  QuizQuestionAnswered,\r\n  LoadQuizMetadata,\r\n  ToggleExpertMode,\r\n} from './quiz.actions';\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport {\r\n  SOLID_CORE_CONFIG,\r\n  SolidCoreConfig,\r\n  MediaModel,\r\n} from '@zentrumnawi/solid-core';\r\nimport { map, tap } from 'rxjs/operators';\r\n\r\nexport interface QuizStateModel {\r\n  metadata: QuizMetadata | null;\r\n  questions: QuizQuestion[];\r\n  session: QuizSession | null;\r\n  expertMode: boolean | false;\r\n}\r\n\r\n@State<QuizStateModel>({\r\n  name: 'quiz',\r\n  defaults: {\r\n    metadata: null,\r\n    questions: [],\r\n    session: null,\r\n    expertMode: false,\r\n  },\r\n})\r\n@Injectable()\r\nexport class QuizState {\r\n  @Selector()\r\n  static getSession(state: QuizStateModel): QuizSession | null {\r\n    return state.session;\r\n  }\r\n\r\n  @Selector()\r\n  static getMeta(state: QuizStateModel): QuizMetadata | null {\r\n    return state.metadata;\r\n  }\r\n\r\n  @Selector()\r\n  static getExpertMode(state: QuizStateModel): boolean | false {\r\n    return state.expertMode;\r\n  }\r\n\r\n  constructor(\r\n    @Inject(SOLID_CORE_CONFIG) private _config: SolidCoreConfig,\r\n    private _http: HttpClient\r\n  ) {}\r\n\r\n  @Action(LoadQuizMetadata)\r\n  public setMeta(ctx: StateContext<QuizStateModel>) {\r\n    return this._http.get<QuizMetadata>(`${this._config.apiUrl}/quizmeta`).pipe(\r\n      tap((res) => {\r\n        ctx.patchState({\r\n          metadata: res,\r\n        });\r\n      })\r\n    );\r\n  }\r\n\r\n  @Action(ToggleExpertMode)\r\n  public setExpertMode(ctx: StateContext<QuizStateModel>) {\r\n    const state = ctx.getState();\r\n    ctx.setState({ ...state, expertMode: !state.expertMode });\r\n    return;\r\n  }\r\n\r\n  @Action(LoadQuizQuestions)\r\n  public set(\r\n    ctx: StateContext<QuizStateModel>,\r\n    { questionCount, tags, difficulty }: LoadQuizQuestions\r\n  ) {\r\n    let params;\r\n\r\n    if (tags == null) tags = [];\r\n\r\n    if (tags.length == 0 && difficulty.length == 0) {\r\n      params = new HttpParams().set('count', questionCount);\r\n    } else if (tags.length == 0) {\r\n      params = new HttpParams()\r\n        .set('count', questionCount)\r\n        .set('difficulty', difficulty.toString());\r\n    } else if (difficulty.length == 0) {\r\n      params = new HttpParams()\r\n        .set('count', questionCount)\r\n        .set('tags', JSON.stringify(tags));\r\n    } else {\r\n      params = new HttpParams()\r\n        .set('count', questionCount)\r\n        .set('tags', JSON.stringify(tags))\r\n        .set('difficulty', difficulty.toString());\r\n    }\r\n\r\n    return this._http\r\n      .get<QuizQuestion[]>(`${this._config.apiUrl}/quizsession`, {\r\n        params: params,\r\n      })\r\n      .pipe(\r\n        map((response) => {\r\n          const mapit = (input: QuizQuestionApi[]): QuizQuestion[] => {\r\n            return input.map((question) => {\r\n              return {\r\n                ...question,\r\n                images: question.img.map((p) => new MediaModel(p)),\r\n              };\r\n            });\r\n          };\r\n          return mapit(response);\r\n        }),\r\n        tap((res) => {\r\n          ctx.patchState({\r\n            questions: res,\r\n          });\r\n        })\r\n      );\r\n  }\r\n\r\n  @Action(StartQuizSession)\r\n  public startNewSession(\r\n    { patchState, getState }: StateContext<QuizStateModel>,\r\n    { questionCount }: StartQuizSession\r\n  ) {\r\n    const sessionQuestions: QuizQuestionInSession[] = [];\r\n    const questions = getState().questions;\r\n\r\n    questionCount =\r\n      questionCount > questions.length ? questions.length : questionCount;\r\n    for (let i = 0; i < questionCount; ) {\r\n      const rnd = Math.floor(Math.random() * questions.length);\r\n      if (sessionQuestions.find((q) => q.id === questions[rnd].id)) {\r\n        continue;\r\n      }\r\n      const rndQuestions = { ...questions[rnd] };\r\n      rndQuestions.answers = [];\r\n      for (let j = 0; j < questions[rnd].answers.length; ) {\r\n        const random = Math.floor(\r\n          Math.random() * questions[rnd].answers.length\r\n        );\r\n        if (\r\n          rndQuestions.answers.find(\r\n            (a) => a.id === questions[rnd].answers[random].id\r\n          )\r\n        )\r\n          continue;\r\n        rndQuestions.answers.push(questions[rnd].answers[random]);\r\n        j++;\r\n      }\r\n      sessionQuestions.push({ answered: 0, ...rndQuestions });\r\n      i++;\r\n    }\r\n    patchState({\r\n      session: {\r\n        progress: 0,\r\n        currentQuestion: 0,\r\n        questions: sessionQuestions,\r\n      },\r\n    });\r\n  }\r\n\r\n  @Action(EndQuizSession)\r\n  public endSession({ patchState }: StateContext<QuizStateModel>) {\r\n    patchState({\r\n      session: null,\r\n    });\r\n  }\r\n\r\n  @Action(QuizQuestionAnswered)\r\n  public questionAnswered(\r\n    { patchState, getState }: StateContext<QuizStateModel>,\r\n    { correct }: QuizQuestionAnswered\r\n  ) {\r\n    const session = { ...(getState().session as QuizSession) };\r\n    const answeredQuestion = {\r\n      ...session.questions[session.currentQuestion],\r\n      answered: correct as 0 | -1 | 1,\r\n    };\r\n    patchState({\r\n      session: {\r\n        currentQuestion: session.currentQuestion + 1,\r\n        progress:\r\n          (100.0 / session.questions.length) * (session.currentQuestion + 1),\r\n        questions: session.questions.map((q) =>\r\n          q.id === answeredQuestion.id ? answeredQuestion : q\r\n        ),\r\n      },\r\n    });\r\n  }\r\n}\r\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { Select, Store } from '@ngxs/store';\nimport {\n  LoadQuizQuestions,\n  StartQuizSession,\n  ToggleExpertMode,\n} from '../../state/quiz.actions';\nimport { Observable, Subject } from 'rxjs';\nimport { QuizState } from '../../state/quiz.state';\nimport { QuizMetadata } from '../../state/quiz.model';\nimport { Navigate } from '@ngxs/router-plugin';\nimport { Dispatch } from '@ngxs-labs/dispatch-decorator';\nimport { MatButtonToggleChange } from '@angular/material/button-toggle';\nimport { MatChipListboxChange } from '@angular/material/chips';\nimport { MatSliderChange } from '@angular/material/slider';\n\n@Component({\n  selector: 'solid-quiz-start',\n  templateUrl: './start.component.html',\n  styleUrls: ['./start.component.scss'],\n})\nexport class StartComponent implements OnDestroy, OnInit {\n  @Select(QuizState.getMeta) metaData$!: Observable<QuizMetadata> | null;\n  @Select(QuizState.getExpertMode) expertMode!: boolean | false;\n  private $destroyed = new Subject();\n  expertModeStatus: boolean;\n  questionCount = 10;\n  chosenTags = [];\n  chosenDifficulty: number[] = [];\n  isValid = true;\n  tags: string[] = [];\n  difficulties: number[] = [];\n\n  constructor(private _store: Store) {\n    this.expertModeStatus = false;\n  }\n\n  public onStartClick() {\n    const quizLoaded = this._store.dispatch(\n      new LoadQuizQuestions(\n        this.questionCount,\n        this.chosenTags,\n        this.chosenDifficulty\n      )\n    );\n    quizLoaded.subscribe((res) => {\n      if (res.quiz.questions.length > 0) {\n        this._store.dispatch(new StartQuizSession(this.questionCount));\n        this.isValid = true;\n      } else {\n        this.isValid = false;\n      }\n    });\n  }\n\n  ngOnInit(): void {\n    this._store.select(QuizState.getExpertMode).subscribe((data) => {\n      this.expertModeStatus = data;\n    });\n    this.metaData$?.subscribe((data) => {\n      if (data) {\n        const tags = [...data.tags];\n        const difficulties = [...data.difficulties];\n        this.tags = tags.sort();\n        this.difficulties = difficulties.sort();\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.$destroyed.next(true);\n  }\n\n  @Dispatch()\n  public async navigateTo(url: string) {\n    return new Navigate([url]);\n  }\n\n  expertModeToggle() {\n    this._store.dispatch(new ToggleExpertMode());\n  }\n\n  onBackBtnClick() {\n    this.navigateTo('/');\n  }\n\n  onSliderChange(change: Event) {\n    // if (change.value) this.questionCount = change.value;\n    // this.isValid = true;\n  }\n\n  onButtonToggleChange(change: MatButtonToggleChange) {\n    this.chosenDifficulty = change.value;\n    this.isValid = true;\n  }\n\n  onTagSelectionChange(change: MatChipListboxChange) {\n    this.chosenTags = change.value;\n    this.isValid = true;\n  }\n\n  onDeselectAllTagClick() {\n    this.chosenTags = [];\n  }\n\n  onDeselectAllDifficultyClick() {\n    this.chosenDifficulty = [];\n  }\n}\n","<div class=\"toolbar-container\">\n  <div class=\"toolbar\">\n    <button mat-icon-button class=\"button-back\" (click)=\"onBackBtnClick()\">\n      <mat-icon>arrow_back</mat-icon>\n    </button>\n    <div class=\"title\">\n      <h2>Selbsttest</h2>\n    </div>\n  </div>\n</div>\n<mat-card>\n  <mat-card-content class=\"content-container\">\n    <p>\n      Mit diesen Fragen kann der persönliche Wissensstand in verschiedenen\n      Teilbereichen überprüft werden. Die Fragen werden zufällig aus unserem\n      Fragenpool ausgewählt.\n    </p>\n    <p>\n      Das Feedback gibt genauere Hinweise darüber, warum die gegebenen Antworten\n      falsch (oder richtig) waren und zeigt weitere Hintergrundinformationen\n      auf.\n    </p>\n    <p>\n      Das Quiz kann direkt mit einer Auswahl von 10 Fragen gestartet werden.\n    </p>\n    <p>\n      Im <em>Expertenmodus</em> können Fragenanzahl, Schwierigkeitsgrad und\n      Themengebiet genauer eingestellt werden.\n    </p>\n  </mat-card-content>\n  <mat-card-actions *ngIf=\"metaData$ | async as meta; else quizLoading\">\n    <div class=\"button-container\">\n      <button\n        class=\"startBtn\"\n        (click)=\"onStartClick()\"\n        mat-raised-button\n        color=\"primary\"\n        [disabled]=\"!isValid\"\n      >\n        Quiz starten\n      </button>\n      <div class=\"formInvalid\" *ngIf=\"!isValid\">\n        <p>\n          Ooops - es gibt keine Fragen mit diesen Eigenschaften. Versuche eine\n          andere Kombination.\n        </p>\n      </div>\n      <mat-slide-toggle\n        class=\"expBtn\"\n        [checked]=\"expertModeStatus\"\n        (change)=\"expertModeToggle()\"\n      >\n        Expertenmodus aktivieren\n      </mat-slide-toggle>\n    </div>\n    <div class=\"config\" *ngIf=\"expertModeStatus\">\n      <div class=\"row\">\n        <div class=\"controlHeader\" id=\"questionCount\">\n          <div class=\"mat-subheader\">Fragenanzahl</div>\n        </div>\n        <div class=\"controlElement\" id=\"questionCount\">\n          <mat-slider\n            min=\"1\"\n            max=\"30\"\n            step=\"1\"\n            (input)=\"onSliderChange($event)\"\n            [(ngModel)]=\"questionCount\"\n          >\n          </mat-slider>\n          <div class=\"displayValueBox\">\n            {{ questionCount }}\n          </div>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"controlHeader\" id=\"difficulty\">\n          <div class=\"mat-subheader\">Schwierigkeitsgrad</div>\n          <button\n            mat-icon-button\n            class=\"deselectAllBtn\"\n            (click)=\"onDeselectAllDifficultyClick()\"\n            [disabled]=\"chosenDifficulty.length === 0\"\n          >\n            <mat-icon>restart_alt</mat-icon>\n          </button>\n        </div>\n        <div class=\"controlElement\" id=\"difficulty\">\n          <mat-button-toggle-group\n            class=\"difficulties\"\n            multiple\n            (change)=\"onButtonToggleChange($event)\"\n            [(ngModel)]=\"chosenDifficulty\"\n          >\n            <mat-button-toggle\n              *ngFor=\"let difficulty of difficulties; let i = index\"\n              [value]=\"difficulty\"\n              >{{ difficulty }}</mat-button-toggle\n            >\n          </mat-button-toggle-group>\n        </div>\n      </div>\n      <div class=\"row\" *ngIf=\"tags.length !== 0\">\n        <div class=\"controlHeader\" id=\"tag\">\n          <div class=\"mat-subheader\">Tags</div>\n          <button\n            mat-icon-button\n            class=\"deselectAllBtn\"\n            (click)=\"onDeselectAllTagClick()\"\n            [disabled]=\"chosenTags.length === 0\"\n          >\n            <mat-icon>restart_alt</mat-icon>\n          </button>\n        </div>\n        <div class=\"controlElement\" id=\"tag\">\n          <mat-chip-listbox\n            selectable=\"true\"\n            multiple=\"true\"\n            (change)=\"onTagSelectionChange($event)\"\n            [(ngModel)]=\"chosenTags\"\n          >\n            <mat-chip\n              #c=\"matChip\"\n              *ngFor=\"let tag of tags\"\n              [value]=\"tag\"\n              [ngClass]=\"tags.length > 6 ? 'mat-chip-small' : 'mat-chip-large'\"\n            >\n              {{ tag }}\n            </mat-chip>\n          </mat-chip-listbox>\n        </div>\n      </div>\n    </div>\n  </mat-card-actions>\n</mat-card>\n<ng-template #quizLoading>\n  <mat-card-content>\n    <mat-spinner color=\"primary\"></mat-spinner>\n  </mat-card-content>\n</ng-template>\n","import { MediaModel, MediaObjectModel } from '@zentrumnawi/solid-core';\r\n\r\nexport interface QuizQuestion extends QuizQuestionApi {\r\n  images: MediaModel[];\r\n}\r\n\r\nexport interface QuizQuestionApi {\r\n  id: number;\r\n  type: QuizQuestionType;\r\n  difficulty: 1 | 2 | 3 | 4 | 5;\r\n  answers: QuizAnswer[];\r\n  img: MediaObjectModel[];\r\n  tags: string[];\r\n  text: string;\r\n}\r\n\r\nexport interface QuizAnswer {\r\n  id: number;\r\n  text: string;\r\n  correct: boolean;\r\n  feedback_correct: string;\r\n  feedback_incorrect: string;\r\n  ranking_position: number;\r\n  subsequences: boolean;\r\n  feedback_subsequences: string;\r\n  range_value: number;\r\n  range_max: number;\r\n  range_min: number;\r\n  range_step: number;\r\n  tolerance: number;\r\n}\r\n\r\nexport enum QuizQuestionType {\r\n  SingleChoice = 'SC',\r\n  MultipleChoice = 'MC',\r\n  TrueFalse = 'TF',\r\n  Ranking = 'RG',\r\n  Range = 'RN',\r\n}\r\n\r\nexport type QuizQuestionInSession = QuizQuestion & { answered: 0 | -1 | 1 };\r\n\r\nexport interface QuizSession {\r\n  progress: number;\r\n  currentQuestion: number;\r\n  questions: QuizQuestionInSession[];\r\n}\r\n\r\nexport interface QuizMetadata {\r\n  question_count: number;\r\n  tags: string[];\r\n  difficulties: number[];\r\n}\r\n","import {\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnChanges,\r\n  Output,\r\n  SimpleChanges,\r\n} from '@angular/core';\r\nimport { MatRadioChange } from '@angular/material/radio';\r\nimport { QuizAnswer, QuizQuestion } from '../../state/quiz.model';\r\n\r\n@Component({\r\n  selector: 'solid-quiz-single-choice-question',\r\n  templateUrl: './single-choice-question.component.html',\r\n  styleUrls: ['./single-choice-question.component.scss'],\r\n})\r\nexport class SingleChoiceQuestionComponent implements OnChanges {\r\n  @Input() public question!: QuizQuestion;\r\n  @Output() public nextQuestionClicked = new EventEmitter<number>();\r\n\r\n  public selectedAnswer?: number;\r\n  public showAnswers = false;\r\n  public correct = 0;\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.question.previousValue !== changes.question.currentValue) {\r\n      this.selectedAnswer = undefined;\r\n      this.showAnswers = false;\r\n      this.correct = 0;\r\n    }\r\n  }\r\n\r\n  public onRadioChange(e: MatRadioChange) {\r\n    this.selectedAnswer = e.value;\r\n  }\r\n\r\n  public trackByFn(index: number, item: QuizAnswer) {\r\n    return item.id;\r\n  }\r\n\r\n  public isAnswerCorrect(answer: QuizAnswer) {\r\n    if (!this.showAnswers) {\r\n      return false;\r\n    }\r\n    return answer.correct;\r\n  }\r\n\r\n  public isAnswerIncorrect(answer: QuizAnswer) {\r\n    if (!this.showAnswers) {\r\n      return false;\r\n    }\r\n    return !answer.correct;\r\n  }\r\n\r\n  public onShowAnswersClick() {\r\n    this.showAnswers = true;\r\n    if (this.selectedAnswer == undefined) this.correct = 0;\r\n    else this.correct = -1;\r\n    this.question.answers.forEach((value) => {\r\n      if (value.id == this.selectedAnswer && value.correct) this.correct = 1;\r\n    });\r\n  }\r\n\r\n  public onNextQuestionClick() {\r\n    if (this.selectedAnswer == undefined) this.correct = 0;\r\n    this.nextQuestionClicked.emit(this.correct);\r\n  }\r\n}\r\n","<mat-radio-group\r\n  (change)=\"onRadioChange($event)\"\r\n  [disabled]=\"showAnswers\"\r\n  aria-label=\"Wähle ein Antwort aus\"\r\n  color=\"primary\"\r\n  class=\"container\"\r\n>\r\n  <mat-radio-button\r\n    *ngFor=\"let answer of question.answers; trackBy: trackByFn\"\r\n    [class.correct]=\"isAnswerCorrect(answer)\"\r\n    [class.incorrect]=\"isAnswerIncorrect(answer)\"\r\n    [value]=\"answer.id\"\r\n  >\r\n    <span class=\"answer\" markdown [data]=\"answer.text\"></span>\r\n    <mat-icon class=\"correctIcon\" *ngIf=\"showAnswers && answer.correct\"\r\n      >check_circle</mat-icon\r\n    >\r\n    <mat-icon class=\"incorrectIcon\" *ngIf=\"showAnswers && !answer.correct\"\r\n      >highlight_off</mat-icon\r\n    >\r\n    <span\r\n      *ngIf=\"showAnswers && selectedAnswer === answer.id\"\r\n      [data]=\"\r\n        answer.correct ? answer.feedback_correct : answer.feedback_incorrect\r\n      \"\r\n      markdown\r\n      class=\"feedback\"\r\n    ></span>\r\n  </mat-radio-button>\r\n</mat-radio-group>\r\n<button\r\n  (click)=\"onShowAnswersClick()\"\r\n  *ngIf=\"!showAnswers\"\r\n  color=\"primary\"\r\n  mat-raised-button\r\n  class=\"showAnswerBtn\"\r\n>\r\n  Lösungen anzeigen\r\n</button>\r\n<button\r\n  (click)=\"onNextQuestionClick()\"\r\n  *ngIf=\"showAnswers\"\r\n  color=\"primary\"\r\n  mat-raised-button\r\n  class=\"nextQuestionBtn\"\r\n>\r\n  {{ correct === 1 ? 'Richtig,' : ' Falsch,' }} nächste Frage\r\n</button>\r\n","import {\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnChanges,\r\n  Output,\r\n  SimpleChanges,\r\n} from '@angular/core';\r\nimport { MatCheckboxChange } from '@angular/material/checkbox';\r\nimport { QuizAnswer, QuizQuestion } from '../../state/quiz.model';\r\n\r\n@Component({\r\n  selector: 'solid-quiz-multiple-choice-question',\r\n  templateUrl: './multiple-choice-question.component.html',\r\n  styleUrls: ['./multiple-choice-question.component.scss'],\r\n})\r\nexport class MultipleChoiceQuestionComponent implements OnChanges {\r\n  @Input() public question!: QuizQuestion;\r\n  @Output() public nextQuestionClicked = new EventEmitter<number>();\r\n\r\n  public selectedAnswers: number[] = [];\r\n  public showAnswers = false;\r\n  public correct = 0;\r\n\r\n  public ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.question.previousValue !== changes.question.currentValue) {\r\n      this.showAnswers = false;\r\n      this.selectedAnswers = [];\r\n      this.correct = 0;\r\n    }\r\n  }\r\n\r\n  public onSelectChange(e: MatCheckboxChange, answer: QuizAnswer) {\r\n    if (e.checked) {\r\n      this.selectedAnswers.push(answer.id);\r\n    } else {\r\n      this.selectedAnswers = this.selectedAnswers.filter(\r\n        (id) => id !== answer.id\r\n      );\r\n    }\r\n  }\r\n\r\n  public isAnswerCorrect(answer: QuizAnswer) {\r\n    if (!this.showAnswers) {\r\n      return false;\r\n    }\r\n    return answer.correct;\r\n  }\r\n\r\n  public isAnswerIncorrect(answer: QuizAnswer) {\r\n    if (!this.showAnswers) {\r\n      return false;\r\n    }\r\n    return !answer.correct;\r\n  }\r\n\r\n  public trackByFn(index: number, item: QuizAnswer) {\r\n    return item.id;\r\n  }\r\n\r\n  public onShowAnswersClick() {\r\n    this.showAnswers = true;\r\n    this.correct = 1;\r\n\r\n    let correctAnswers = 0;\r\n    this.question.answers.forEach((answer) => {\r\n      if (answer.correct) {\r\n        correctAnswers++;\r\n        if (!this.selectedAnswers.includes(answer.id)) {\r\n          this.correct = -1;\r\n        }\r\n      }\r\n    });\r\n\r\n    if (this.selectedAnswers.length !== correctAnswers) {\r\n      this.correct = -1;\r\n    }\r\n  }\r\n\r\n  public onNextQuestionClick() {\r\n    if (this.selectedAnswers.length == 0) this.correct = 0;\r\n    this.nextQuestionClicked.emit(this.correct);\r\n  }\r\n}\r\n","<mat-checkbox\r\n  (change)=\"onSelectChange($event, answer)\"\r\n  *ngFor=\"let answer of question.answers; trackBy: trackByFn\"\r\n  [checked]=\"isAnswerCorrect(answer)\"\r\n  [class.correctSelected]=\"\r\n    isAnswerCorrect(answer) && selectedAnswers.includes(answer.id)\r\n  \"\r\n  [class.incorrectSelected]=\"\r\n    isAnswerIncorrect(answer) && selectedAnswers.includes(answer.id)\r\n  \"\r\n  [class.correctUnselected]=\"\r\n    isAnswerCorrect(answer) && !selectedAnswers.includes(answer.id)\r\n  \"\r\n  [class.incorrectUnselected]=\"\r\n    isAnswerIncorrect(answer) && !selectedAnswers.includes(answer.id)\r\n  \"\r\n  [disabled]=\"showAnswers\"\r\n  [indeterminate]=\"isAnswerIncorrect(answer)\"\r\n  color=\"primary\"\r\n>\r\n  <span class=\"answer\" markdown [data]=\"answer.text\"></span>\r\n  <span\r\n    class=\"feedback\"\r\n    *ngIf=\"showAnswers && selectedAnswers.includes(answer.id)\"\r\n    [data]=\"\r\n      answer.correct ? answer.feedback_correct : answer.feedback_incorrect\r\n    \"\r\n    markdown\r\n  ></span>\r\n</mat-checkbox>\r\n<button\r\n  (click)=\"onShowAnswersClick()\"\r\n  *ngIf=\"!showAnswers\"\r\n  color=\"primary\"\r\n  mat-raised-button\r\n  class=\"showAnswerBtn\"\r\n>\r\n  Lösungen anzeigen\r\n</button>\r\n<button\r\n  (click)=\"onNextQuestionClick()\"\r\n  *ngIf=\"showAnswers\"\r\n  color=\"primary\"\r\n  mat-raised-button\r\n  class=\"nextQuestionBtn\"\r\n>\r\n  {{ correct === 1 ? 'Richtig,' : ' Falsch,' }} nächste Frage\r\n</button>\r\n","import {\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnChanges,\r\n  Output,\r\n  SimpleChanges,\r\n} from '@angular/core';\r\nimport { QuizQuestion } from '../../state/quiz.model';\r\n\r\n@Component({\r\n  selector: 'solid-quiz-true-false-question',\r\n  templateUrl: './true-false-question.component.html',\r\n  styleUrls: ['./true-false-question.component.scss'],\r\n})\r\nexport class TrueFalseQuestionComponent implements OnChanges {\r\n  @Input() public question!: QuizQuestion;\r\n  @Output() public nextQuestionClicked = new EventEmitter<number>();\r\n\r\n  public selectedAnswer!: boolean;\r\n  public showAnswers = false;\r\n  public correct = -1;\r\n\r\n  public ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.question.previousValue !== changes.question.currentValue) {\r\n      this.showAnswers = false;\r\n      this.correct = -1;\r\n    }\r\n  }\r\n\r\n  public onTrueClick() {\r\n    this.selectedAnswer = true;\r\n  }\r\n\r\n  public onFalseClick() {\r\n    this.selectedAnswer = false;\r\n  }\r\n\r\n  public onShowAnswersClick() {\r\n    this.showAnswers = true;\r\n    if (this.selectedAnswer == this.question.answers[0].correct) {\r\n      this.correct = 1;\r\n    } else {\r\n      this.correct = -1;\r\n    }\r\n  }\r\n\r\n  public onNextQuestionClick() {\r\n    this.nextQuestionClicked.emit(this.correct);\r\n  }\r\n}\r\n","<div class=\"button-container\">\r\n  <button\r\n    class=\"trueBtn\"\r\n    [disabled]=\"showAnswers\"\r\n    mat-stroked-button\r\n    [class.correctUnselected]=\"showAnswers && question.answers[0].correct\"\r\n    [class.incorrectUnselected]=\"showAnswers && !question.answers[0].correct\"\r\n    [class.correctSelected]=\"\r\n      showAnswers && question.answers[0].correct && selectedAnswer\r\n    \"\r\n    [class.incorrectSelected]=\"\r\n      showAnswers && !question.answers[0].correct && selectedAnswer\r\n    \"\r\n    (click)=\"onTrueClick()\"\r\n  >\r\n    Wahr\r\n  </button>\r\n  <button\r\n    class=\"falseBtn\"\r\n    [disabled]=\"showAnswers\"\r\n    mat-stroked-button\r\n    [class.correctUnselected]=\"showAnswers && !question.answers[0].correct\"\r\n    [class.incorrectUnselected]=\"showAnswers && question.answers[0].correct\"\r\n    [class.correctSelected]=\"\r\n      showAnswers && !question.answers[0].correct && !selectedAnswer\r\n    \"\r\n    [class.incorrectSelected]=\"\r\n      showAnswers && question.answers[0].correct && !selectedAnswer\r\n    \"\r\n    (click)=\"onFalseClick()\"\r\n  >\r\n    Falsch\r\n  </button>\r\n</div>\r\n\r\n<div class=\"feedback\" *ngIf=\"showAnswers\">\r\n  <mat-icon\r\n    class=\"correctIcon\"\r\n    *ngIf=\"question.answers[0].correct === selectedAnswer && showAnswers\"\r\n  >\r\n    check\r\n  </mat-icon>\r\n  <mat-icon\r\n    class=\"incorrectIcon\"\r\n    *ngIf=\"question.answers[0].correct !== selectedAnswer && showAnswers\"\r\n  >\r\n    highlight_off\r\n  </mat-icon>\r\n  <span\r\n    class=\"feedback-text\"\r\n    markdown\r\n    [data]=\"\r\n      selectedAnswer === question.answers[0].correct\r\n        ? question.answers[0].feedback_correct\r\n        : question.answers[0].feedback_incorrect\r\n    \"\r\n  ></span>\r\n</div>\r\n\r\n<div>\r\n  <button\r\n    [disabled]=\"selectedAnswer === undefined\"\r\n    (click)=\"onShowAnswersClick()\"\r\n    *ngIf=\"!showAnswers\"\r\n    color=\"primary\"\r\n    mat-raised-button\r\n    class=\"showAnswerBtn\"\r\n  >\r\n    Lösungen anzeigen\r\n  </button>\r\n  <button\r\n    (click)=\"onNextQuestionClick()\"\r\n    *ngIf=\"showAnswers\"\r\n    color=\"primary\"\r\n    mat-raised-button\r\n    class=\"nextQuestionBtn\"\r\n  >\r\n    {{ correct === 1 ? 'Richtig,' : ' Falsch,' }} nächste Frage\r\n  </button>\r\n</div>\r\n","import { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\r\nimport {\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnChanges,\r\n  OnInit,\r\n  Output,\r\n  SimpleChanges,\r\n} from '@angular/core';\r\nimport { QuizQuestion } from '../../state/quiz.model';\r\n\r\n@Component({\r\n  selector: 'solid-quiz-ranking-question',\r\n  templateUrl: './ranking-question.component.html',\r\n  styleUrls: ['./ranking-question.component.scss'],\r\n})\r\nexport class RankingQuestionComponent implements OnInit, OnChanges {\r\n  @Input() public question!: QuizQuestion;\r\n  @Output() public nextQuestionClicked = new EventEmitter<number>();\r\n\r\n  public showAnswers!: boolean;\r\n  public correct = 0;\r\n  public index!: number;\r\n\r\n  public answersList: any[] = [];\r\n\r\n  public hasSubsequence = false;\r\n  public subsequence: number[] = [];\r\n\r\n  ngOnInit(): void {\r\n    for (let i = 0; i < this.question.answers.length; ++i) {\r\n      this.answersList.push({\r\n        text: this.question.answers[i].text,\r\n        correct_position: this.question.answers[i].ranking_position,\r\n      });\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.question.previousValue !== changes.question.currentValue) {\r\n      this.showAnswers = false;\r\n      this.correct = 0;\r\n    }\r\n  }\r\n\r\n  drop(event: CdkDragDrop<any[]>) {\r\n    this.correct = -1;\r\n    moveItemInArray(this.answersList, event.previousIndex, event.currentIndex);\r\n  }\r\n\r\n  public onShowAnswersClick() {\r\n    this.showAnswers = true;\r\n\r\n    this.index = this.question.answers.findIndex((res) => {\r\n      return res.ranking_position == 1;\r\n    });\r\n    this.hasSubsequence = this.question.answers[this.index].subsequences;\r\n\r\n    let maxLength = 2; // change later if needed\r\n    let count = 0;\r\n    let sub: number[] = [];\r\n\r\n    this.answersList.forEach((value, index, array) => {\r\n      if (\r\n        array[index].correct_position ==\r\n          array[index + 1]?.correct_position - 1 &&\r\n        array[index].correct_position != index + 1\r\n      ) {\r\n        sub.push(array[index].correct_position);\r\n      } else {\r\n        if (array[index].correct_position == index + 1) count++;\r\n        sub.push(array[index].correct_position);\r\n        if (sub.length > maxLength) {\r\n          this.subsequence = sub;\r\n          maxLength = sub.length;\r\n        }\r\n        sub = [];\r\n      }\r\n    });\r\n    if (this.correct != 0)\r\n      this.correct = count == this.answersList.length ? 1 : -1;\r\n    this.hasSubsequence = maxLength < 3 ? false : true;\r\n  }\r\n\r\n  public isCorrectPosition(answer: any) {\r\n    if (!this.showAnswers) {\r\n      return false;\r\n    }\r\n    return this.answersList.indexOf(answer) + 1 == answer.correct_position;\r\n  }\r\n\r\n  public isInCorrectPosition(answer: any) {\r\n    if (!this.showAnswers) {\r\n      return false;\r\n    }\r\n    return this.answersList.indexOf(answer) + 1 != answer.correct_position;\r\n  }\r\n\r\n  public onNextQuestionClick() {\r\n    this.nextQuestionClicked.emit(this.correct);\r\n  }\r\n}\r\n","<div\r\n  cdkDropList\r\n  class=\"ranking-list\"\r\n  (cdkDropListDropped)=\"drop($event)\"\r\n  [cdkDropListDisabled]=\"showAnswers\"\r\n>\r\n  <div\r\n    class=\"ranking-box\"\r\n    cdkDrag\r\n    [class.correctPosition]=\"isCorrectPosition(answer)\"\r\n    [class.incorrectPosition]=\"isInCorrectPosition(answer)\"\r\n    [class.subsequence]=\"\r\n      hasSubsequence &&\r\n      subsequence.includes(answer.correct_position) &&\r\n      correct === -1\r\n    \"\r\n    *ngFor=\"let answer of answersList; let index = index\"\r\n  >\r\n    <p class=\"answerText\" [data]=\"answer.text\" markdown></p>\r\n    <!--p>{{ answer.text }}gg</p-->\r\n    <div class=\"feedback-icon\" *ngIf=\"showAnswers\">\r\n      <mat-icon\r\n        *ngIf=\"\r\n          (!subsequence.includes(answer.correct_position) &&\r\n            answer.correct_position === index + 1) ||\r\n          correct === 1\r\n        \"\r\n        >check</mat-icon\r\n      >\r\n      <mat-icon\r\n        *ngIf=\"\r\n          !subsequence.includes(answer.correct_position) &&\r\n          answer.correct_position !== index + 1\r\n        \"\r\n        >highlight_off</mat-icon\r\n      >\r\n      <mat-icon\r\n        *ngIf=\"\r\n          hasSubsequence &&\r\n          subsequence.includes(answer.correct_position) &&\r\n          correct === -1\r\n        \"\r\n        svgIcon=\"semicorrect\"\r\n      ></mat-icon>\r\n    </div>\r\n  </div>\r\n</div>\r\n<div class=\"feedback-container\" *ngIf=\"showAnswers\">\r\n  <mat-icon class=\"correctIcon\" *ngIf=\"correct === 1\"> check_circle </mat-icon>\r\n  <mat-icon class=\"incorrectIcon\" *ngIf=\"correct === -1 || correct === 0\">\r\n    highlight_off\r\n  </mat-icon>\r\n  <span\r\n    class=\"feedback\"\r\n    markdown\r\n    *ngIf=\"showAnswers\"\r\n    [data]=\"\r\n      correct === 1\r\n        ? this.question.answers[index].feedback_correct\r\n        : hasSubsequence\r\n        ? this.question.answers[index].feedback_subsequences\r\n        : this.question.answers[index].feedback_incorrect\r\n    \"\r\n  >\r\n  </span>\r\n</div>\r\n<button\r\n  (click)=\"onShowAnswersClick()\"\r\n  *ngIf=\"!showAnswers\"\r\n  color=\"primary\"\r\n  mat-raised-button\r\n  class=\"showAnswerBtn\"\r\n>\r\n  Lösungen anzeigen\r\n</button>\r\n<button\r\n  (click)=\"onNextQuestionClick()\"\r\n  *ngIf=\"showAnswers\"\r\n  color=\"primary\"\r\n  mat-raised-button\r\n  class=\"nextQuestionBtn\"\r\n>\r\n  {{ correct === 1 ? 'Richtig,' : ' Falsch,' }} nächste Frage\r\n</button>\r\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { MatSliderChange } from '@angular/material/slider';\nimport { QuizQuestion } from '../../state/quiz.model';\n\n@Component({\n  selector: 'solid-quiz-range-question',\n  templateUrl: './range-question.component.html',\n  styleUrls: ['./range-question.component.scss'],\n})\nexport class RangeQuestionComponent {\n  @Input() public question!: QuizQuestion;\n  @Output() public nextQuestionClicked = new EventEmitter<number>();\n\n  public correct = -2;\n  public showAnswers!: boolean;\n  public sliderPosition = this.question?.answers[0].range_min;\n\n  public onShowAnswersClick() {\n    this.showAnswers = true;\n\n    const tolerance = this.question.answers[0].tolerance;\n    const correctValue = this.question.answers[0].range_value;\n    const max = this.question.answers[0].range_max;\n    const min = this.question.answers[0].range_min;\n\n    if (this.correct != -2) {\n      if (Math.abs(this.sliderPosition - correctValue) <= tolerance)\n        this.correct = 1;\n    } else this.correct = 0;\n\n    setTimeout(() => {\n      const correctThumb = document.getElementById('correctThumb');\n      const selectedThumb = document.getElementById('selectedThumb');\n      const toleranceBar = document.getElementById('toleranceBar');\n      const slider = document.getElementById('slider');\n\n      if (slider && correctThumb && toleranceBar && selectedThumb) {\n        const scalingFactor = (slider.offsetWidth - 14) / (max - min);\n        const correctPos = (correctValue - min) * scalingFactor;\n        const toleranceWidth = 2 * tolerance * scalingFactor;\n        const selectedPos = (this.sliderPosition - min) * scalingFactor;\n\n        correctThumb.style.left = correctPos - 10 + 'px';\n\n        if (this.correct === 1 && this.sliderPosition - correctValue !== 0) {\n          toleranceBar.style.width = toleranceWidth + 'px';\n          toleranceBar.style.left = correctPos - toleranceWidth / 2 + 'px';\n        } else {\n          toleranceBar.style.visibility = 'hidden';\n        }\n\n        if (this.correct === 0 || this.sliderPosition - correctValue === 0) {\n          selectedThumb.style.visibility = 'hidden';\n        } else {\n          selectedThumb.style.left = selectedPos - 10 + 'px';\n        }\n      }\n    }, 5);\n  }\n\n  onSliderChange(value: number) {\n    this.correct = -1;\n  }\n\n  public onNextQuestionClick() {\n    this.nextQuestionClicked.emit(this.correct);\n  }\n}\n","<div class=\"visualFeedbackContainer\">\n  <div\n    id=\"correctThumb\"\n    *ngIf=\"showAnswers\"\n    [class.correct]=\"correct === 1\"\n    [class.incorrect]=\"correct === -1 || correct === 0\"\n  >\n    <p>{{ question.answers[0].range_value }}</p>\n  </div>\n  <div id=\"toleranceBar\" *ngIf=\"showAnswers\"></div>\n</div>\n<div class=\"range-container\">\n  <span\n    class=\"minTick\"\n    [class.correct]=\"showAnswers && correct === 1\"\n    [class.incorrect]=\"(showAnswers && correct === -1) || correct === 0\"\n  ></span>\n  <p class=\"minLabel\">{{ question.answers[0].range_min }}</p>\n\n  <mat-slider\n    id=\"slider\"\n    thumbLabel\n    [disabled]=\"showAnswers\"\n    [min]=\"question.answers[0].range_min\"\n    [max]=\"question.answers[0].range_max\"\n    [step]=\"question.answers[0].range_step\"\n    [class.correctRange]=\"showAnswers && correct === 1\"\n    [class.incorrectRange]=\"(showAnswers && correct === -1) || correct === 0\"\n    [(ngModel)]=\"sliderPosition\"\n  >\n    <input (valueChange)=\"onSliderChange($event)\" matSliderThumb />\n  </mat-slider>\n  <p class=\"maxLabel\">{{ question.answers[0].range_max }}</p>\n  <span class=\"maxTick\"></span>\n</div>\n\n<div class=\"visualFeedbackContainer\">\n  <div\n    id=\"selectedThumb\"\n    [class.correct]=\"showAnswers && correct === 1\"\n    [class.incorrect]=\"(showAnswers && correct === -1) || correct === 0\"\n    *ngIf=\"showAnswers\"\n  >\n    <p>{{ sliderPosition }}</p>\n  </div>\n</div>\n\n<div class=\"feedback-container\" *ngIf=\"showAnswers\">\n  <mat-icon class=\"correctIcon\" *ngIf=\"correct === 1\"> check_circle </mat-icon>\n  <mat-icon class=\"incorrectIcon\" *ngIf=\"correct === -1 || correct === 0\">\n    highlight_off\n  </mat-icon>\n  <span\n    class=\"feedback\"\n    markdown\n    [data]=\"\n      correct === 1\n        ? this.question.answers[0].feedback_correct\n        : this.question.answers[0].feedback_incorrect\n    \"\n  >\n  </span>\n</div>\n\n<div>\n  <button\n    (click)=\"onShowAnswersClick()\"\n    *ngIf=\"!showAnswers\"\n    color=\"primary\"\n    mat-raised-button\n    class=\"showAnswerBtn\"\n  >\n    Lösungen anzeigen\n  </button>\n  <button\n    (click)=\"onNextQuestionClick()\"\n    *ngIf=\"showAnswers\"\n    color=\"primary\"\n    mat-raised-button\n    class=\"nextQuestionBtn\"\n  >\n    {{ correct === 1 ? 'Richtig,' : ' Falsch,' }} nächste Frage\n  </button>\n</div>\n","import {\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  Output,\r\n  TemplateRef,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport {\r\n  QuizQuestion,\r\n  QuizQuestionType,\r\n  QuizSession,\r\n} from '../../state/quiz.model';\r\nimport { Select, Store } from '@ngxs/store';\r\nimport { EndQuizSession, QuizQuestionAnswered } from '../../state/quiz.actions';\r\nimport { QuizState } from '../../state/quiz.state';\r\nimport { Observable } from 'rxjs';\r\nimport { MatDialog } from '@angular/material/dialog';\r\n\r\n@Component({\r\n  selector: 'solid-quiz-question',\r\n  templateUrl: './question.component.html',\r\n  styleUrls: ['./question.component.scss'],\r\n})\r\nexport class QuestionComponent {\r\n  @Input() public question!: QuizQuestion;\r\n  @Output() stopQuiz = new EventEmitter<boolean>();\r\n\r\n  public QuestionTypes = QuizQuestionType;\r\n  public ImageIndex = 0;\r\n  SWIPE_ACTION = { LEFT: 'swipeleft', RIGHT: 'swiperight' };\r\n\r\n  @Select(QuizState.getSession)\r\n  QuizSession!: Observable<QuizSession | null>;\r\n\r\n  @ViewChild('backPopup', { read: TemplateRef }) backPopup!: TemplateRef<any>;\r\n  @ViewChild('skipPopup', { read: TemplateRef }) skipPopup!: TemplateRef<any>;\r\n\r\n  constructor(private _store: Store, private dialog: MatDialog) {}\r\n\r\n  onNextQuestionClicked(correct: number) {\r\n    if (this.question) {\r\n      this._store.dispatch(new QuizQuestionAnswered(correct));\r\n    }\r\n    this.ImageIndex = 0;\r\n  }\r\n\r\n  swipe(\r\n    currentIndex: number,\r\n    imageLength: number,\r\n    action: string = this.SWIPE_ACTION.RIGHT\r\n  ) {\r\n    if (currentIndex > imageLength || currentIndex < 0) {\r\n      return;\r\n    }\r\n    if (action === this.SWIPE_ACTION.LEFT) {\r\n      const isLast = currentIndex === imageLength - 1;\r\n      this.ImageIndex = isLast ? 0 : currentIndex + 1;\r\n    }\r\n    if (action === this.SWIPE_ACTION.RIGHT) {\r\n      const isFirst = currentIndex === 0;\r\n      this.ImageIndex = isFirst ? imageLength - 1 : currentIndex - 1;\r\n    }\r\n  }\r\n\r\n  onChartBtnClick() {\r\n    this.dialog.open(this.skipPopup, { panelClass: 'custom-dialog-container' });\r\n  }\r\n\r\n  onSkipToEnd() {\r\n    this.stopQuiz.emit(true);\r\n  }\r\n\r\n  onBackBtnClick() {\r\n    this.dialog.open(this.backPopup, { panelClass: 'custom-dialog-container' });\r\n  }\r\n\r\n  onBackToStart() {\r\n    this._store.dispatch(new EndQuizSession());\r\n  }\r\n}\r\n","<ng-container *ngIf=\"question && QuizSession | async as quizSession\">\r\n  <div class=\"toolbar-container\" #toolbar>\r\n    <div class=\"toolbar\">\r\n      <button mat-icon-button class=\"button-back\" (click)=\"onBackBtnClick()\">\r\n        <mat-icon>arrow_back</mat-icon>\r\n      </button>\r\n      <button mat-icon-button class=\"button-close\" (click)=\"onChartBtnClick()\">\r\n        <mat-icon>bar_chart</mat-icon>\r\n      </button>\r\n      <div class=\"step-actions\">\r\n        <div class=\"title\">\r\n          <h2>\r\n            Fragen {{ quizSession.currentQuestion + 1 }} von\r\n            {{ quizSession.questions.length }}\r\n          </h2>\r\n          <p\r\n            class=\"question-info\"\r\n            *ngIf=\"question.tags.length !== 0; else withoutTags\"\r\n          >\r\n            Tags: {{ question.tags.join(' ') }} | Schwierigkeit:\r\n            {{ question.difficulty }}\r\n          </p>\r\n          <ng-template #withoutTags\r\n            >Schwierigkeit: {{ question.difficulty }}</ng-template\r\n          >\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <mat-progress-bar\r\n      mode=\"determinate\"\r\n      [value]=\"quizSession.progress + 100 / quizSession.questions.length\"\r\n    ></mat-progress-bar>\r\n  </div>\r\n  <mat-card>\r\n    <mat-card-header>\r\n      <mat-card-title>\r\n        <p [data]=\"question.text\" markdown></p>\r\n      </mat-card-title>\r\n    </mat-card-header>\r\n    <mat-card-content>\r\n      <div *ngIf=\"question.images.length > 0\" class=\"image-container\">\r\n        <button\r\n          mat-mini-fab\r\n          class=\"button-before\"\r\n          color=\"accent\"\r\n          *ngIf=\"question.images.length > 1\"\r\n          (click)=\"\r\n            swipe(ImageIndex, question.images.length, SWIPE_ACTION.RIGHT)\r\n          \"\r\n        >\r\n          <mat-icon aria-label=\"Vorheriger Schritt\">navigate_before</mat-icon>\r\n        </button>\r\n        <solid-core-media\r\n          (swiperight)=\"swipe(ImageIndex, question.images.length, $event.type)\"\r\n          (swipeleft)=\"swipe(ImageIndex, question.images.length, $event.type)\"\r\n          [mediaObject]=\"question.images[ImageIndex]\"\r\n          [hasDialog]=\"true\"\r\n          [hasAudio]=\"false\"\r\n          [hasAttributions]=\"true\"\r\n        ></solid-core-media>\r\n        <button\r\n          class=\"button-next\"\r\n          color=\"accent\"\r\n          mat-mini-fab\r\n          *ngIf=\"question.images.length > 1\"\r\n          (click)=\"swipe(ImageIndex, question.images.length, SWIPE_ACTION.LEFT)\"\r\n        >\r\n          <mat-icon aria-label=\"Nächster Schritt\">navigate_next</mat-icon>\r\n        </button>\r\n      </div>\r\n      <ng-container [ngSwitch]=\"question.type\">\r\n        <mat-card-content\r\n          *ngSwitchCase=\"QuestionTypes.SingleChoice\"\r\n          class=\"single-choice\"\r\n        >\r\n          <solid-quiz-single-choice-question\r\n            [question]=\"question\"\r\n            (nextQuestionClicked)=\"onNextQuestionClicked($event)\"\r\n          >\r\n          </solid-quiz-single-choice-question>\r\n        </mat-card-content>\r\n\r\n        <mat-card-content\r\n          *ngSwitchCase=\"QuestionTypes.MultipleChoice\"\r\n          class=\"multiple-choice\"\r\n        >\r\n          <solid-quiz-multiple-choice-question\r\n            [question]=\"question\"\r\n            (nextQuestionClicked)=\"onNextQuestionClicked($event)\"\r\n          >\r\n          </solid-quiz-multiple-choice-question>\r\n        </mat-card-content>\r\n\r\n        <mat-card-content\r\n          *ngSwitchCase=\"QuestionTypes.TrueFalse\"\r\n          class=\"true-false\"\r\n        >\r\n          <solid-quiz-true-false-question\r\n            [question]=\"question\"\r\n            (nextQuestionClicked)=\"onNextQuestionClicked($event)\"\r\n          >\r\n          </solid-quiz-true-false-question>\r\n        </mat-card-content>\r\n\r\n        <mat-card-content *ngSwitchCase=\"QuestionTypes.Ranking\" class=\"ranking\">\r\n          <solid-quiz-ranking-question\r\n            [question]=\"question\"\r\n            (nextQuestionClicked)=\"onNextQuestionClicked($event)\"\r\n          >\r\n          </solid-quiz-ranking-question>\r\n        </mat-card-content>\r\n\r\n        <mat-card-content *ngSwitchCase=\"QuestionTypes.Range\" class=\"range\">\r\n          <solid-quiz-range-question\r\n            [question]=\"question\"\r\n            (nextQuestionClicked)=\"onNextQuestionClicked($event)\"\r\n          >\r\n          </solid-quiz-range-question>\r\n        </mat-card-content>\r\n      </ng-container>\r\n    </mat-card-content>\r\n  </mat-card>\r\n  <ng-template #backPopup>\r\n    <div class=\"closeDialog\">\r\n      <p class=\"closeDialogTitle\">Quiz abbrechen</p>\r\n      <button class=\"popUpCloseBtn\" mat-icon-button mat-dialog-close>\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </div>\r\n    <mat-dialog-content>\r\n      <p>Möchtest Du dieses Quiz abbrechen ?</p>\r\n    </mat-dialog-content>\r\n    <mat-dialog-actions>\r\n      <button\r\n        class=\"backBtn\"\r\n        mat-button\r\n        [mat-dialog-close]=\"true\"\r\n        (click)=\"onBackToStart()\"\r\n      >\r\n        Ja\r\n      </button>\r\n      <button class=\"cancelBtn\" mat-button mat-dialog-close cdkFocusInitial>\r\n        Nein\r\n      </button>\r\n    </mat-dialog-actions>\r\n  </ng-template>\r\n\r\n  <ng-template #skipPopup>\r\n    <div class=\"closeDialog\">\r\n      <p class=\"closeDialogTitle\">Quiz beenden</p>\r\n      <button class=\"popUpCloseBtn\" mat-icon-button mat-dialog-close>\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </div>\r\n    <mat-dialog-content>\r\n      <p>Möchtest Du dieses Quiz beenden und zur Auswertung springen?</p>\r\n    </mat-dialog-content>\r\n    <mat-dialog-actions>\r\n      <button\r\n        class=\"backBtn\"\r\n        mat-button\r\n        [mat-dialog-close]=\"true\"\r\n        (click)=\"onSkipToEnd()\"\r\n      >\r\n        Ja\r\n      </button>\r\n      <button class=\"cancelBtn\" mat-button mat-dialog-close cdkFocusInitial>\r\n        Nein\r\n      </button>\r\n    </mat-dialog-actions>\r\n  </ng-template>\r\n</ng-container>\r\n","export const QuizFeedback = {\r\n  e0: [\r\n    'Das war zum Aufwärmen - die nächste Runde wird bestimmt besser!',\r\n    'Kein Grund zur Frustration - einfach durchatmen und die nächste Runde starten.',\r\n    'Noch ein Kaffee und eine neue Chance?',\r\n  ],\r\n  lt25: [\r\n    '{{correctPercentage}}% richtig - da ist noch etwas Luft nach oben...',\r\n    'Einfach noch eine Runde starten - da geht bestimmt noch was!',\r\n    'Beim nächsten Mal sind bestimmt mehr Antworten richtig!',\r\n  ],\r\n  lt50: [\r\n    '{{correctPercentage}}% - noch nicht die Hälfte, aber da war schon Schönes dabei.',\r\n    'Vielleicht braucht es noch ein bisschen Übung?',\r\n    'In der nächsten Runde werden es bestimmt noch mehr richtige Antworten!',\r\n  ],\r\n  lt75: [\r\n    '{{correctPercentage}}% ist ein ganz gutes Ergebnis! Geht da noch mehr?',\r\n    'Das klappt ja ganz gut, aber ein bisschen mehr wird es beim nächsten Mal bestimmt!',\r\n    'Die Hälfte war mindestens richtig! Eine Runde geht bestimmt noch.',\r\n  ],\r\n  ge75: [\r\n    '{{correctPercentage}}%! Das ist ein prima Ergebnis.',\r\n    'Beim nächsten Mal werden bestimmt die 100% geknackt!',\r\n    'Nicht schlecht - ein paar % fehlen noch zum Gipfel!',\r\n  ],\r\n  e100: [\r\n    'Alle Fragen richtig!? Beeindruckend...',\r\n    'Na, da kann man wohl nicht mehr viel beibringen.',\r\n    'Na? Klappt es mit den 100% auch bei der nächsten Runde?',\r\n  ],\r\n  nan: [\r\n    'Rock bottom, I hope for your sake you nuked that level!',\r\n    'Wenn gar keine Frage beantwortet wurde, gibt es auch keine Gummipunkte!',\r\n    'Ein verweigerter Selbsttest? Come on!',\r\n  ],\r\n};\r\n","import { Component, EventEmitter, OnDestroy, Output } from '@angular/core';\r\nimport { Store } from '@ngxs/store';\r\nimport { QuizSession } from '../../state/quiz.model';\r\nimport { EndQuizSession, StartQuizSession } from '../../state/quiz.actions';\r\nimport { QuizFeedback } from './end-feedback';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { Subject } from 'rxjs';\r\nimport { UntypedFormControl, Validators } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'solid-quiz-end',\r\n  templateUrl: './end.component.html',\r\n  styleUrls: ['./end.component.scss'],\r\n})\r\nexport class EndComponent implements OnDestroy {\r\n  private $destroyed = new Subject<boolean>();\r\n  questionCount = new UntypedFormControl(10, [Validators.min(1)]);\r\n  QuizSession: QuizSession | null = null;\r\n  FeedbackText = '';\r\n  correctQuestions = 0;\r\n  correctPercentage = 0;\r\n  answeredQuestions = 0;\r\n  @Output() stopQuiz = new EventEmitter<boolean>();\r\n\r\n  constructor(private _store: Store) {\r\n    this._store\r\n      .select((s) => s.quiz.session)\r\n      .pipe(takeUntil(this.$destroyed))\r\n      .subscribe((session: QuizSession | null) => {\r\n        if (session) {\r\n          this.QuizSession = session;\r\n          this.questionCount.setValue(session.questions.length);\r\n          this.correctQuestions = session.questions\r\n            .map((q) => q.answered)\r\n            .reduce((curr, val) => (val === 1 ? curr + 1 : curr), 0 as number);\r\n          this.answeredQuestions = session.questions\r\n            .map((q) => q.answered)\r\n            .reduce((curr, val) => (val !== 0 ? curr + 1 : curr), 0 as number);\r\n          this.correctPercentage =\r\n            this.correctQuestions / this.answeredQuestions;\r\n          let feedbacks: string[] = [];\r\n          if (this.correctPercentage === 0) {\r\n            feedbacks = QuizFeedback.e0;\r\n          } else if (this.correctPercentage < 0.25) {\r\n            feedbacks = QuizFeedback.lt25;\r\n          } else if (this.correctPercentage < 0.5) {\r\n            feedbacks = QuizFeedback.lt50;\r\n          } else if (this.correctPercentage < 0.75) {\r\n            feedbacks = QuizFeedback.lt75;\r\n          } else if (this.correctPercentage === 1) {\r\n            feedbacks = QuizFeedback.e100;\r\n          } else if (isNaN(this.correctPercentage)) {\r\n            feedbacks = QuizFeedback.nan;\r\n          } else {\r\n            feedbacks = QuizFeedback.ge75;\r\n          }\r\n          this.FeedbackText =\r\n            feedbacks[Math.floor(Math.random() * feedbacks.length)];\r\n          this.FeedbackText = this.FeedbackText.replace(\r\n            '{{correctPercentage}}',\r\n            Math.round(100 * this.correctPercentage).toString(10)\r\n          );\r\n        }\r\n      });\r\n  }\r\n\r\n  onRestartClick() {\r\n    this._store.dispatch(new StartQuizSession(this.questionCount.value));\r\n    this.stopQuiz.emit(false);\r\n  }\r\n\r\n  onStartClick() {\r\n    this._store.dispatch(new EndQuizSession());\r\n    this.stopQuiz.emit(false);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.$destroyed.next(true);\r\n  }\r\n\r\n  onBackBtnClick() {\r\n    this._store.dispatch(new EndQuizSession());\r\n    this.stopQuiz.emit(false);\r\n  }\r\n}\r\n","<div class=\"toolbar-container\">\r\n  <div class=\"toolbar\">\r\n    <button mat-icon-button class=\"button-back\" (click)=\"onBackBtnClick()\">\r\n      <mat-icon>arrow_back</mat-icon>\r\n    </button>\r\n    <div class=\"title\">\r\n      <h2>Selbsttest - Auswertung</h2>\r\n    </div>\r\n  </div>\r\n</div>\r\n<mat-card *ngIf=\"QuizSession\">\r\n  <mat-card-content class=\"quizEval\">\r\n    <p class=\"resultText\">\r\n      {{ correctQuestions }} von {{ answeredQuestions }} Fragen wurden richtig\r\n      beantwortet.\r\n    </p>\r\n    <p [data]=\"FeedbackText\" markdown></p>\r\n  </mat-card-content>\r\n  <mat-card-actions>\r\n    <div class=\"button-container\">\r\n      <button\r\n        class=\"startBtn\"\r\n        (click)=\"onStartClick()\"\r\n        mat-raised-button\r\n        color=\"primary\"\r\n      >\r\n        Neues Quiz starten\r\n      </button>\r\n\r\n      <button\r\n        class=\"restartBtn\"\r\n        (click)=\"onRestartClick()\"\r\n        mat-raised-button\r\n        color=\"primary\"\r\n      >\r\n        Quiz wiederholen\r\n      </button>\r\n    </div>\r\n  </mat-card-actions>\r\n  <mat-expansion-panel MatAccordionDisplayMode=\"flat\">\r\n    <mat-expansion-panel-header>Details</mat-expansion-panel-header>\r\n    <div\r\n      class=\"answerDetails\"\r\n      *ngFor=\"let question of QuizSession.questions; let i = index\"\r\n    >\r\n      <mat-icon class=\"correctIcon\" *ngIf=\"question.answered === 1\">\r\n        check_circle\r\n      </mat-icon>\r\n      <mat-icon class=\"incorrectIcon\" *ngIf=\"question.answered === -1\">\r\n        cancel\r\n      </mat-icon>\r\n      <mat-icon class=\"unansweredIcon\" *ngIf=\"question.answered === 0\">\r\n        remove_circle\r\n      </mat-icon>\r\n      <div class=\"questionText\">\r\n        <span class=\"questionHeader\">Frage {{ i + 1 }}: </span>\r\n        <span [data]=\"question.text\" [inline]=\"true\" markdown></span>\r\n      </div>\r\n    </div>\r\n  </mat-expansion-panel>\r\n  <mat-card-footer>\r\n    <p class=\"footnote\">\r\n      Als richtig wurde eine Frage nur dann gezählt, wenn alle richtigen\r\n      Antworten und keine falschen ausgewählt wurden.\r\n    </p>\r\n  </mat-card-footer>\r\n</mat-card>\r\n","import { Component, OnDestroy } from '@angular/core';\r\nimport { Select, Store } from '@ngxs/store';\r\nimport { Observable } from 'rxjs';\r\nimport { QuizSession } from '../../state/quiz.model';\r\nimport { EndQuizSession, LoadQuizMetadata } from '../../state/quiz.actions';\r\nimport { QuizState } from '../../state/quiz.state';\r\n\r\n@Component({\r\n  selector: 'solid-quiz-main',\r\n  templateUrl: './main.component.html',\r\n  styleUrls: ['./main.component.scss'],\r\n})\r\nexport class MainComponent implements OnDestroy {\r\n  @Select(QuizState.getSession)\r\n  QuizSession!: Observable<QuizSession | null>;\r\n  stopQuiz = false;\r\n\r\n  constructor(private store: Store) {\r\n    store.dispatch(new LoadQuizMetadata());\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.store.dispatch(new EndQuizSession());\r\n  }\r\n\r\n  setStopQuiz(stopQuiz: boolean) {\r\n    this.stopQuiz = stopQuiz;\r\n  }\r\n}\r\n","<ng-container *ngIf=\"QuizSession | async as quizSession; else quizStart\">\r\n  <div *ngIf=\"quizSession.progress !== 100 && !stopQuiz; else quizEnd\">\r\n    <solid-quiz-question\r\n      [question]=\"quizSession.questions[quizSession.currentQuestion]\"\r\n      (stopQuiz)=\"setStopQuiz($event)\"\r\n    ></solid-quiz-question>\r\n  </div>\r\n</ng-container>\r\n<ng-template #quizStart>\r\n  <solid-quiz-start></solid-quiz-start>\r\n</ng-template>\r\n<ng-template #quizEnd>\r\n  <solid-quiz-end (stopQuiz)=\"setStopQuiz($event)\"></solid-quiz-end>\r\n</ng-template>\r\n","import { NgModule } from '@angular/core';\r\nimport { Route, RouterModule } from '@angular/router';\r\nimport { StartComponent } from './components/start/start.component';\r\nimport { MainComponent } from './components/main/main.component';\r\nimport { QuestionComponent } from './components/question/question.component';\r\nimport { SingleChoiceQuestionComponent } from './components/single-choice-question/single-choice-question.component';\r\nimport { MultipleChoiceQuestionComponent } from './components/multiple-choice-question/multiple-choice-question.component';\r\nimport { TrueFalseQuestionComponent } from './components/true-false-question/true-false-question.component';\r\nimport { RankingQuestionComponent } from './components/ranking-question/ranking-question.component';\r\nimport { RangeQuestionComponent } from './components/range-question/range-question.component';\r\nimport { EndComponent } from './components/end/end.component';\r\nimport { NgxsModule } from '@ngxs/store';\r\nimport { QuizState } from './state/quiz.state';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { SolidCoreModule } from '@zentrumnawi/solid-core';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { MatSliderModule } from '@angular/material/slider';\r\nimport { MatChipsModule } from '@angular/material/chips';\r\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { DragDropModule } from '@angular/cdk/drag-drop';\r\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\n\r\nexport const routes: Route[] = [\r\n  { path: '', component: MainComponent, data: { title: 'Selbsttest' } },\r\n];\r\n\r\n// This workaround is required for the \"old\" angular compiler in production mode. Ivy library publishing is not supported until angular 10.\r\n// https://github.com/ng-packagr/ng-packagr/issues/767\r\nexport const routerChildModule = RouterModule.forChild(routes);\r\nexport const ngxsFeatureModule = NgxsModule.forFeature([QuizState]);\r\n\r\n@NgModule({\r\n  declarations: [\r\n    StartComponent,\r\n    MainComponent,\r\n    QuestionComponent,\r\n    EndComponent,\r\n    SingleChoiceQuestionComponent,\r\n    MultipleChoiceQuestionComponent,\r\n    TrueFalseQuestionComponent,\r\n    RankingQuestionComponent,\r\n    RangeQuestionComponent,\r\n  ],\r\n  imports: [\r\n    SolidCoreModule,\r\n    routerChildModule,\r\n    ngxsFeatureModule,\r\n    MatButtonModule,\r\n    MatCardModule,\r\n    MatCheckboxModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatProgressBarModule,\r\n    MatRadioModule,\r\n    MatProgressSpinnerModule,\r\n    MatIconModule,\r\n    MatExpansionModule,\r\n    MatSliderModule,\r\n    MatChipsModule,\r\n    MatAutocompleteModule,\r\n    MatListModule,\r\n    MatSelectModule,\r\n    MatDialogModule,\r\n    DragDropModule,\r\n    MatButtonToggleModule,\r\n    MatSlideToggleModule,\r\n  ],\r\n})\r\nexport class SolidQuizModule {}\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["__decorate","i1","i2","i7","i8","i3","i4","i5","i6","i9.SingleChoiceQuestionComponent","i10.MultipleChoiceQuestionComponent","i11.TrueFalseQuestionComponent","i12.RankingQuestionComponent","i13.RangeQuestionComponent","i3.StartComponent","i4.QuestionComponent","i5.EndComponent"],"mappings":"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"}