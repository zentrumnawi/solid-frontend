{"version":3,"file":"zentrumnawi-solid-glossary.mjs","sources":["../../../../../libs/solid/glossary/src/lib/glossary.actions.ts","../../../../../libs/solid/glossary/src/lib/glossary.state.ts","../../../../../libs/solid/glossary/src/lib/components/link.directive.ts","../../../../../libs/solid/glossary/src/lib/components/glossary.component.ts","../../../../../libs/solid/glossary/src/lib/components/glossary.component.html","../../../../../libs/solid/glossary/src/lib/solid-glossary.module.ts","../../../../../libs/solid/glossary/src/zentrumnawi-solid-glossary.ts"],"sourcesContent":["export class LoadGLossary {\r\n  static readonly type = '[Glossary] LoadEntries';\r\n}\r\n","import { Action, Selector, State, StateContext } from '@ngxs/store';\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { LoadGLossary } from './glossary.actions';\r\nimport { SOLID_CORE_CONFIG, SolidCoreConfig } from '@zentrumnawi/solid-core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { map, tap } from 'rxjs/operators';\r\n\r\nexport interface GlossaryEntryModel {\r\n  id: number;\r\n  term: string;\r\n  text: string;\r\n  // images are not used\r\n  // img?: string;\r\n  // img_alt?: string;\r\n  links: number[];\r\n}\r\n\r\nexport interface GlossaryEntries {\r\n  [key: number]: GlossaryEntryModel;\r\n}\r\n\r\nexport interface GlossaryStateModel {\r\n  entries: GlossaryEntries;\r\n  sections: [string, number[]][];\r\n}\r\n\r\n@State<GlossaryStateModel>({\r\n  name: 'glossary',\r\n  defaults: {\r\n    entries: {},\r\n    sections: [],\r\n  },\r\n})\r\n@Injectable()\r\nexport class GlossaryState {\r\n  constructor(\r\n    @Inject(SOLID_CORE_CONFIG) private _config: SolidCoreConfig,\r\n    private _http: HttpClient\r\n  ) {}\r\n\r\n  @Selector()\r\n  static state(state: GlossaryStateModel) {\r\n    return { ...state };\r\n  }\r\n\r\n  @Action(LoadGLossary)\r\n  public load(ctx: StateContext<GlossaryStateModel>) {\r\n    return this._http\r\n      .get<GlossaryEntryModel[]>(`${this._config.apiUrl}/glossaryentries`)\r\n      .pipe(\r\n        map((result) => {\r\n          const entries: GlossaryEntries = {};\r\n          const sections: { [key: string]: number[] } = {};\r\n          result.forEach((entry) => {\r\n            entries[entry.id] = entry;\r\n            const firstChar = entry.term[0].toUpperCase();\r\n            if (sections[firstChar] === undefined) {\r\n              sections[firstChar] = [];\r\n            }\r\n            sections[firstChar].push(entry.id);\r\n          });\r\n          Object.keys(sections).forEach((sectionKey) =>\r\n            sections[sectionKey].sort((a, b) =>\r\n              entries[a].term.localeCompare(entries[b].term)\r\n            )\r\n          );\r\n          const sectionArr = Object.entries(sections);\r\n          sectionArr.sort((a, b) => a[0].localeCompare(b[0]));\r\n          return { entries, sections: sectionArr };\r\n        }),\r\n        tap((v) => {\r\n          ctx.patchState(v);\r\n        })\r\n      );\r\n  }\r\n}\r\n","import { Directive, ElementRef, HostBinding, Input } from '@angular/core';\r\n\r\n@Directive({ selector: '[solidGlossaryEntry]' })\r\nexport class RefDirective {\r\n  @Input() public refId!: number;\r\n  @Input() public highlighted = false;\r\n  @HostBinding('class.flash') get flashClass() {\r\n    return this.highlighted;\r\n  }\r\n  constructor(public ref: ElementRef) {}\r\n}\r\n","import { Component, OnDestroy, QueryList, ViewChildren } from '@angular/core';\r\nimport { Select, Store } from '@ngxs/store';\r\nimport {\r\n  GlossaryEntryModel,\r\n  GlossaryState,\r\n  GlossaryStateModel,\r\n} from '../glossary.state';\r\nimport { LoadGLossary } from '../glossary.actions';\r\nimport { combineLatest, Observable, Subject } from 'rxjs';\r\nimport { RefDirective } from './link.directive';\r\nimport { UntypedFormControl } from '@angular/forms';\r\nimport { map, startWith, takeUntil } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'solid-glossary',\r\n  templateUrl: './glossary.component.html',\r\n  styleUrls: ['./glossary.component.scss'],\r\n})\r\nexport class GlossaryComponent implements OnDestroy {\r\n  private $destroyed = new Subject<boolean>();\r\n  public Filter = new UntypedFormControl('');\r\n  @ViewChildren(RefDirective, { read: RefDirective })\r\n  public refElements!: QueryList<RefDirective>;\r\n  @Select(GlossaryState.state)\r\n  public State!: Observable<GlossaryStateModel>;\r\n  public GlossaryEntries: Observable<GlossaryStateModel>;\r\n\r\n  constructor(store: Store) {\r\n    store.dispatch(new LoadGLossary());\r\n    this.GlossaryEntries = combineLatest([\r\n      this.Filter.valueChanges.pipe(startWith('')),\r\n      this.State,\r\n    ]).pipe(\r\n      map((val) => {\r\n        const filterStr: string = (val[0] as string).toLowerCase();\r\n        const state = val[1];\r\n        if (filterStr === '') {\r\n          return state;\r\n        }\r\n        const validEntryIds = Object.values(state.entries)\r\n          .filter((entry: GlossaryEntryModel) => {\r\n            return (\r\n              entry.term.toLowerCase().includes(filterStr) ||\r\n              entry.text.toLowerCase().includes(filterStr)\r\n            );\r\n          })\r\n          .map((entry) => entry.id);\r\n        const filteredSections = state.sections\r\n          .filter((section) => {\r\n            return section[1].some((id) => validEntryIds.includes(id));\r\n          })\r\n          .map((section) => {\r\n            return [\r\n              section[0],\r\n              section[1].filter((id) => validEntryIds.includes(id)),\r\n            ] as [string, number[]];\r\n          });\r\n        return { sections: filteredSections, entries: state.entries };\r\n      }),\r\n      takeUntil(this.$destroyed)\r\n    );\r\n  }\r\n\r\n  followRef(refId: number) {\r\n    this.Filter.setValue('');\r\n    setTimeout(() => {\r\n      const refElement = this.refElements.find((r) => r.refId === refId);\r\n      if (!refElement) {\r\n        return;\r\n      }\r\n      refElement.ref.nativeElement.scrollIntoView({\r\n        behavior: 'smooth',\r\n        block: 'nearest',\r\n      });\r\n      refElement.highlighted = true;\r\n      setTimeout(() => {\r\n        refElement.highlighted = false;\r\n      }, 1000);\r\n    });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.$destroyed.next(true);\r\n  }\r\n}\r\n","<mat-form-field appearance=\"fill\">\r\n  <mat-label>Suche</mat-label>\r\n  <input [formControl]=\"Filter\" matInput type=\"text\" />\r\n  <button mat-icon-button matSuffix (click)=\"Filter.setValue('')\">\r\n    <mat-icon>{{ Filter.value === '' ? 'search' : 'close' }}</mat-icon>\r\n  </button>\r\n</mat-form-field>\r\n<mat-list *ngIf=\"GlossaryEntries | async as state\">\r\n  <ng-container *ngFor=\"let kvp of state.sections\">\r\n    <h3 mat-subeader>{{ kvp[0] }}</h3>\r\n    <mat-list-item\r\n      *ngFor=\"let entryId of kvp[1]\"\r\n      solidGlossaryEntry\r\n      [refId]=\"entryId\"\r\n    >\r\n      <span class=\"mat-body-strong entry-header\" mat-line>{{\r\n        state.entries[entryId].term\r\n      }}</span>\r\n      <div\r\n        [data]=\"state.entries[entryId].text\"\r\n        markdown\r\n        [inline]=\"true\"\r\n        mat-line\r\n      ></div>\r\n      <span\r\n        class=\"links\"\r\n        *ngIf=\"state.entries[entryId].links.length > 0\"\r\n        mat-line\r\n        >&rarr;<a\r\n          (click)=\"followRef(refId)\"\r\n          *ngFor=\"let refId of state.entries[entryId].links; let i = index\"\r\n        >\r\n          {{ state.entries[refId].term\r\n          }}{{ i < state.entries[entryId].links.length - 1 ? ',' : '' }}</a\r\n        >\r\n      </span>\r\n    </mat-list-item>\r\n  </ng-container>\r\n</mat-list>\r\n","import { NgModule } from '@angular/core';\r\nimport { SolidCoreModule } from '@zentrumnawi/solid-core';\r\nimport { GlossaryComponent } from './components';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { NgxsModule } from '@ngxs/store';\r\nimport { GlossaryState } from './glossary.state';\r\nimport { RefDirective } from './components/link.directive';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatButtonModule } from '@angular/material/button';\r\n\r\n// This workaround is required for the \"old\" angular compiler in production mode. Ivy library publishing is not supported until angular 10.\r\n// https://github.com/ng-packagr/ng-packagr/issues/767\r\nexport const ngxsFeatureModule = NgxsModule.forFeature([GlossaryState]);\r\n\r\n@NgModule({\r\n  declarations: [GlossaryComponent, RefDirective],\r\n  imports: [\r\n    SolidCoreModule,\r\n    MatListModule,\r\n    ngxsFeatureModule,\r\n    MatInputModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n  ],\r\n  exports: [GlossaryComponent],\r\n})\r\nexport class SolidGlossaryModule {}\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["__decorate","i1","i10.RefDirective"],"mappings":"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"}