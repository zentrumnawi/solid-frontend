{"version":3,"file":"zentrumnawi-solid-profile.mjs","sources":["../../../../../libs/solid/profile/src/lib/components/selected.directive.ts","../../../../../libs/solid/profile/src/lib/components/tree/tree.component.ts","../../../../../libs/solid/profile/src/lib/components/tree/tree.component.html","../../../../../libs/solid/profile/src/lib/components/list/list.component.ts","../../../../../libs/solid/profile/src/lib/components/list/list.component.html","../../../../../libs/solid/profile/src/lib/state/profile.actions.ts","../../../../../libs/solid/profile/src/lib/state/profile-definition.model.ts","../../../../../libs/solid/profile/src/lib/services/profile-definition.service.ts","../../../../../libs/solid/profile/src/lib/state/profile.state.ts","../../../../../libs/solid/profile/src/lib/components/detail/detail.component.ts","../../../../../libs/solid/profile/src/lib/components/detail/detail.component.html","../../../../../libs/solid/profile/src/lib/base-url.ts","../../../../../libs/solid/profile/src/lib/services/intro.service.ts","../../../../../libs/solid/profile/src/lib/components/grid/grid.component.ts","../../../../../libs/solid/profile/src/lib/components/grid/grid.component.html","../../../../../libs/solid/profile/src/lib/components/base/base.component.ts","../../../../../libs/solid/profile/src/lib/components/base/base.component.html","../../../../../libs/solid/profile/src/lib/solid-profile-routing.module.ts","../../../../../libs/solid/profile/src/lib/solid-profile.module.ts","../../../../../libs/solid/profile/src/zentrumnawi-solid-profile.ts"],"sourcesContent":["import { Directive } from '@angular/core';\r\n\r\n@Directive({ selector: '[solidProfileSelected]' })\r\nexport class SelectedDirective {}\r\n","import { FlatTreeControl } from '@angular/cdk/tree';\r\nimport {\r\n  AfterViewInit,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Inject,\r\n  Input,\r\n  OnChanges,\r\n  OnInit,\r\n  Output,\r\n  QueryList,\r\n  SimpleChanges,\r\n  ViewChild,\r\n  ViewChildren,\r\n} from '@angular/core';\r\nimport {\r\n  MatTreeFlatDataSource,\r\n  MatTreeFlattener,\r\n} from '@angular/material/tree';\r\nimport { Observable } from 'rxjs';\r\nimport { Profile, TreeNode } from '../../state/profile.model';\r\nimport { Store } from '@ngxs/store';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { SelectedDirective } from '../selected.directive';\r\nimport {\r\n  MediaModel,\r\n  SolidCoreConfig,\r\n  SOLID_CORE_CONFIG,\r\n} from '@zentrumnawi/solid-core';\r\n\r\nexport type FlatTreeNode = EntryNode | CategoryNode;\r\n\r\nexport interface EntryNode {\r\n  title: string;\r\n  subtitle: string;\r\n  type: 'entry';\r\n  level: number;\r\n  mediaObjects: MediaModel[];\r\n  expandable: false;\r\n  id: number;\r\n  def_type: string;\r\n}\r\n\r\nexport interface CategoryNode {\r\n  type: 'category';\r\n  title: string;\r\n  info: string | null;\r\n  level: number;\r\n  expandable: boolean;\r\n}\r\n\r\n@Component({\r\n  selector: 'solid-profile-tree',\r\n  templateUrl: './tree.component.html',\r\n  styleUrls: ['./tree.component.scss'],\r\n})\r\nexport class TreeComponent implements OnInit, OnChanges, AfterViewInit {\r\n  @ViewChildren(SelectedDirective, { read: ElementRef })\r\n  public selectedElements!: QueryList<ElementRef>;\r\n  @Input() selectedProfileId?: number;\r\n  @Input() selectedProfileType?: string;\r\n  @Input() profiles!: Observable<TreeNode[]>;\r\n  @Output() selectProfile = new EventEmitter<\r\n    number | { id: number; type: string }\r\n  >();\r\n  @Output() selectProfileTitle = new EventEmitter<string>();\r\n  @Input() isDiveApp = false;\r\n  @Input() collapseTree = false;\r\n  @ViewChild('profileTree') profileTree: any;\r\n\r\n  /** The MatTreeFlatDataSource connects the control and flattener to provide data. */\r\n  public DataSource: MatTreeFlatDataSource<TreeNode | Profile, FlatTreeNode>;\r\n  /** The TreeControl controls the expand/collapse state of tree nodes.  */\r\n  public readonly TreeControl: FlatTreeControl<FlatTreeNode>;\r\n\r\n  /** The TreeFlattener is used to generate the flat list of items from hierarchical data. */\r\n  private readonly _treeFlattener: MatTreeFlattener<\r\n    TreeNode | Profile,\r\n    FlatTreeNode\r\n  >;\r\n\r\n  private _selectedNode: CategoryNode | EntryNode | null = null;\r\n\r\n  constructor(\r\n    private _store: Store,\r\n    private _route: ActivatedRoute,\r\n    @Inject(SOLID_CORE_CONFIG) private coreConfig: SolidCoreConfig\r\n  ) {\r\n    this._treeFlattener = new MatTreeFlattener(\r\n      TreeComponent.transformer,\r\n      TreeComponent.getLevel,\r\n      TreeComponent.isExpandable,\r\n      (node) => TreeComponent.getChildren(node)\r\n    );\r\n\r\n    this.TreeControl = new FlatTreeControl(\r\n      TreeComponent.getLevel,\r\n      TreeComponent.isExpandable\r\n    );\r\n    this.DataSource = new MatTreeFlatDataSource(\r\n      this.TreeControl,\r\n      this._treeFlattener\r\n    );\r\n  }\r\n\r\n  /** Transform the data to something the tree can read. */\r\n  static transformer(node: TreeNode | Profile, level: number): FlatTreeNode {\r\n    if (node.type === 'category') {\r\n      return {\r\n        title: node.name,\r\n        type: 'category',\r\n        info: node.info,\r\n        level: level,\r\n        expandable: true,\r\n      };\r\n    } else {\r\n      return {\r\n        title: node.name,\r\n        subtitle: node.sub_name,\r\n        id: node.id,\r\n        type: 'entry',\r\n        level: level,\r\n        expandable: false,\r\n        mediaObjects: node.mediaObjects,\r\n        def_type: node.def_type,\r\n      };\r\n    }\r\n  }\r\n\r\n  /** Get the level of the node */\r\n  static getLevel(node: FlatTreeNode) {\r\n    return node.level;\r\n  }\r\n\r\n  /** Get whether the node is expanded or not. */\r\n  static isExpandable(node: FlatTreeNode) {\r\n    return node.expandable;\r\n  }\r\n\r\n  /** Get the children for the node. */\r\n  static getChildren(node: TreeNode | Profile) {\r\n    if (node.type === 'category') {\r\n      return [...node.children, ...node.profiles];\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  public ngOnInit(): void {\r\n    this.profiles.subscribe((profiles: any) => {\r\n      this.DataSource.data = profiles;\r\n      this.expandSelectedNode();\r\n      if (this.coreConfig.expandProfileTree) this.TreeControl.expandAll();\r\n    });\r\n  }\r\n\r\n  public ngAfterViewInit(): void {\r\n    this.selectedElements.changes.subscribe((_) => this.scrollTo());\r\n  }\r\n\r\n  public ngOnChanges(changes: SimpleChanges): void {\r\n    this.expandSelectedNode();\r\n    if (this.collapseTree) this.TreeControl.collapseAll();\r\n  }\r\n\r\n  /** Get whether the node has children or not. */\r\n  public hasChild(index: number, node: FlatTreeNode) {\r\n    return node.expandable;\r\n  }\r\n\r\n  public hasNoChild(index: number, node: FlatTreeNode) {\r\n    return !node.expandable;\r\n  }\r\n\r\n  onNodeClick(node: EntryNode | CategoryNode) {\r\n    if (this.TreeControl.isExpanded(node)) {\r\n      this.TreeControl.collapse(node);\r\n      this._selectedNode = null;\r\n    } else {\r\n      if (this._selectedNode) {\r\n        const children = this.TreeControl.getDescendants(this._selectedNode);\r\n        if (\r\n          !children ||\r\n          (Array.isArray(children) && !children.includes(node))\r\n        ) {\r\n          this.TreeControl.collapse(this._selectedNode);\r\n          for (const dataNode of this.TreeControl.dataNodes) {\r\n            const c = this.TreeControl.getDescendants(dataNode);\r\n            if (\r\n              c &&\r\n              Array.isArray(c) &&\r\n              c.includes(this._selectedNode) &&\r\n              !c.includes(node)\r\n            ) {\r\n              this.TreeControl.collapse(dataNode);\r\n            }\r\n          }\r\n        }\r\n      }\r\n      this.TreeControl.expand(node);\r\n      this._selectedNode = node;\r\n    }\r\n  }\r\n\r\n  private expandSelectedNode() {\r\n    if (this.TreeControl.dataNodes) {\r\n      this.TreeControl.dataNodes\r\n        .filter((n) => n.type === 'entry')\r\n        .forEach((node) => {\r\n          const profileNode = node as EntryNode;\r\n          if (\r\n            profileNode.id === this.selectedProfileId &&\r\n            profileNode.def_type === this.selectedProfileType\r\n          ) {\r\n            this.expandParents(node);\r\n          }\r\n        });\r\n    }\r\n  }\r\n\r\n  private expandParents(node: FlatTreeNode): void {\r\n    if (node.level === 0) {\r\n      this.TreeControl.expand(node);\r\n      return;\r\n    }\r\n    const startIndex = this.TreeControl.dataNodes.indexOf(node) - 1;\r\n    for (let i = startIndex; i >= 0; i--) {\r\n      if (this.TreeControl.dataNodes[i].level === node.level - 1) {\r\n        this.expandParents(this.TreeControl.dataNodes[i]);\r\n        this.TreeControl.expand(node);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  public scrollTo() {\r\n    setTimeout(() => {\r\n      const card = this.selectedElements.first || null;\r\n      if (!card) {\r\n        return;\r\n      }\r\n      card.nativeElement.scrollIntoView({\r\n        behavior: 'smooth',\r\n        block: 'nearest',\r\n      });\r\n    });\r\n  }\r\n\r\n  public getClassName(level: string | null) {\r\n    return `category level-${level}`;\r\n  }\r\n}\r\n","<!--suppress AngularInvalidExpressionResultType -->\r\n<mat-tree [dataSource]=\"DataSource\" [treeControl]=\"TreeControl\">\r\n  <mat-tree-node\r\n    (click)=\"\r\n      selectProfile.emit({ id: node.id, type: node.def_type });\r\n      selectProfileTitle.emit(node.title)\r\n    \"\r\n    *matTreeNodeDef=\"let node; when: hasNoChild\"\r\n    class=\"profile-link\"\r\n    matTreeNodePadding\r\n    matTreeNodeToggle\r\n    [matTreeNodePaddingIndent]=\"30\"\r\n  >\r\n    <img\r\n      [alt]=\"node.title\"\r\n      [src]=\"\r\n        node.mediaObjects.length > 0\r\n          ? node.mediaObjects[0].getRawImage('thumbnail')\r\n          : 'assets/profile/no_thumbnail.svg'\r\n      \"\r\n      class=\"thumbnail\"\r\n    />\r\n    <div class=\"profile-title\">\r\n      <ng-container\r\n        *ngIf=\"\r\n          selectedProfileId === node.id && selectedProfileType === node.def_type\r\n        \"\r\n      >\r\n        <span\r\n          *ngIf=\"isDiveApp\"\r\n          solidProfileSelected\r\n          class=\"selected\"\r\n          [data]=\"node.title\"\r\n          markdown\r\n        ></span>\r\n        <span\r\n          *ngIf=\"!isDiveApp\"\r\n          solidProfileSelected\r\n          class=\"selected\"\r\n          [innerHTML]=\"node.title\"\r\n        ></span>\r\n        <span class=\"selected\">{{ node.subtitle }}</span>\r\n      </ng-container>\r\n      <ng-container\r\n        *ngIf=\"\r\n          selectedProfileId !== node.id ||\r\n          (selectedProfileId === node.id &&\r\n            selectedProfileType !== node.def_type)\r\n        \"\r\n      >\r\n        <span\r\n          *ngIf=\"isDiveApp\"\r\n          class=\"title-not-selected\"\r\n          [data]=\"node.title\"\r\n          markdown\r\n        ></span>\r\n        <span\r\n          *ngIf=\"!isDiveApp\"\r\n          class=\"title-not-selected\"\r\n          [innerHTML]=\"node.title\"\r\n        ></span>\r\n        <span>{{ node.subtitle }}</span>\r\n      </ng-container>\r\n    </div>\r\n  </mat-tree-node>\r\n\r\n  <mat-tree-node\r\n    (click)=\"onNodeClick(node)\"\r\n    *matTreeNodeDef=\"let node; when: hasChild\"\r\n    matTreeNodePadding\r\n    [matTreeNodePaddingIndent]=\"30\"\r\n    #hasChildTreeNode\r\n  >\r\n    <button [attr.aria-label]=\"'toggle ' + node.title\" mat-icon-button>\r\n      <mat-icon class=\"mat-icon-rtl-mirror\">\r\n        {{ TreeControl.isExpanded(node) ? 'expand_more' : 'chevron_right' }}\r\n      </mat-icon>\r\n    </button>\r\n    <div>\r\n      <span [class]=\"getClassName(hasChildTreeNode.ariaLevel)\">{{\r\n        node.title\r\n      }}</span\r\n      ><br />\r\n      <span *ngIf=\"TreeControl.isExpanded(node) && node.info\" class=\"info\">{{\r\n        node.info\r\n      }}</span>\r\n    </div>\r\n  </mat-tree-node>\r\n</mat-tree>\r\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { Profile } from '../../state/profile.model';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'solid-profile-list',\r\n  templateUrl: './list.component.html',\r\n  styleUrls: ['./list.component.scss'],\r\n})\r\nexport class ListComponent {\r\n  @Input() profiles!: Observable<Profile[]>;\r\n  @Output() selectProfile = new EventEmitter<\r\n    number | { id: number; type: string }\r\n  >();\r\n  @Output() selectProfileTitle = new EventEmitter<string>();\r\n  @Input() selectedProfileId?: number;\r\n  @Input() selectedProfileType?: string;\r\n  @Input() isDiveApp = false;\r\n\r\n  public trackByFn(index: number, profile: Profile) {\r\n    return profile.id;\r\n  }\r\n}\r\n","<mat-list role=\"list\">\r\n  <ng-container *ngIf=\"profiles | async as profilesArr\">\r\n    <mat-list-item\r\n      (click)=\"\r\n        selectProfile.emit({ id: profile.id, type: profile.def_type });\r\n        selectProfileTitle.emit(profile.name)\r\n      \"\r\n      *ngFor=\"let profile of profilesArr; trackBy: trackByFn\"\r\n    >\r\n      <div\r\n        class=\"profile-title\"\r\n        [class.selected]=\"\r\n          selectedProfileId === profile.id &&\r\n          selectedProfileType === profile.def_type\r\n        \"\r\n      >\r\n        <span\r\n          *ngIf=\"isDiveApp\"\r\n          class=\"name\"\r\n          [data]=\"profile.name\"\r\n          markdown\r\n        ></span>\r\n        <span *ngIf=\"!isDiveApp\" class=\"name\" [innerHTML]=\"profile.name\"></span>\r\n        <span>{{ profile.sub_name }}</span>\r\n      </div>\r\n    </mat-list-item>\r\n    <mat-list-item *ngIf=\"profilesArr.length === 0\"\r\n      >Keine Suchergebnisse vorhanden\r\n    </mat-list-item>\r\n  </ng-container>\r\n</mat-list>\r\n","export class LoadProfiles {\r\n  static readonly type = '[Profile] LoadProfiles';\r\n}\r\n\r\nexport class LoadDefinition {\r\n  static readonly type = '[Profile] LoadDefinition';\r\n}\r\n\r\nexport class LoadDefinitionSwagger {\r\n  static readonly type = '[Profile] LoadDefinitionSwagger';\r\n}\r\n","export interface ProfilePropertyBase {\r\n  key: string;\r\n  required: boolean;\r\n  title: string;\r\n}\r\n\r\nexport interface ProfilePropertySimple extends ProfilePropertyBase {\r\n  // all custom types (mdstring, ...) can be retrieved from the property format (schema)\r\n  type:\r\n    | ProfilePropertyType.String\r\n    | ProfilePropertyType.Integer\r\n    | ProfilePropertyType.Boolean\r\n    | ProfilePropertyType.List\r\n    | ProfilePropertyType.Mdstring\r\n    | ProfilePropertyType.Colstring;\r\n}\r\n\r\nexport interface ProfilePropertyGroup extends ProfilePropertyBase {\r\n  type: ProfilePropertyType.Group;\r\n  properties: ProfileProperty[];\r\n}\r\n\r\nexport enum ProfilePropertyType {\r\n  String,\r\n  Integer,\r\n  Boolean,\r\n  List,\r\n  Mdstring,\r\n  Colstring,\r\n  Group,\r\n}\r\n\r\nexport interface MultiProfiles {\r\n  name: string | undefined;\r\n  properties: ProfileProperty[];\r\n}\r\n\r\nexport type ProfileProperty = ProfilePropertySimple | ProfilePropertyGroup;\r\n","import { Inject, Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { SOLID_CORE_CONFIG, SolidCoreConfig } from '@zentrumnawi/solid-core';\r\nimport { ParameterType, Schema, Spec } from 'swagger-schema-official';\r\nimport { OpenApi, OpenApiReference, OpenApiSchema } from 'openapi-v3';\r\nimport { map } from 'rxjs/operators';\r\nimport {\r\n  ProfileProperty,\r\n  ProfilePropertyType,\r\n} from '../state/profile-definition.model';\r\n\r\nconst ignoredProperties = [\r\n  'id',\r\n  'name',\r\n  'sub_name',\r\n  'short_description',\r\n  'tree_node',\r\n  'photographs',\r\n  'media_objects',\r\n];\r\n\r\n@Injectable()\r\nexport class ProfileDefinitionService {\r\n  constructor(\r\n    private http: HttpClient,\r\n    @Inject(SOLID_CORE_CONFIG) private _config: SolidCoreConfig\r\n  ) {}\r\n\r\n  //OpenAPI 3.0\r\n  public loadDefinitions() {\r\n    //prevent Dive calling OpenAPI 3.0\r\n    //so we don't have duplicated data in profile\r\n    if (this._config.appName === 'Div-e') {\r\n      return;\r\n    }\r\n    return this.http.get<OpenApi>(`${this._config.apiUrl}/api/schema`).pipe(\r\n      map((openapi) => {\r\n        const schemas = openapi.components?.schemas || {};\r\n        const treeNode = schemas.TreeNode as OpenApiSchema;\r\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n        const properties = treeNode.properties!;\r\n\r\n        const listOfGroups = [];\r\n\r\n        for (const p in properties) {\r\n          if (p.search('related') !== -1) {\r\n            const related = properties[p] as OpenApiSchema;\r\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n            const ref = (related!.items! as OpenApiReference).$ref;\r\n            listOfGroups.push({\r\n              name: ref?.split('/')[3].toLowerCase(),\r\n              properties: this.definitionToGroup(openapi, ref),\r\n            });\r\n          }\r\n        }\r\n        return listOfGroups;\r\n      })\r\n    );\r\n  }\r\n\r\n  public resolveRef(swagger: OpenApi, $ref: string | undefined) {\r\n    if (!$ref) {\r\n      throw new Error('Invalid swaggerfile');\r\n    }\r\n    const parts = $ref.split('/');\r\n    if (\r\n      parts.length !== 4 ||\r\n      parts[0] !== '#' ||\r\n      parts[1] !== 'components' ||\r\n      parts[2] !== 'schemas'\r\n    ) {\r\n      throw new Error('Invalid swaggerfile');\r\n    }\r\n    const def =\r\n      swagger.components?.schemas && swagger.components?.schemas[parts[3]]\r\n        ? swagger.components?.schemas[parts[3]]\r\n        : null;\r\n    if (!def) {\r\n      throw new Error('Invalid swaggerfile');\r\n    }\r\n    return def;\r\n  }\r\n\r\n  public definitionToGroup(swagger: OpenApi, $ref: string | undefined) {\r\n    const groupSchema = this.resolveRef(swagger, $ref) as OpenApiSchema;\r\n    const properties: ProfileProperty[] = [];\r\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n    for (const [key, value] of Object.entries(groupSchema.properties!)) {\r\n      if (ignoredProperties.includes(key)) {\r\n        continue;\r\n      }\r\n      if ((value as OpenApiReference).$ref) {\r\n        const schema = this.resolveRef(\r\n          swagger,\r\n          (value as OpenApiReference).$ref\r\n        );\r\n        properties.push({\r\n          key,\r\n          required: groupSchema.required?.includes(key) || false,\r\n          type: ProfilePropertyType.Group,\r\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n          title: (schema as OpenApiSchema).title!,\r\n          properties: this.definitionToGroup(\r\n            swagger,\r\n            (value as OpenApiReference).$ref\r\n          ),\r\n        });\r\n      } else {\r\n        const pp = this.schemaToProperty(\r\n          groupSchema,\r\n          key,\r\n          value as OpenApiSchema\r\n        );\r\n        if (pp) {\r\n          properties.push(pp);\r\n        }\r\n      }\r\n    }\r\n    return properties;\r\n  }\r\n\r\n  public schemaToProperty(\r\n    parent: OpenApiSchema,\r\n    key: string,\r\n    schema: OpenApiSchema\r\n  ): ProfileProperty | null {\r\n    // TODO: Get enum field type from $ref in oneOf[0]\r\n    if (schema.oneOf || schema.allOf) (schema.type as ParameterType) = 'string'; // workaround for enums\r\n\r\n    // format is used to declare custom types\r\n    const { title, type, format } = schema;\r\n    const required = parent.required?.includes(key) ?? false;\r\n\r\n    let formatType = ProfilePropertyType.String;\r\n    switch (format?.toString()) {\r\n      case 'mdstring':\r\n        formatType = ProfilePropertyType.Mdstring;\r\n        break;\r\n      case 'colstring':\r\n        formatType = ProfilePropertyType.Colstring;\r\n        break;\r\n    }\r\n\r\n    switch (type as ParameterType) {\r\n      case 'string':\r\n        return {\r\n          key: key,\r\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n          title: title!,\r\n          required,\r\n          type: format ? formatType : ProfilePropertyType.String,\r\n        };\r\n      case 'array':\r\n        if (Array.isArray(schema.items)) {\r\n          throw new Error('Not implemented');\r\n        }\r\n        return {\r\n          key: key,\r\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n          title: title!,\r\n          required,\r\n          type: format ? formatType : ProfilePropertyType.List,\r\n        };\r\n      case 'integer':\r\n        return {\r\n          key,\r\n          required,\r\n          type: format ? formatType : ProfilePropertyType.Integer,\r\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n          title: title!,\r\n        };\r\n      case 'boolean':\r\n        return {\r\n          key,\r\n          required,\r\n          type: ProfilePropertyType.Boolean,\r\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n          title: title!,\r\n        };\r\n      case 'object':\r\n      case 'number':\r\n      case 'file':\r\n        throw new Error(`Type not implemented ${type}`);\r\n      default:\r\n        return null;\r\n    }\r\n  }\r\n\r\n  //OpenAPI Version 2.0\r\n  public loadDefinitions_swagger() {\r\n    //prevent GeoMat, WABE, PLANTY & AIS from calling OpenAPI 2.0\r\n    //so we don't have duplicated data in profile\r\n    if (\r\n      this._config.appName === 'GeoMat' ||\r\n      this._config.appName === 'WABE' ||\r\n      this._config.appName === 'AIS' ||\r\n      this._config.appName === 'PLANTY2Learn'\r\n    ) {\r\n      return;\r\n    }\r\n    return this.http\r\n      .get<Spec>(`${this._config.apiUrl}/swagger?format=openapi`)\r\n      .pipe(\r\n        map((swagger) => {\r\n          const definitions = swagger.definitions || {};\r\n          const properties = definitions.TreeNode.properties;\r\n          const listOfGroups = [];\r\n\r\n          for (const p in properties) {\r\n            if (p.search('related') !== -1) {\r\n              const ref = (properties[p].items as Schema).$ref;\r\n              // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n              listOfGroups.push({\r\n                name: ref?.split('/')[2].toLowerCase(),\r\n                properties: this.definitionToGroup_swagger(swagger, ref),\r\n              });\r\n            }\r\n          }\r\n\r\n          return listOfGroups;\r\n        })\r\n      );\r\n  }\r\n\r\n  public resolveRef_swagger(swagger: Spec, $ref: string | undefined) {\r\n    if (!$ref) {\r\n      throw new Error('Invalid swaggerfile');\r\n    }\r\n    const parts = $ref.split('/');\r\n    if (parts.length !== 3 || parts[0] !== '#' || parts[1] !== 'definitions') {\r\n      throw new Error('Invalid swaggerfile');\r\n    }\r\n    const def =\r\n      swagger.definitions && swagger.definitions[parts[2]]\r\n        ? swagger.definitions[parts[2]]\r\n        : null;\r\n    if (!def) {\r\n      throw new Error('Invalid swaggerfile');\r\n    }\r\n    return def;\r\n  }\r\n\r\n  public definitionToGroup_swagger(swagger: Spec, $ref: string | undefined) {\r\n    const groupSchema = this.resolveRef_swagger(swagger, $ref);\r\n    const properties: ProfileProperty[] = [];\r\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n    for (const [key, value] of Object.entries(groupSchema.properties!)) {\r\n      if (ignoredProperties.includes(key)) {\r\n        continue;\r\n      }\r\n      if (value.$ref) {\r\n        const schema = this.resolveRef_swagger(swagger, value.$ref);\r\n        properties.push({\r\n          key,\r\n          required: groupSchema.required?.includes(key) || false,\r\n          type: ProfilePropertyType.Group,\r\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n          title: schema.title!,\r\n          properties: this.definitionToGroup_swagger(swagger, value.$ref),\r\n        });\r\n      } else {\r\n        const pp = this.schemaToProperty_swagger(groupSchema, key, value);\r\n        if (pp) {\r\n          properties.push(pp);\r\n        }\r\n      }\r\n    }\r\n    return properties;\r\n  }\r\n\r\n  public schemaToProperty_swagger(\r\n    parent: Schema,\r\n    key: string,\r\n    schema: Schema\r\n  ): ProfileProperty | null {\r\n    const { title, type } = schema;\r\n    const required = parent.required?.includes(key) ?? false;\r\n    switch (type as ParameterType | 'colstring' | 'mdstring') {\r\n      case 'string':\r\n        return {\r\n          key: key,\r\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n          title: title!,\r\n          required,\r\n          type: ProfilePropertyType.String,\r\n        };\r\n      case 'array':\r\n        if (Array.isArray(schema.items)) {\r\n          throw new Error('Not implemented');\r\n        }\r\n        return {\r\n          key: key,\r\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n          title: title!,\r\n          required,\r\n          type: ProfilePropertyType.List,\r\n        };\r\n      case 'integer':\r\n        return {\r\n          key,\r\n          required,\r\n          type: ProfilePropertyType.Integer,\r\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n          title: title!,\r\n        };\r\n      case 'boolean':\r\n        return {\r\n          key,\r\n          required,\r\n          type: ProfilePropertyType.Boolean,\r\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n          title: title!,\r\n        };\r\n      case 'mdstring':\r\n        return {\r\n          key,\r\n          required,\r\n          type: ProfilePropertyType.Mdstring,\r\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n          title: title!,\r\n        };\r\n      case 'colstring':\r\n        return {\r\n          key,\r\n          required,\r\n          type: ProfilePropertyType.Colstring,\r\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n          title: title!,\r\n        };\r\n      case 'object':\r\n      case 'number':\r\n      case 'file':\r\n        throw new Error(`Type not implemented ${type}`);\r\n      default:\r\n        return null;\r\n    }\r\n  }\r\n}\r\n","import { Action, Selector, State, StateContext } from '@ngxs/store';\r\nimport { Profile, TreeNode, TreeNodeApi } from './profile.model';\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport {\r\n  SOLID_CORE_CONFIG,\r\n  SolidCoreConfig,\r\n  MediaModel,\r\n  MediaObjectModel,\r\n} from '@zentrumnawi/solid-core';\r\nimport {\r\n  LoadDefinition,\r\n  LoadDefinitionSwagger,\r\n  LoadProfiles,\r\n} from './profile.actions';\r\nimport { map, tap } from 'rxjs/operators';\r\nimport { ProfileDefinitionService } from '../services/profile-definition.service';\r\nimport { MultiProfiles } from './profile-definition.model';\r\n\r\nexport interface ProfileStateModel {\r\n  profiles: Profile[];\r\n  nodes: TreeNode[];\r\n  definition: MultiProfiles[];\r\n  definition_swagger: MultiProfiles[];\r\n}\r\n\r\n@State<ProfileStateModel>({\r\n  name: 'profile',\r\n  defaults: {\r\n    profiles: [],\r\n    nodes: [],\r\n    definition: [],\r\n    definition_swagger: [],\r\n  },\r\n})\r\n@Injectable()\r\nexport class ProfileState {\r\n  constructor(\r\n    private http: HttpClient,\r\n    @Inject(SOLID_CORE_CONFIG) private _config: SolidCoreConfig,\r\n    private _defService: ProfileDefinitionService\r\n  ) {}\r\n\r\n  @Selector()\r\n  static selectProfileAndNode(\r\n    state: ProfileStateModel\r\n  ): (\r\n    profileId?: number,\r\n    profileType?: string\r\n  ) => { profile: Profile; node: TreeNode } | null {\r\n    // This redundant variable is required\r\n    // https://github.com/ng-packagr/ng-packagr/issues/696\r\n    const fn = function (profileId?: number, profileType?: string) {\r\n      if (!profileId) {\r\n        return null;\r\n      }\r\n      for (const node of state.nodes) {\r\n        const childSearch = profileType\r\n          ? ProfileState.findProfileDeep(node, profileId, profileType)\r\n          : ProfileState.findProfileDeep(node, profileId); // temporary for PLANTY\r\n        if (childSearch !== null) {\r\n          return childSearch;\r\n        }\r\n      }\r\n      return null;\r\n    };\r\n    return fn;\r\n  }\r\n\r\n  @Selector()\r\n  static selectProfile(state: ProfileStateModel) {\r\n    return state.profiles;\r\n  }\r\n\r\n  @Selector()\r\n  static selectDefinition(state: ProfileStateModel): MultiProfiles[] {\r\n    return state.definition;\r\n  }\r\n\r\n  @Selector()\r\n  static selectDefinition_swagger(state: ProfileStateModel): MultiProfiles[] {\r\n    return state.definition_swagger;\r\n  }\r\n\r\n  @Selector()\r\n  static selectTree(state: ProfileStateModel): TreeNode[] {\r\n    return [...state.nodes];\r\n  }\r\n\r\n  @Selector()\r\n  static selectFlat(state: ProfileStateModel): Profile[] {\r\n    return [...state.profiles];\r\n  }\r\n\r\n  private static findProfileDeep(\r\n    node: TreeNode,\r\n    profileId: number,\r\n    profileType?: string\r\n  ): { profile: Profile; node: TreeNode } | null {\r\n    const profile = profileType\r\n      ? node.profiles.find(\r\n          (p) => p.id === profileId && p.def_type === profileType\r\n        )\r\n      : node.profiles.find((p) => p.id === profileId); // temporary for PLANTY\r\n    if (profile) {\r\n      return {\r\n        profile,\r\n        node,\r\n      };\r\n    }\r\n    for (const leafNode of node.children) {\r\n      const childSearch = profileType\r\n        ? ProfileState.findProfileDeep(leafNode, profileId, profileType)\r\n        : ProfileState.findProfileDeep(leafNode, profileId); // temporary for PLANTY\r\n      if (childSearch !== null) {\r\n        return childSearch;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // Preliminary Workaround for GeoMat to merge unknown rock compounds with minerals from geomat db\r\n  private static composeMineralCompounds(\r\n    compounds: string,\r\n    geoMatContent: object[]\r\n  ) {\r\n    const compundArray = compounds\r\n      .split(', ')\r\n      .splice(-geoMatContent.length)\r\n      .map((value) => ({\r\n        id: null,\r\n        name: value,\r\n        sub_name: '',\r\n      }));\r\n    const cmp = [...compundArray, ...geoMatContent];\r\n    return cmp;\r\n  }\r\n\r\n  @Action(LoadProfiles)\r\n  public set(ctx: StateContext<ProfileStateModel>) {\r\n    if (ctx.getState().profiles.length !== 0) {\r\n      return;\r\n    }\r\n    return this.http\r\n      .get<TreeNodeApi[]>(`${this._config.apiUrl}/profiles/`)\r\n      .pipe(\r\n        map((response) => {\r\n          const mapit = (input: TreeNodeApi[]): TreeNode[] => {\r\n            return input.map((node: any) => {\r\n              const multi_profiles = Object.entries(node)\r\n                .filter((property: any) => {\r\n                  if (\r\n                    property[0].search('related') !== -1 &&\r\n                    node[property[0]].length !== 0\r\n                  )\r\n                    return property;\r\n                })\r\n                .map((profiles: any) => {\r\n                  return profiles[1].map((profile: any) => {\r\n                    const profileName = profile.general_information?.name;\r\n                    const profileSubName =\r\n                      profile.general_information?.sub_name;\r\n                    return {\r\n                      ...profile,\r\n                      name: profileName ? profileName : 'Kein Name vorhanden',\r\n                      sub_name: profileSubName,\r\n                      type: 'profile',\r\n                      mediaObjects: profile.media_objects\r\n                        .sort(\r\n                          (a: MediaObjectModel, b: MediaObjectModel) =>\r\n                            a.profile_position - b.profile_position\r\n                        )\r\n                        .map((m: MediaObjectModel) => new MediaModel(m)),\r\n                      def_type: profiles[0].split('_')[0],\r\n                    };\r\n                  });\r\n                });\r\n\r\n              return {\r\n                type: 'category',\r\n                name: node.name,\r\n                info: node.info,\r\n                children: mapit(node.children),\r\n                profiles: node.profiles\r\n                  ? node.profiles.map((profile: any) => ({\r\n                      ...profile,\r\n                      type: 'profile',\r\n                      mediaObjects: profile.media_objects.map(\r\n                        (m: MediaObjectModel) => new MediaModel(m)\r\n                      ),\r\n                    }))\r\n                  : multi_profiles[0]\r\n                  ? multi_profiles[0]\r\n                  : [],\r\n              };\r\n            });\r\n          };\r\n          return mapit(response);\r\n        }),\r\n        tap((nodes) => {\r\n          const mapIt = (result: Profile[], value: TreeNode[]) => {\r\n            for (const v of value) {\r\n              result.push(...mapIt([], v.children));\r\n              result.push(...v.profiles);\r\n            }\r\n            return result;\r\n          };\r\n          const flat = mapIt([], nodes);\r\n          ctx.patchState({ nodes, profiles: flat });\r\n        })\r\n      );\r\n  }\r\n\r\n  @Action(LoadDefinition)\r\n  public loadDefinition(ctx: StateContext<ProfileStateModel>) {\r\n    if (ctx.getState().definition.length !== 0) {\r\n      return;\r\n    }\r\n    return this._defService.loadDefinitions()?.pipe(\r\n      tap((definition: MultiProfiles[]) => {\r\n        ctx.patchState({\r\n          definition,\r\n        });\r\n      })\r\n    );\r\n  }\r\n\r\n  @Action(LoadDefinitionSwagger)\r\n  public loadDefinitionSwagger(ctx: StateContext<ProfileStateModel>) {\r\n    if (ctx.getState().definition_swagger.length !== 0) {\r\n      return;\r\n    }\r\n\r\n    return this._defService.loadDefinitions_swagger()?.pipe(\r\n      tap((definition_swagger: MultiProfiles[]) => {\r\n        ctx.patchState({\r\n          definition_swagger,\r\n        });\r\n      })\r\n    );\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ViewChild,\r\n  ElementRef,\r\n  EventEmitter,\r\n  OnInit,\r\n  OnDestroy,\r\n  Output,\r\n  Inject,\r\n} from '@angular/core';\r\nimport { Profile, TreeNode } from '../../state/profile.model';\r\nimport { ProfileState } from '../../state/profile.state';\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport { Select } from '@ngxs/store';\r\nimport {\r\n  MultiProfiles,\r\n  ProfileProperty,\r\n  ProfilePropertyType,\r\n} from '../../state/profile-definition.model';\r\nimport { MatExpansionPanel } from '@angular/material/expansion';\r\nimport {\r\n  MediaModel,\r\n  SOLID_CORE_CONFIG,\r\n  SolidCoreConfig,\r\n} from '@zentrumnawi/solid-core';\r\n\r\n@Component({\r\n  selector: 'solid-profile-detail',\r\n  templateUrl: './detail.component.html',\r\n  styleUrls: ['./detail.component.scss'],\r\n})\r\nexport class DetailComponent implements OnInit, OnDestroy {\r\n  @ViewChild('expansionPanel', { static: false, read: MatExpansionPanel })\r\n  expansionPanel?: MatExpansionPanel;\r\n  @ViewChild('thumbnails') thumbnails: ElementRef | undefined;\r\n  public PropertyTypes = ProfilePropertyType;\r\n  //Load definitions from OpenAPI 3.0\r\n  @Select(ProfileState.selectDefinition)\r\n  $ProfileDefinitions!: Observable<MultiProfiles[]>;\r\n  //Load definitions from OpenAPI 2.0\r\n  @Select(ProfileState.selectDefinition_swagger)\r\n  $ProfileDefinition_Swagger!: Observable<MultiProfiles[]>;\r\n  @Input() public node!: TreeNode;\r\n  @Output() selectProfile = new EventEmitter<\r\n    number | { id: number; type: string }\r\n  >();\r\n  public ImageLoaded = [false];\r\n  public ImageSelected = 0;\r\n  public ImageIndex = 0;\r\n  public ImageEndIndex = 0;\r\n  SWIPE_ACTION = { LEFT: 'swipeleft', RIGHT: 'swiperight' };\r\n  public hasDialog!: boolean;\r\n  private _profile!: Profile;\r\n  public hasDescription!: boolean;\r\n  public hasDescriptionToggle = false;\r\n  public MediaObjectsOnlyImages!: MediaModel[];\r\n\r\n  public definitions: MultiProfiles[] = [];\r\n  public definitions_swagger: MultiProfiles[] = [];\r\n\r\n  public profileDefinitionSub!: Subscription;\r\n  public profileDefinitionSwaggerSub!: Subscription;\r\n\r\n  //public shouldExpandAllgemein = this.config.expandAllgemein;\r\n  public shouldExpandAllgemein!: boolean;\r\n\r\n  public shouldExpandCategories = [\r\n    'allgemein',\r\n    'informatives',\r\n    'general information',\r\n  ];\r\n\r\n  public get profile() {\r\n    return this._profile;\r\n  }\r\n\r\n  @Input()\r\n  public set profile(profile: Profile) {\r\n    this._profile = profile;\r\n    this.ImageLoaded = profile.mediaObjects.map((_) => false);\r\n    if (this.shouldExpandAllgemein) {\r\n      this.expansionPanel?.open(); // expand the category-panel even if it was closed in other profile\r\n    }\r\n    this.MediaObjectsOnlyImages = this.profile.mediaObjects.filter(\r\n      (x) => x.mediaType === 'image'\r\n    );\r\n    this.onImageSelect(0);\r\n  }\r\n\r\n  constructor(@Inject(SOLID_CORE_CONFIG) public config: SolidCoreConfig) {}\r\n\r\n  ngOnInit(): void {\r\n    this.shouldExpandAllgemein = this.config.expandAllgemein;\r\n    this.profileDefinitionSwaggerSub =\r\n      this.$ProfileDefinition_Swagger.subscribe((defs) => {\r\n        this.definitions_swagger = defs;\r\n      });\r\n\r\n    this.profileDefinitionSub = this.$ProfileDefinitions.subscribe((defs) => {\r\n      this.definitions = defs;\r\n    });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.profileDefinitionSwaggerSub.unsubscribe();\r\n    this.profileDefinitionSub.unsubscribe();\r\n  }\r\n\r\n  public getProperties(profile: Profile) {\r\n    const generalInfoKey = 'general_information';\r\n\r\n    const def_property = this.definitions.filter(\r\n      (def) => def.name === profile.def_type\r\n    )[0].properties;\r\n\r\n    const generalInfo = def_property.find(\r\n      (prop) => prop.key === generalInfoKey\r\n    );\r\n\r\n    if (generalInfo) {\r\n      const filter_def = def_property.filter(\r\n        (prop) => prop.key !== generalInfoKey\r\n      );\r\n      filter_def.unshift(generalInfo);\r\n      return filter_def;\r\n    } else {\r\n      return def_property;\r\n    }\r\n  }\r\n\r\n  public onImageLoaded(index: number) {\r\n    this.ImageLoaded[index] = true;\r\n  }\r\n\r\n  public onImageSelect(index: number) {\r\n    this.ImageSelected = index;\r\n    this.ImageIndex = this.MediaObjectsOnlyImages.findIndex(\r\n      (media) => media.getProfilePosition - 1 === index\r\n    );\r\n    if (this.profile.mediaObjects.length !== 0) {\r\n      if (this.profile.mediaObjects[index].mediaType === 'audio') {\r\n        this.hasDialog = false;\r\n        this.hasDescription = false;\r\n        this.hasDescriptionToggle = true;\r\n      } else if (this.profile.mediaObjects[index].mediaType === 'video') {\r\n        this.hasDialog = false;\r\n        this.hasDescription = true;\r\n        this.hasDescriptionToggle = false;\r\n      } else {\r\n        this.hasDialog = true;\r\n        this.hasDescriptionToggle = false;\r\n        this.hasDescription = false;\r\n      }\r\n    }\r\n  }\r\n\r\n  public shouldDisplayProperty(property: ProfileProperty, profile_obj: any) {\r\n    if (property.required) {\r\n      return true;\r\n    }\r\n    const val =\r\n      profile_obj !== null &&\r\n      profile_obj !== undefined &&\r\n      property.key in profile_obj\r\n        ? profile_obj[property.key]\r\n        : undefined;\r\n    switch (property.type) {\r\n      case ProfilePropertyType.List:\r\n        return Array.isArray(val) && val.length > 0;\r\n      case ProfilePropertyType.Group:\r\n      case ProfilePropertyType.String:\r\n      case ProfilePropertyType.Integer:\r\n      case ProfilePropertyType.Boolean:\r\n      case ProfilePropertyType.Mdstring:\r\n      case ProfilePropertyType.Colstring:\r\n        return val !== undefined && val !== '';\r\n    }\r\n  }\r\n\r\n  public swipe(currentIndex: number, action: string = this.SWIPE_ACTION.RIGHT) {\r\n    if (currentIndex > this.profile.mediaObjects.length || currentIndex < 0) {\r\n      return;\r\n    }\r\n    if (action === this.SWIPE_ACTION.LEFT) {\r\n      const isLast = currentIndex === this.profile.mediaObjects.length - 1;\r\n      this.ImageSelected = isLast ? 0 : currentIndex + 1;\r\n    }\r\n    if (action === this.SWIPE_ACTION.RIGHT) {\r\n      const isFirst = currentIndex === 0;\r\n      this.ImageSelected = isFirst\r\n        ? this.profile.mediaObjects.length - 1\r\n        : currentIndex - 1;\r\n    }\r\n    this.thumbnails?.nativeElement.children[this.ImageSelected].scrollIntoView({\r\n      behavior: 'smooth',\r\n      block: 'nearest',\r\n    });\r\n  }\r\n  handleNextDialogEvent() {\r\n    if (this.ImageIndex < this.MediaObjectsOnlyImages.length - 1) {\r\n      this.ImageIndex++;\r\n    } else {\r\n      this.ImageIndex = 0;\r\n    }\r\n    this.ImageSelected =\r\n      this.MediaObjectsOnlyImages[this.ImageIndex].getProfilePosition - 1;\r\n  }\r\n\r\n  handlePrevDialogEvent() {\r\n    if (this.ImageIndex > 0) {\r\n      this.ImageIndex--;\r\n    } else {\r\n      this.ImageIndex = this.MediaObjectsOnlyImages.length - 1;\r\n    }\r\n    this.ImageSelected =\r\n      this.MediaObjectsOnlyImages[this.ImageIndex].getProfilePosition - 1;\r\n  }\r\n\r\n  getClass(level: number, type: string): string {\r\n    return `property-${type}-level-${level}`;\r\n  }\r\n\r\n  shouldExpand(title: string) {\r\n    return (\r\n      this.shouldExpandAllgemein &&\r\n      this.shouldExpandCategories.includes(title.toLocaleLowerCase())\r\n    );\r\n  }\r\n}\r\n","<ng-container>\r\n  <div id=\"profile-short-description\" *ngIf=\"profile.short_description\">\r\n    <div class=\"facts-title\">\r\n      <div>Kurzbeschreibung</div>\r\n    </div>\r\n    <p class=\"facts-body\" markdown [data]=\"profile.short_description\"></p>\r\n  </div>\r\n  <solid-core-media\r\n    *ngIf=\"profile.mediaObjects.length > 0; else noImage\"\r\n    id=\"profile-media-container\"\r\n    (swipeleft)=\"swipe(ImageSelected, $event.type)\"\r\n    (swiperight)=\"swipe(ImageSelected, $event.type)\"\r\n    [mediaObject]=\"profile.mediaObjects[ImageSelected]\"\r\n    [name]=\"profile.name\"\r\n    [hasDialog]=\"hasDialog\"\r\n    [hasDescription]=\"hasDescription\"\r\n    [hasDescriptionToggle]=\"hasDescriptionToggle\"\r\n    (NextDialogEmitter)=\"handleNextDialogEvent()\"\r\n    (PrevDialogEmitter)=\"handlePrevDialogEvent()\"\r\n    [hasNavigationInDialog]=\"MediaObjectsOnlyImages.length > 1\"\r\n  ></solid-core-media>\r\n  <ng-template #noImage>\r\n    <div class=\"no-img-container\" id=\"profile-media-container\">\r\n      <img class=\"no-img\" src=\"assets/profile/no_image.svg\" />\r\n    </div>\r\n  </ng-template>\r\n  <div class=\"scroll-container\">\r\n    <div\r\n      *ngIf=\"profile.mediaObjects.length > 1\"\r\n      class=\"img-toolbar\"\r\n      #thumbnails\r\n    >\r\n      <ng-container\r\n        *ngFor=\"let mediaObject of profile.mediaObjects; let i = index\"\r\n      >\r\n        <img\r\n          *ngIf=\"mediaObject.mediaType === 'image'\"\r\n          (click)=\"onImageSelect(i)\"\r\n          [class.not-selected]=\"ImageSelected !== i\"\r\n          [src]=\"mediaObject.getRawImage('thumbnail')\"\r\n          [alt]=\"mediaObject.alt\"\r\n        />\r\n        <img\r\n          *ngIf=\"mediaObject.mediaType === 'video'\"\r\n          (click)=\"onImageSelect(i)\"\r\n          [class.not-selected]=\"ImageSelected !== i\"\r\n          [src]=\"'assets/profile/video.svg'\"\r\n          [alt]=\"mediaObject.alt\"\r\n        />\r\n        <img\r\n          *ngIf=\"mediaObject.mediaType === 'audio'\"\r\n          (click)=\"onImageSelect(i)\"\r\n          [class.not-selected]=\"ImageSelected !== i\"\r\n          [src]=\"'assets/profile/audio.svg'\"\r\n          [alt]=\"mediaObject.alt\"\r\n        />\r\n      </ng-container>\r\n    </div>\r\n  </div>\r\n</ng-container>\r\n\r\n<!-- Load definitions from OpenAPI 2.0 -->\r\n<ng-container *ngIf=\"definitions_swagger.length !== 0\">\r\n  <mat-accordion id=\"profile-detail-info\" multi=\"false\" displayMode=\"flat\">\r\n    <mat-expansion-panel>\r\n      <mat-expansion-panel-header>\r\n        <mat-panel-title>Allgemein</mat-panel-title>\r\n      </mat-expansion-panel-header>\r\n      <ng-container *ngFor=\"let property of getProperties(profile)\">\r\n        <ng-container *ngIf=\"property.type !== PropertyTypes.Group\">\r\n          <ng-container\r\n            *ngTemplateOutlet=\"\r\n              propertyTemplate_swagger;\r\n              context: { profile_obj: profile, property: property }\r\n            \"\r\n          ></ng-container>\r\n        </ng-container>\r\n      </ng-container>\r\n    </mat-expansion-panel>\r\n    <ng-container *ngFor=\"let property of getProperties(profile)\">\r\n      <mat-expansion-panel\r\n        *ngIf=\"\r\n          property.type === PropertyTypes.Group &&\r\n          (property.required || profile[property.key])\r\n        \"\r\n      >\r\n        <mat-expansion-panel-header>\r\n          <mat-panel-title>{{\r\n            property.title ? property.title : property.key\r\n          }}</mat-panel-title>\r\n        </mat-expansion-panel-header>\r\n        <ng-container *ngFor=\"let childProperty of property.properties\">\r\n          <ng-container\r\n            *ngTemplateOutlet=\"\r\n              propertyTemplate_swagger;\r\n              context: {\r\n                profile_obj: profile[property.key],\r\n                property: childProperty\r\n              }\r\n            \"\r\n          ></ng-container>\r\n        </ng-container>\r\n      </mat-expansion-panel>\r\n    </ng-container>\r\n  </mat-accordion>\r\n</ng-container>\r\n<ng-template\r\n  #propertyTemplate_swagger\r\n  let-profile_obj=\"profile_obj\"\r\n  let-property=\"property\"\r\n>\r\n  <ng-container\r\n    *ngIf=\"shouldDisplayProperty(property, profile_obj)\"\r\n    [ngSwitch]=\"property.type\"\r\n  >\r\n    <p class=\"heading\">{{ property.title ? property.title : property.key }}</p>\r\n    <ng-container *ngSwitchCase=\"PropertyTypes.String\">\r\n      <p\r\n        *ngIf=\"\r\n          !(profile_obj[property.key].indexOf('http') === 0);\r\n          else httpString\r\n        \"\r\n      >\r\n        {{ profile_obj[property.key] }}\r\n      </p>\r\n      <ng-template #httpString>\r\n        <p>\r\n          <a [href]=\"profile_obj[property.key]\" target=\"_blank\">\r\n            {{ profile_obj[property.key] }}\r\n          </a>\r\n        </p>\r\n      </ng-template>\r\n    </ng-container>\r\n    <p *ngSwitchCase=\"PropertyTypes.Integer\">\r\n      {{ profile_obj[property.key] }}\r\n    </p>\r\n    <p *ngSwitchCase=\"PropertyTypes.Boolean\">\r\n      {{ profile_obj[property.key] }}\r\n    </p>\r\n    <p\r\n      *ngSwitchCase=\"PropertyTypes.Mdstring\"\r\n      markdown\r\n      [data]=\"profile_obj[property.key]\"\r\n    ></p>\r\n    <ng-container *ngSwitchCase=\"PropertyTypes.Colstring\">\r\n      <p\r\n        *ngIf=\"profile_obj[property.key].indexOf('#') === 0; else notColString\"\r\n        id=\"normal_color\"\r\n        [style.background-color]=\"profile_obj[property.key]\"\r\n      ></p>\r\n      <ng-template #notColString>\r\n        <p>{{ profile_obj[property.key] }}</p>\r\n      </ng-template>\r\n    </ng-container>\r\n    <ng-container *ngSwitchCase=\"PropertyTypes.List\">\r\n      <p *ngFor=\"let val of profile_obj[property.key]\">{{ val }}</p>\r\n    </ng-container>\r\n  </ng-container>\r\n</ng-template>\r\n\r\n<!-- Load definitions from OpenAPI 3.0 -->\r\n<ng-container *ngIf=\"definitions.length !== 0\">\r\n  <mat-accordion id=\"profile-detail-info\" multi=\"false\" displayMode=\"flat\">\r\n    <ng-container *ngFor=\"let property of getProperties(profile)\">\r\n      <mat-expansion-panel\r\n        *ngIf=\"\r\n          property.type === PropertyTypes.Group &&\r\n          (property.required || profile[property.key])\r\n        \"\r\n        [expanded]=\"shouldExpand(property.title)\"\r\n        #expansionPanel\r\n      >\r\n        <mat-expansion-panel-header>\r\n          <mat-panel-title>{{\r\n            property.title ? property.title : property.key\r\n          }}</mat-panel-title>\r\n        </mat-expansion-panel-header>\r\n        <ng-container *ngFor=\"let childProperty of property.properties\">\r\n          <ng-container\r\n            *ngTemplateOutlet=\"\r\n              propertyTemplate;\r\n              context: {\r\n                profile_obj: profile[property.key],\r\n                property: childProperty,\r\n                level: 1\r\n              }\r\n            \"\r\n          ></ng-container>\r\n        </ng-container>\r\n      </mat-expansion-panel>\r\n    </ng-container>\r\n  </mat-accordion>\r\n</ng-container>\r\n<ng-template\r\n  #propertyTemplate\r\n  let-profile_obj=\"profile_obj\"\r\n  let-property=\"property\"\r\n  let-level=\"level\"\r\n>\r\n  <ng-container\r\n    *ngIf=\"shouldDisplayProperty(property, profile_obj)\"\r\n    [ngSwitch]=\"property.type\"\r\n  >\r\n    <p class=\"heading\" [ngClass]=\"getClass(level, 'heading')\">\r\n      {{ property.title ? property.title : property.key }}\r\n    </p>\r\n    <ng-container *ngSwitchCase=\"PropertyTypes.String\">\r\n      <p\r\n        *ngIf=\"\r\n          !(profile_obj[property.key]?.indexOf('http') === 0);\r\n          else httpString\r\n        \"\r\n        [ngClass]=\"getClass(level, 'content')\"\r\n      >\r\n        {{ profile_obj[property.key] }}\r\n      </p>\r\n      <ng-template #httpString>\r\n        <p [ngClass]=\"getClass(level, 'content')\">\r\n          <a [href]=\"profile_obj[property.key]\" target=\"_blank\">\r\n            {{ profile_obj[property.key] }}\r\n          </a>\r\n        </p>\r\n      </ng-template>\r\n    </ng-container>\r\n    <p\r\n      *ngSwitchCase=\"PropertyTypes.Integer\"\r\n      [ngClass]=\"getClass(level, 'content')\"\r\n    >\r\n      {{ profile_obj[property.key] }}\r\n    </p>\r\n    <p\r\n      *ngSwitchCase=\"PropertyTypes.Boolean\"\r\n      [ngClass]=\"getClass(level, 'content')\"\r\n    >\r\n      {{ profile_obj[property.key] }}\r\n    </p>\r\n    <p\r\n      *ngSwitchCase=\"PropertyTypes.Mdstring\"\r\n      [ngClass]=\"getClass(level, 'content')\"\r\n      markdown\r\n      [data]=\"profile_obj[property.key]\"\r\n    ></p>\r\n    <ng-container\r\n      *ngSwitchCase=\"PropertyTypes.Colstring\"\r\n      [ngClass]=\"getClass(level, 'content')\"\r\n    >\r\n      <p\r\n        *ngIf=\"profile_obj[property.key].indexOf('#') === 0; else notColString\"\r\n        id=\"normal_color\"\r\n        [style.background-color]=\"profile_obj[property.key]\"\r\n      ></p>\r\n      <ng-template #notColString>\r\n        <p [ngClass]=\"getClass(level, 'content')\">\r\n          {{ profile_obj[property.key] }}\r\n        </p>\r\n      </ng-template>\r\n    </ng-container>\r\n    <ng-container *ngSwitchCase=\"PropertyTypes.List\">\r\n      <ng-container\r\n        *ngIf=\"property.key !== 'mineraltype_compounds'; else compounds\"\r\n      >\r\n        <p\r\n          [ngClass]=\"getClass(level, 'content')\"\r\n          *ngFor=\"let val of profile_obj[property.key]\"\r\n        >\r\n          {{ val }}\r\n        </p>\r\n      </ng-container>\r\n      <ng-template #compounds>\r\n        <div *ngFor=\"let val of profile_obj[property.key]\">\r\n          <div\r\n            (click)=\"\r\n              val.id\r\n                ? selectProfile.emit({ id: val.id, type: 'mineraltype' })\r\n                : ''\r\n            \"\r\n            class=\"profileLink\"\r\n          >\r\n            {{ val.name }}\r\n            <span *ngIf=\"val.variety !== ''\">({{ val.variety }})</span>\r\n            <img *ngIf=\"val.id\" src=\"assets/icons/icon.svg\" />\r\n          </div>\r\n        </div>\r\n      </ng-template>\r\n    </ng-container>\r\n    <ng-container *ngSwitchCase=\"PropertyTypes.Group\">\r\n      <ng-container *ngFor=\"let childProperty of property.properties\">\r\n        <ng-container *ngIf=\"profile_obj\">\r\n          <ng-container\r\n            *ngTemplateOutlet=\"\r\n              propertyTemplate;\r\n              context: {\r\n                profile_obj: profile_obj[property.key],\r\n                property: childProperty,\r\n                level: level + 1\r\n              }\r\n            \"\r\n          ></ng-container>\r\n        </ng-container>\r\n      </ng-container>\r\n    </ng-container>\r\n  </ng-container>\r\n</ng-template>\r\n","import { InjectionToken } from '@angular/core';\r\n\r\nexport const SOLID_PROFILE_BASE_URL = new InjectionToken<string>(\r\n  'solid-profile-base-url'\r\n);\r\n","import { Inject, Injectable } from '@angular/core';\r\nimport { Dispatch } from '@ngxs-labs/dispatch-decorator';\r\nimport { Navigate } from '@ngxs/router-plugin';\r\nimport { SolidCoreConfig, SOLID_CORE_CONFIG } from '@zentrumnawi/solid-core';\r\nimport introJs from 'intro.js';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class IntroService {\r\n  introProfile: any;\r\n  location: string;\r\n\r\n  constructor(@Inject(SOLID_CORE_CONFIG) public config: SolidCoreConfig) {\r\n    this.location = config.profileTour.location.profileTree;\r\n  }\r\n\r\n  @Dispatch()\r\n  static async navigateTo(url: string) {\r\n    return new Navigate([url]);\r\n  }\r\n\r\n  profileTour(callback: (target: any) => void) {\r\n    this.introProfile = introJs();\r\n    this.introProfile\r\n      .setOptions({\r\n        tooltipClass: 'customTooltip',\r\n        steps: this.config.profileTour.steps,\r\n        exitOnOverlayClick: false,\r\n        hidePrev: true,\r\n        hideNext: true,\r\n      })\r\n      .onbeforechange(callback)\r\n      .start();\r\n    localStorage.setItem('hide_profile_tour', 'true');\r\n  }\r\n}\r\n","import {\r\n  AfterViewInit,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  Output,\r\n  QueryList,\r\n  ViewChildren,\r\n} from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Profile } from '../../state/profile.model';\r\nimport { SelectedDirective } from '../selected.directive';\r\n\r\n@Component({\r\n  selector: 'solid-profile-grid',\r\n  templateUrl: './grid.component.html',\r\n  styleUrls: ['./grid.component.scss'],\r\n})\r\nexport class GridComponent implements AfterViewInit {\r\n  @ViewChildren(SelectedDirective, { read: ElementRef })\r\n  public selectedElements!: QueryList<ElementRef>;\r\n  @Input() profiles!: Observable<Profile[]>;\r\n  @Input() selectedProfileId?: number;\r\n  @Input() selectedProfileType?: string;\r\n  @Output() selectProfile = new EventEmitter<\r\n    number | { id: number; type: string }\r\n  >();\r\n  @Input() isDiveApp = false;\r\n  @Output() selectProfileTitle = new EventEmitter<string>();\r\n  public hasControlPanel!: boolean;\r\n  public trackByFn(index: number, profile: Profile) {\r\n    return profile.id;\r\n  }\r\n\r\n  public ngAfterViewInit(): void {\r\n    this.selectedElements.changes.subscribe(() => {\r\n      this.scrollTo();\r\n    });\r\n    this.scrollTo();\r\n  }\r\n\r\n  public scrollTo() {\r\n    setTimeout(() => {\r\n      const card = this.selectedElements.first || null;\r\n      if (!card) {\r\n        return;\r\n      }\r\n      card.nativeElement.scrollIntoView({\r\n        behavior: 'smooth',\r\n        block: 'nearest',\r\n      });\r\n    });\r\n  }\r\n}\r\n","<ng-container\r\n  *ngFor=\"let profile of profiles | async; let i = index; trackBy: trackByFn\"\r\n>\r\n  <div\r\n    *ngIf=\"\r\n      selectedProfileId === profile.id &&\r\n      selectedProfileType === profile.def_type\r\n    \"\r\n    (click)=\"\r\n      selectProfile.emit({ id: profile.id, type: profile.def_type });\r\n      selectProfileTitle.emit(profile.name)\r\n    \"\r\n    class=\"card mat-elevation-z2 selected\"\r\n    solidProfileSelected\r\n  >\r\n    <ng-container\r\n      *ngTemplateOutlet=\"cardContent; context: { profile: profile }\"\r\n    ></ng-container>\r\n  </div>\r\n  <div\r\n    *ngIf=\"selectedProfileId !== profile.id\"\r\n    (click)=\"\r\n      selectProfile.emit({ id: profile.id, type: profile.def_type });\r\n      selectProfileTitle.emit(profile.name)\r\n    \"\r\n    class=\"card mat-elevation-z2\"\r\n  >\r\n    <ng-container\r\n      *ngTemplateOutlet=\"cardContent; context: { profile: profile }\"\r\n    ></ng-container>\r\n  </div>\r\n</ng-container>\r\n\r\n<ng-template #cardContent let-profile=\"profile\">\r\n  <div *ngIf=\"isDiveApp\" class=\"title\" [data]=\"profile.name\" markdown></div>\r\n  <div *ngIf=\"!isDiveApp\" class=\"title\" [innerHTML]=\"profile.name\"></div>\r\n  <div class=\"subtitle\">{{ profile.sub_name }}</div>\r\n  <solid-core-media\r\n    *ngIf=\"profile.mediaObjects.length > 0; else noImage\"\r\n    [mediaObject]=\"profile.mediaObjects[0]\"\r\n    [hasAttributions]=\"false\"\r\n    [hasDialog]=\"false\"\r\n    [view]=\"'grid'\"\r\n    [hasControlPanel]=\"false\"\r\n  ></solid-core-media>\r\n  <ng-template #noImage>\r\n    <img class=\"noimage\" src=\"assets/profile/no_thumbnail.svg\" />\r\n  </ng-template>\r\n</ng-template>\r\n","import {\r\n  AfterViewInit,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  HostListener,\r\n  Inject,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport { Select, Store } from '@ngxs/store';\r\nimport { ProfileState } from '../../state/profile.state';\r\nimport { TreeNode, Profile, ProfileShort } from '../../state/profile.model';\r\nimport { UntypedFormControl } from '@angular/forms';\r\nimport { Navigate } from '@ngxs/router-plugin';\r\nimport { map } from 'rxjs/operators';\r\nimport { BehaviorSubject, combineLatest, Observable, Subscription } from 'rxjs';\r\nimport { Dispatch } from '@ngxs-labs/dispatch-decorator';\r\nimport {\r\n  LoadDefinition,\r\n  LoadDefinitionSwagger,\r\n  LoadProfiles,\r\n} from '../../state/profile.actions';\r\nimport { SOLID_PROFILE_BASE_URL } from '../../base-url';\r\nimport { IntroService } from '../../services/intro.service';\r\nimport { SolidCoreConfig, SOLID_CORE_CONFIG } from '@zentrumnawi/solid-core';\r\nimport { ActivatedRoute, ParamMap, Router } from '@angular/router';\r\n\r\nexport function __internal__selectRouterStateParams(s: any) {\r\n  return s.router.state.params;\r\n}\r\nexport enum APP {\r\n  DIVE = 'Div-e',\r\n}\r\n\r\n@Component({\r\n  selector: 'solid-profile-base',\r\n  templateUrl: './base.component.html',\r\n  styleUrls: ['./base.component.scss'],\r\n})\r\nexport class BaseComponent implements OnInit, AfterViewInit, OnDestroy {\r\n  @ViewChild('title_container', { static: false })\r\n  public titleContainer?: ElementRef;\r\n  @ViewChild('contentContainer', { static: false })\r\n  public contentContainer!: ElementRef;\r\n  @ViewChild('spinnerContainer', { static: false }) set spinnerContainer(\r\n    element: ElementRef\r\n  ) {\r\n    if (element) {\r\n      const windowWidth = document.documentElement.clientWidth;\r\n      const position =\r\n        windowWidth >= 1000\r\n          ? (windowWidth - 115 - 300) / 2\r\n          : (windowWidth - 115) / 2;\r\n      element.nativeElement.style.left = position + 'px';\r\n    }\r\n  }\r\n\r\n  public APP_NAME_DIVE = APP.DIVE;\r\n  @Select(ProfileState.selectTree)\r\n  public $profilesTree!: Observable<TreeNode[]>;\r\n  @Select(ProfileState.selectFlat)\r\n  public $profilesFlat!: Observable<Profile[]>;\r\n  @Select(ProfileState.selectProfileAndNode)\r\n  public $profileAndCategorySelector!: Observable<\r\n    (\r\n      profileId?: number,\r\n      profileType?: string | null\r\n    ) => { profile: Profile; node: TreeNode } | null\r\n  >;\r\n  public $paramMap: Observable<ParamMap>;\r\n  public $queryParams: Observable<{ view: string }>;\r\n  public ProfilesFlatFiltered = new BehaviorSubject<Profile[]>([]);\r\n  public SplitLayout = false;\r\n  public Filter = new UntypedFormControl('');\r\n  public FilterValue = new BehaviorSubject<string>('');\r\n  public SelectedProfile: Profile | null = null;\r\n  public SelectedProfileShort: ProfileShort = { id: -1, type: undefined };\r\n  public SelectedNode: TreeNode | null = null;\r\n  public SwipeLeft: ProfileShort = { id: -1 };\r\n  public SwipeRight: ProfileShort = { id: -1 };\r\n  public View = 'tree';\r\n  public isSearchBarOpen = false;\r\n  public title_container_width = 0;\r\n  public title_width = 0;\r\n  public firstMovingAnimation = true;\r\n  public stopAnimation = true;\r\n  public timeOut_1: any;\r\n  public timeOut_2: any;\r\n  public collapseTree = false;\r\n  @Output() profileTitle = new EventEmitter<string>();\r\n\r\n  @Select(ProfileState.selectProfile) profile$!: Observable<any>;\r\n  isLoading = true;\r\n\r\n  public mainSubscription!: Subscription;\r\n  public filterSubscription!: Subscription;\r\n  public profileSubscription!: Subscription;\r\n\r\n  constructor(\r\n    private _store: Store,\r\n    @Inject(SOLID_PROFILE_BASE_URL) public baseUrl: string,\r\n    private introService: IntroService,\r\n    @Inject(SOLID_CORE_CONFIG) public coreConfig: SolidCoreConfig,\r\n    private _route: Router,\r\n    private _activatedRoute: ActivatedRoute\r\n  ) {\r\n    this.$paramMap = this._activatedRoute.paramMap as Observable<ParamMap>;\r\n    this.$queryParams = this._activatedRoute.queryParams as Observable<{\r\n      view: string;\r\n    }>;\r\n\r\n    this._store.dispatch([\r\n      new LoadDefinition(),\r\n      new LoadProfiles(),\r\n      // Load definitions from OpenAPI 2.0\r\n      new LoadDefinitionSwagger(),\r\n    ]);\r\n\r\n    this.profileSubscription = this.profile$?.subscribe((res) => {\r\n      if (res.length != 0) this.isLoading = false;\r\n    });\r\n  }\r\n\r\n  @HostListener('window:resize', ['$event'])\r\n  public onResize() {\r\n    this.calculateLayout();\r\n    this.handleLongTitle();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.mainSubscription = combineLatest([\r\n      this.$paramMap,\r\n      this.$queryParams,\r\n      this.$profileAndCategorySelector,\r\n      this.$profilesFlat,\r\n      this.FilterValue,\r\n    ])\r\n      .pipe(\r\n        map((v) => {\r\n          const { params, queryParams, selector, flat, filterStr } = {\r\n            params: v[0],\r\n            queryParams: v[1],\r\n            selector: v[2],\r\n            flat: v[3],\r\n            filterStr: v[4],\r\n          };\r\n\r\n          const id = params.get('id');\r\n          const type = params.get('type');\r\n\r\n          // temporary workaround for planty since the view is still in the URL\r\n          const view =\r\n            this.getProfileType(type) === 'wine' ? type : queryParams['view'];\r\n          this.View = view ? view : 'tree';\r\n\r\n          // select profile\r\n          const profileId = id ? parseInt(id, 10) : undefined;\r\n          const profileType = this.getProfileType(type);\r\n\r\n          const profileAndNode = selector(profileId, profileType);\r\n\r\n          // filter profiles\r\n          const regExp = new RegExp(filterStr, 'i');\r\n          const profilesFlatFiltered = flat.filter((p) => {\r\n            if (p.name.match(regExp)) {\r\n              return true;\r\n            }\r\n            if (p.sub_name) {\r\n              return !!p.sub_name.match(regExp);\r\n            }\r\n          });\r\n\r\n          // no profile selected\r\n          if (!profileId || !profileAndNode) {\r\n            return {\r\n              selectedProfile: null,\r\n              selectedNode: null,\r\n              profilesFlatFiltered,\r\n              swipeRight: { id: -1 },\r\n              swipeLeft: { id: -1 },\r\n            };\r\n          }\r\n          let swipeRight: ProfileShort = {\r\n            id: -1,\r\n          };\r\n          let swipeLeft: ProfileShort = {\r\n            id: -1,\r\n          };\r\n          if (this.View === 'grid' || filterStr !== '') {\r\n            const flatIndex = profilesFlatFiltered.findIndex(\r\n              (p) => p.id === profileId && p.def_type === profileType\r\n            );\r\n            if (flatIndex !== 0) {\r\n              const profile = profilesFlatFiltered[flatIndex - 1];\r\n              swipeLeft = this.getProfileShort(profile);\r\n            }\r\n            if (flatIndex !== profilesFlatFiltered.length - 1) {\r\n              const profile = profilesFlatFiltered[flatIndex + 1];\r\n              swipeRight = this.getProfileShort(profile);\r\n            }\r\n          } else {\r\n            const index = profileAndNode.node.profiles.indexOf(\r\n              profileAndNode.profile\r\n            );\r\n            if (!this.Filter.value) {\r\n              const profileLeft = profileAndNode.node.profiles.find(\r\n                (p, i) => i === index - 1\r\n              ) as Profile | undefined;\r\n              swipeLeft = this.getProfileShort(profileLeft);\r\n\r\n              const profileRight = profileAndNode.node.profiles.find(\r\n                (p, i) => i > index\r\n              ) as Profile | undefined;\r\n              swipeRight = this.getProfileShort(profileRight);\r\n            }\r\n          }\r\n          this.handleLongTitle();\r\n\r\n          return {\r\n            selectedProfile: profileAndNode.profile,\r\n            selectedNode: profileAndNode.node,\r\n            profilesFlatFiltered,\r\n            swipeRight,\r\n            swipeLeft,\r\n          };\r\n        })\r\n      )\r\n      .subscribe((v) => {\r\n        this.SelectedProfile = v.selectedProfile;\r\n        this.SelectedNode = v.selectedNode;\r\n        this.ProfilesFlatFiltered.next(v.profilesFlatFiltered);\r\n        this.SwipeLeft = v.swipeLeft;\r\n        this.SwipeRight = v.swipeRight;\r\n      });\r\n    this.filterSubscription = this.Filter.valueChanges.subscribe((_) =>\r\n      this.FilterValue.next(this.Filter.value)\r\n    );\r\n  }\r\n\r\n  public ngAfterViewInit(): void {\r\n    this.calculateLayout();\r\n\r\n    this.profileSubscription = this.profile$.subscribe((res) => {\r\n      if (res.length != 0) {\r\n        if (\r\n          localStorage.getItem('hide_profile_tour') == 'false' ||\r\n          localStorage.getItem('hide_profile_tour') == null\r\n        ) {\r\n          setTimeout(() => {\r\n            this.introService.profileTour((_targetElement: any) => {\r\n              try {\r\n                const id = _targetElement.id;\r\n                const treeNodeLocation =\r\n                  this.coreConfig.profileTour.location.treeNode;\r\n                const treeLocation =\r\n                  this.coreConfig.profileTour.location.profileTree;\r\n                this.collapseTree = false;\r\n                if (id != 'profile')\r\n                  setTimeout(() => {\r\n                    this.introService.introProfile.refresh(true);\r\n                  }, 365);\r\n                if (id == '') {\r\n                  if (this._route.url == treeLocation)\r\n                    this.navigateTo(treeNodeLocation);\r\n                  if (this._route.url == treeNodeLocation) {\r\n                    const steps = this.coreConfig.profileTour.steps;\r\n                    const currentStep =\r\n                      this.introService.introProfile._currentStep;\r\n                    steps.splice(currentStep, 1);\r\n                    setTimeout(() => {\r\n                      this.introService.introProfile\r\n                        .goToStep(currentStep)\r\n                        .start();\r\n                    }, 0.1);\r\n                  }\r\n                } else if (id == 'profile-view' || id == 'profile') {\r\n                  if (this._route.url != treeLocation)\r\n                    this.navigateTo(treeLocation);\r\n                  this.collapseTree = true;\r\n                }\r\n                setTimeout(() => {\r\n                  this.introService.introProfile.refresh(true);\r\n                }, 0.1);\r\n              } catch (error) {\r\n                return;\r\n              }\r\n              return;\r\n            });\r\n          }, 800);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  public ngOnDestroy(): void {\r\n    this.mainSubscription.unsubscribe();\r\n    this.filterSubscription.unsubscribe();\r\n    this.profileSubscription.unsubscribe();\r\n  }\r\n\r\n  @Dispatch()\r\n  public toggleGridTree() {\r\n    this.View = this.View === 'tree' ? 'grid' : 'tree';\r\n    if (this.SelectedProfile) {\r\n      return new Navigate(\r\n        [\r\n          `${this.baseUrl}`,\r\n          this.SelectedProfile.def_type !== 'wine'\r\n            ? this.SelectedProfile.def_type\r\n            : this.View,\r\n          this.SelectedProfile.id,\r\n        ],\r\n        {\r\n          view:\r\n            this.SelectedProfile.def_type !== 'wine' ? this.View : undefined,\r\n        }\r\n      );\r\n    }\r\n    return new Navigate(\r\n      [`${this.baseUrl}`],\r\n      { view: this.View },\r\n      { replaceUrl: true }\r\n    );\r\n  }\r\n\r\n  @Dispatch()\r\n  public selectProfile(profile?: number | ProfileShort) {\r\n    if (!profile) {\r\n      return new Navigate([`${this.baseUrl}`], {\r\n        view: this.View ? this.View : undefined,\r\n      });\r\n    }\r\n    if (typeof profile !== 'number' && profile.type) {\r\n      this.SelectedProfileShort = profile;\r\n      if (profile.type === 'wine') {\r\n        // temporary workaround for PLANTY - type wine_related doesn't have a type in the URL\r\n        return new Navigate([`${this.baseUrl}`, this.View, profile.id]);\r\n      } else {\r\n        const profileType = profile.type;\r\n        return new Navigate([`${this.baseUrl}`, profileType, profile.id], {\r\n          view: this.View,\r\n        });\r\n      }\r\n    } else {\r\n      return new Navigate([`${this.baseUrl}`, this.View, profile]);\r\n    }\r\n  }\r\n\r\n  public swipeLeft() {\r\n    if (this.SwipeLeft.id > 0) {\r\n      this.selectProfile(this.SwipeLeft);\r\n    }\r\n    setTimeout(() => {\r\n      this.profileTitle.emit(this.SelectedProfile?.name);\r\n    }, 10);\r\n  }\r\n\r\n  public swipeRight() {\r\n    if (this.SwipeRight.id > 0) {\r\n      this.selectProfile(this.SwipeRight);\r\n    }\r\n    setTimeout(() => {\r\n      this.profileTitle.emit(this.SelectedProfile?.name);\r\n    }, 10);\r\n  }\r\n\r\n  public onPanEnd($event: any) {\r\n    if ($event.deltaX > 100 && this.SwipeLeft) {\r\n      $event.preventDefault();\r\n      this.swipeLeft();\r\n    } else if ($event.deltaX < -100 && this.SwipeRight) {\r\n      $event.preventDefault();\r\n      this.swipeRight();\r\n    }\r\n  }\r\n\r\n  private calculateLayout() {\r\n    const split = this.contentContainer.nativeElement.clientWidth >= 900;\r\n    if (split !== this.SplitLayout) {\r\n      setTimeout(() => {\r\n        this.SplitLayout = split;\r\n      }, 0);\r\n    }\r\n  }\r\n\r\n  public selectProfileTitle(title: string): void {\r\n    if (title) this.profileTitle.emit(title);\r\n  }\r\n\r\n  public getProfileType(type: string | undefined | null): string {\r\n    if (!type) {\r\n      return '';\r\n    }\r\n    if (type === 'tree' || type === 'grid') {\r\n      return 'wine'; // temporary for PLANTY\r\n    } else {\r\n      return type;\r\n    }\r\n  }\r\n\r\n  public getProfileShort(profile: any): ProfileShort {\r\n    const profileId = profile?.id || -1;\r\n    const profileType = profile?.def_type;\r\n    return { id: profileId, type: profileType };\r\n  }\r\n\r\n  @Dispatch()\r\n  public async navigateTo(url: string) {\r\n    return new Navigate([url]);\r\n  }\r\n\r\n  public handleLongTitle() {\r\n    this.stopAnimation = true;\r\n    clearTimeout(this.timeOut_1);\r\n    clearTimeout(this.timeOut_2);\r\n    this.timeOut_1 = setTimeout(() => {\r\n      this.stopAnimation = false;\r\n      this.firstMovingAnimation = true;\r\n      this.title_container_width =\r\n        this.titleContainer?.nativeElement.offsetWidth;\r\n      this.title_width =\r\n        this.titleContainer?.nativeElement.firstElementChild.firstElementChild.offsetWidth;\r\n      if (this.titleContainer?.nativeElement.firstElementChild) {\r\n        this.timeOut_2 = setTimeout(() => {\r\n          this.firstMovingAnimation = false;\r\n        }, 10000);\r\n      }\r\n    }, 0);\r\n  }\r\n}\r\n","<div\r\n  #contentContainer\r\n  [class.splitLayout]=\"SplitLayout\"\r\n  class=\"content-container\"\r\n  id=\"profile\"\r\n>\r\n  <mat-toolbar\r\n    *ngIf=\"SplitLayout || !SelectedProfile\"\r\n    [class.full-width]=\"!SelectedProfile\"\r\n    class=\"main-toolbar\"\r\n  >\r\n    <button mat-icon-button class=\"button-back\" routerLink=\"\">\r\n      <mat-icon>arrow_back</mat-icon>\r\n    </button>\r\n    <mat-form-field\r\n      appearance=\"fill\"\r\n      floatLabel=\"auto\"\r\n      [class.openSearchBar]=\"isSearchBarOpen\"\r\n    >\r\n      <mat-label>Suche</mat-label>\r\n      <input\r\n        [formControl]=\"Filter\"\r\n        matInput\r\n        type=\"text\"\r\n        #search_input\r\n        (blur)=\"\r\n          Filter.value === ''\r\n            ? (isSearchBarOpen = false)\r\n            : (isSearchBarOpen = true)\r\n        \"\r\n        (focus)=\"isSearchBarOpen = true\"\r\n      />\r\n      <button mat-icon-button matSuffix (click)=\"Filter.setValue('')\">\r\n        <!--mat-icon *ngIf=\"Filter.value == ''\" matSuffix>search</mat-icon-->\r\n        <mat-icon>\r\n          {{ Filter.value === '' ? 'search' : 'close' }}\r\n        </mat-icon>\r\n      </button>\r\n    </mat-form-field>\r\n    <div class=\"spacer\"></div>\r\n    <button id=\"profile-view\" (click)=\"toggleGridTree()\" mat-icon-button>\r\n      <mat-icon>{{\r\n        View === 'tree' ? 'view_module' : 'account_tree'\r\n      }}</mat-icon>\r\n    </button>\r\n  </mat-toolbar>\r\n  <mat-toolbar *ngIf=\"SelectedProfile\" class=\"detail-toolbar\" color=\"accent\">\r\n    <div class=\"title-container\" #title_container>\r\n      <div *ngIf=\"coreConfig.appName === APP_NAME_DIVE\">\r\n        <div\r\n          class=\"title\"\r\n          [data]=\"SelectedProfile!.name\"\r\n          markdown\r\n          [class.long-title]=\"\r\n            title_width >= title_container_width &&\r\n            firstMovingAnimation &&\r\n            !stopAnimation\r\n          \"\r\n          [class.long-title-1]=\"\r\n            title_width >= title_container_width &&\r\n            !firstMovingAnimation &&\r\n            !stopAnimation\r\n          \"\r\n        ></div>\r\n      </div>\r\n      <div *ngIf=\"coreConfig.appName !== APP_NAME_DIVE\">\r\n        <div\r\n          class=\"title\"\r\n          [class.long-title]=\"\r\n            title_width >= title_container_width &&\r\n            firstMovingAnimation &&\r\n            !stopAnimation\r\n          \"\r\n          [class.long-title-1]=\"\r\n            title_width >= title_container_width &&\r\n            !firstMovingAnimation &&\r\n            !stopAnimation\r\n          \"\r\n        >\r\n          {{ SelectedProfile.name }}\r\n        </div>\r\n      </div>\r\n      <span *ngIf=\"SelectedProfile.sub_name\">{{\r\n        SelectedProfile.sub_name\r\n      }}</span>\r\n    </div>\r\n    <div id=\"profile-detail-navigation\">\r\n      <button\r\n        (click)=\"swipeLeft()\"\r\n        [disabled]=\"SwipeLeft.id < 0\"\r\n        mat-icon-button\r\n      >\r\n        <mat-icon>navigate_before</mat-icon>\r\n      </button>\r\n      <button (click)=\"selectProfile(undefined)\" mat-icon-button>\r\n        <mat-icon>{{ SplitLayout ? 'close' : 'expand_less' }}</mat-icon>\r\n      </button>\r\n      <button\r\n        (click)=\"swipeRight()\"\r\n        [disabled]=\"SwipeRight.id < 0\"\r\n        mat-icon-button\r\n      >\r\n        <mat-icon>navigate_next</mat-icon>\r\n      </button>\r\n    </div>\r\n  </mat-toolbar>\r\n  <ng-container *ngIf=\"(SplitLayout || !SelectedProfile) && !isLoading\">\r\n    <ng-container [ngSwitch]=\"(View === 'tree' && Filter.value !== '') || View\">\r\n      <solid-profile-grid\r\n        *ngSwitchCase=\"'grid'\"\r\n        (selectProfile)=\"selectProfile($event)\"\r\n        [class.full-width]=\"!SelectedProfile\"\r\n        [profiles]=\"ProfilesFlatFiltered.asObservable()\"\r\n        [selectedProfileId]=\"\r\n          SelectedProfile ? SelectedProfile.id : SelectedProfileShort.id\r\n        \"\r\n        [selectedProfileType]=\"\r\n          SelectedProfile ? SelectedProfile.def_type : SelectedProfileShort.type\r\n        \"\r\n        [isDiveApp]=\"coreConfig.appName === this.APP_NAME_DIVE\"\r\n        (selectProfileTitle)=\"selectProfileTitle($event)\"\r\n      ></solid-profile-grid>\r\n      <solid-profile-tree\r\n        *ngSwitchCase=\"'tree'\"\r\n        (selectProfile)=\"selectProfile($event)\"\r\n        (selectProfileTitle)=\"selectProfileTitle($event)\"\r\n        [profiles]=\"$profilesTree\"\r\n        [selectedProfileId]=\"\r\n          SelectedProfile ? SelectedProfile.id : SelectedProfileShort.id\r\n        \"\r\n        [selectedProfileType]=\"\r\n          SelectedProfile ? SelectedProfile.def_type : SelectedProfileShort.type\r\n        \"\r\n        [isDiveApp]=\"coreConfig.appName === this.APP_NAME_DIVE\"\r\n        [collapseTree]=\"collapseTree\"\r\n      ></solid-profile-tree>\r\n      <solid-profile-list\r\n        *ngSwitchDefault\r\n        (selectProfile)=\"selectProfile($event)\"\r\n        (selectProfileTitle)=\"selectProfileTitle($event)\"\r\n        [profiles]=\"ProfilesFlatFiltered.asObservable()\"\r\n        [selectedProfileId]=\"\r\n          SelectedProfile ? SelectedProfile.id : SelectedProfileShort.id\r\n        \"\r\n        [selectedProfileType]=\"\r\n          SelectedProfile ? SelectedProfile.def_type : SelectedProfileShort.type\r\n        \"\r\n        [isDiveApp]=\"coreConfig.appName === this.APP_NAME_DIVE\"\r\n      ></solid-profile-list>\r\n    </ng-container>\r\n  </ng-container>\r\n  <div *ngIf=\"isLoading\">\r\n    <mat-card-content #spinnerContainer>\r\n      <mat-spinner color=\"primary\" [diameter]=\"115\"></mat-spinner>\r\n    </mat-card-content>\r\n  </div>\r\n  <solid-profile-detail\r\n    *ngIf=\"SelectedProfile && SelectedNode\"\r\n    (selectProfile)=\"selectProfile($event)\"\r\n    cdkScrollable\r\n    [node]=\"SelectedNode\"\r\n    [profile]=\"SelectedProfile\"\r\n  ></solid-profile-detail>\r\n</div>\r\n","import { RouterModule, Routes, UrlSegment } from '@angular/router';\r\nimport { BaseComponent } from './components/base/base.component';\r\n\r\nconst baseUrlSegment = new UrlSegment('', {});\r\n\r\nconst routes: Routes = [\r\n  {\r\n    matcher: (url: UrlSegment[]) => {\r\n      if (url.length !== 2) {\r\n        return { consumed: [baseUrlSegment] };\r\n      }\r\n\r\n      const firstUrlSegment = url[0]?.path;\r\n      const secondUrlSegment = url[1]?.path;\r\n\r\n      return {\r\n        consumed: url,\r\n        posParams: {\r\n          type: new UrlSegment(firstUrlSegment, {}),\r\n          id: new UrlSegment(secondUrlSegment, {}),\r\n        },\r\n      };\r\n    },\r\n    component: BaseComponent,\r\n  },\r\n];\r\n\r\nexport const SolidProfileRoutingModule = RouterModule.forChild(routes);\r\n","import { NgModule } from '@angular/core';\r\nimport { TreeComponent } from './components/tree/tree.component';\r\nimport { ListComponent } from './components/list/list.component';\r\nimport { DetailComponent } from './components/detail/detail.component';\r\nimport { BaseComponent } from './components/base/base.component';\r\nimport { GridComponent } from './components/grid/grid.component';\r\nimport { SolidCoreModule } from '@zentrumnawi/solid-core';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { SolidProfileRoutingModule } from './solid-profile-routing.module';\r\nimport { NgxsModule } from '@ngxs/store';\r\nimport { ProfileState } from './state/profile.state';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatIconModule, MatIconRegistry } from '@angular/material/icon';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { MatTreeModule } from '@angular/material/tree';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\nimport { SelectedDirective } from './components/selected.directive';\r\nimport { ProfileDefinitionService } from './services/profile-definition.service';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { MatCardModule } from '@angular/material/card';\r\n\r\n// This workaround is required for the \"old\" angular compiler in production mode. Ivy library publishing is not supported until angular 10.\r\n// https://github.com/ng-packagr/ng-packagr/issues/767\r\nexport const ngxsFeatureModule = NgxsModule.forFeature([ProfileState]);\r\n\r\n@NgModule({\r\n  declarations: [\r\n    TreeComponent,\r\n    ListComponent,\r\n    DetailComponent,\r\n    BaseComponent,\r\n    GridComponent,\r\n    SelectedDirective,\r\n  ],\r\n  imports: [\r\n    SolidCoreModule,\r\n    SolidCoreModule,\r\n    SolidProfileRoutingModule,\r\n    MatTabsModule,\r\n    ngxsFeatureModule,\r\n    MatButtonModule,\r\n    MatExpansionModule,\r\n    MatFormFieldModule,\r\n    MatIconModule,\r\n    MatInputModule,\r\n    MatListModule,\r\n    MatProgressSpinnerModule,\r\n    MatToolbarModule,\r\n    MatTreeModule,\r\n    MatCardModule,\r\n  ],\r\n  providers: [ProfileDefinitionService],\r\n})\r\nexport class SolidProfileModule {\r\n  constructor(registry: MatIconRegistry, url: DomSanitizer) {\r\n    const addIcon = (name: string) =>\r\n      registry.addSvgIcon(\r\n        name,\r\n        url.bypassSecurityTrustResourceUrl(`assets/svg/${name}.svg`)\r\n      );\r\n    addIcon('search');\r\n  }\r\n}\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["i3","i4","i6","i8.SelectedDirective","i1","i2.ProfileDefinitionService","__decorate","__metadata","i3.SelectedDirective","i2.IntroService","i5","i7","i8","i10","i15.TreeComponent","i16.ListComponent","i17.DetailComponent","i18.GridComponent","i2"],"mappings":"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"}