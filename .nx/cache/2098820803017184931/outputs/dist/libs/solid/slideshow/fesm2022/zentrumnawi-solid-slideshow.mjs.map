{"version":3,"file":"zentrumnawi-solid-slideshow.mjs","sources":["../../../../../libs/solid/slideshow/src/lib/app-config.ts","../../../../../libs/solid/slideshow/src/lib/components/slideshow/slideshow.component.ts","../../../../../libs/solid/slideshow/src/lib/components/slideshow/slideshow.component.html","../../../../../libs/solid/slideshow/src/lib/state/slideshow.actions.ts","../../../../../libs/solid/slideshow/src/lib/state/slideshow.state.ts","../../../../../libs/solid/slideshow/src/lib/state/slideshow-select.actions.ts","../../../../../libs/solid/slideshow/src/lib/state/categories.actions.ts","../../../../../libs/solid/slideshow/src/lib/state/categories.state.ts","../../../../../libs/solid/slideshow/src/lib/state/slideshow-select.state.ts","../../../../../libs/solid/slideshow/src/lib/components/slideshow-select/slideshow-select.component.ts","../../../../../libs/solid/slideshow/src/lib/components/slideshow-select/slideshow-select.component.html","../../../../../libs/solid/slideshow/src/lib/components/slideshow-base/slideshow-base.component.ts","../../../../../libs/solid/slideshow/src/lib/components/slideshow-base/slideshow-base.component.html","../../../../../libs/solid/slideshow/src/lib/solid-slideshow-routing.module.ts","../../../../../libs/solid/slideshow/src/lib/solid-slideshow.module.ts","../../../../../libs/solid/slideshow/src/zentrumnawi-solid-slideshow.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\r\n\r\nexport const SOLID_SLIDESHOW_APP_ROUTING_CONFIG = new InjectionToken<string>(\r\n  'solid-slideshow-app-routing-config'\r\n);\r\n","import {\r\n  AfterViewInit,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  HostListener,\r\n  Inject,\r\n  OnDestroy,\r\n  OnInit,\r\n  ViewChild,\r\n  Input,\r\n  EventEmitter,\r\n  Output,\r\n} from '@angular/core';\r\nimport { MatStepper } from '@angular/material/stepper';\r\nimport { Subject } from 'rxjs';\r\nimport { Slideshow } from '../../state/slideshow.model';\r\nimport { BreakpointObserver } from '@angular/cdk/layout';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { SOLID_SLIDESHOW_APP_ROUTING_CONFIG } from '../../app-config';\r\n\r\nexport enum KEY {\r\n  RIGHT_ARROW = 'ArrowRight',\r\n  LEFT_ARROW = 'ArrowLeft',\r\n}\r\n\r\n@Component({\r\n  selector: 'solid-slideshow',\r\n  templateUrl: './slideshow.component.html',\r\n  styleUrls: ['./slideshow.component.scss'],\r\n})\r\nexport class SlideshowComponent implements OnInit, OnDestroy, AfterViewInit {\r\n  private $destroyed = new Subject();\r\n\r\n  @ViewChild('stepper', { static: false }) public Stepper?: MatStepper;\r\n  @ViewChild('toolbar') public Toolbar?: ElementRef;\r\n  @ViewChild('navigation') public Navigation?: ElementRef;\r\n  @ViewChild('slideshow_container') public slideshow_container?: ElementRef;\r\n  @Output() backButtonClick = new EventEmitter<any>();\r\n\r\n  public slideshow!: Slideshow | null;\r\n  public page_index = 0;\r\n  public isMobile = false;\r\n  public lastScrollTop = 0;\r\n  public toolbar_up = false;\r\n  public toolbar_down = false;\r\n  public slideshowCount!: number;\r\n  public slideshowid!: string;\r\n  public slideshowPageid!: string;\r\n\r\n  @Input()\r\n  public set selectSlideshow(slideshow: Slideshow | null) {\r\n    this.slideshow = slideshow;\r\n    if (slideshow) {\r\n      setTimeout(() => {\r\n        if (this.Stepper) {\r\n          const pagePosition = this.slideshow?.pages.findIndex(\r\n            (page) => page.id === Number.parseInt(this.slideshowPageid)\r\n          );\r\n          if (pagePosition !== -1) {\r\n            this.Stepper.selectedIndex = pagePosition;\r\n            this.page_index = this.Stepper.selectedIndex;\r\n          }\r\n        }\r\n      }, 0);\r\n    }\r\n  }\r\n\r\n  constructor(\r\n    private _breakpointObserver: BreakpointObserver,\r\n    @Inject(SOLID_SLIDESHOW_APP_ROUTING_CONFIG) public routingConfig: any,\r\n    private cdr: ChangeDetectorRef,\r\n    private route: ActivatedRoute,\r\n    private router: Router\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.slideshowPageid =\r\n      this.route.firstChild?.snapshot.params['slideshowPageId'];\r\n    this._breakpointObserver\r\n      .observe(['(max-width: 450px)'])\r\n      .subscribe((isMobile) => {\r\n        if (isMobile.matches) {\r\n          this.isMobile = true;\r\n        } else {\r\n          this.isMobile = false;\r\n        }\r\n      });\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.cdr.detectChanges();\r\n  }\r\n\r\n  public goBack() {\r\n    this.backButtonClick.emit();\r\n  }\r\n\r\n  @HostListener('window:keyup', ['$event'])\r\n  public keyEvent(event: KeyboardEvent) {\r\n    if (event.key === KEY.LEFT_ARROW) {\r\n      this.onPrevStepClick();\r\n    } else if (event.key === KEY.RIGHT_ARROW) {\r\n      this.onNextStepClick();\r\n    }\r\n  }\r\n\r\n  public onPrevStepClick() {\r\n    if (this.Stepper) {\r\n      this.Stepper.previous();\r\n      this.page_index = this.Stepper.selectedIndex;\r\n      this.scrollToTop();\r\n      this.router.navigate(\r\n        [`../${this.slideshow?.pages[this.page_index].id}`],\r\n        { relativeTo: this.route.firstChild }\r\n      );\r\n    }\r\n  }\r\n\r\n  public onNextStepClick() {\r\n    if (this.Stepper) {\r\n      this.Stepper.next();\r\n      this.page_index = this.Stepper.selectedIndex;\r\n      this.scrollToTop();\r\n      this.router.navigate(\r\n        [`../${this.slideshow?.pages[this.page_index].id}`],\r\n        { relativeTo: this.route.firstChild }\r\n      );\r\n    }\r\n  }\r\n\r\n  public onPanEnd($event: any) {\r\n    if ($event.deltaX > 100) {\r\n      this.onPrevStepClick();\r\n    } else if ($event.deltaX < -100) {\r\n      this.onNextStepClick();\r\n    }\r\n  }\r\n\r\n  public hideAndShowToolbar() {\r\n    const delta = 5;\r\n    const scrollTop = this.slideshow_container?.nativeElement.scrollTop;\r\n    const toolbarHeight = this.Toolbar?.nativeElement.offsetHeight;\r\n    if (Math.abs(this.lastScrollTop - scrollTop) <= delta) {\r\n      return;\r\n    }\r\n    if (scrollTop > this.lastScrollTop && scrollTop > toolbarHeight) {\r\n      // Scroll Down\r\n      this.toolbar_down = false;\r\n      this.toolbar_up = true;\r\n    } else {\r\n      // Scroll Up\r\n      this.toolbar_up = false;\r\n      this.toolbar_down = true;\r\n    }\r\n    this.lastScrollTop = scrollTop;\r\n  }\r\n\r\n  public scrollToTop() {\r\n    const slideshowContainer = this.slideshow_container;\r\n    if (!slideshowContainer) {\r\n      return;\r\n    }\r\n    slideshowContainer.nativeElement.scrollTop = 0;\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.$destroyed.next(true);\r\n  }\r\n}\r\n","<div class=\"slideshow-container\">\r\n  <!-- Slideshow toolbar for big screen version -->\r\n  <div class=\"toolbar-container\" *ngIf=\"!isMobile && slideshow\" #toolbar>\r\n    <div class=\"toolbar\">\r\n      <button mat-icon-button class=\"button-back\" (click)=\"goBack()\">\r\n        <mat-icon>arrow_back</mat-icon>\r\n      </button>\r\n      <div class=\"step-actions\">\r\n        <button\r\n          [disabled]=\"page_index === 0\"\r\n          mat-icon-button\r\n          class=\"button-left\"\r\n          (click)=\"onPrevStepClick()\"\r\n        >\r\n          <mat-icon aria-label=\"Vorheriger Schritt\">navigate_before</mat-icon>\r\n        </button>\r\n        <div class=\"title\">\r\n          <h2>{{ slideshow.title }}</h2>\r\n          <span>\r\n            {{ slideshow.pages[page_index].title }} ({{ page_index + 1 }}/{{\r\n              slideshow.pages.length\r\n            }})\r\n          </span>\r\n        </div>\r\n        <button\r\n          [disabled]=\"page_index + 1 === slideshow.pages.length\"\r\n          (click)=\"onNextStepClick()\"\r\n          class=\"button-right\"\r\n          mat-icon-button\r\n        >\r\n          <mat-icon aria-label=\"NÃ¤chster Schritt\">navigate_next</mat-icon>\r\n        </button>\r\n      </div>\r\n    </div>\r\n    <mat-progress-bar\r\n      mode=\"determinate\"\r\n      value=\"{{ ((page_index + 1) / slideshow.pages.length) * 100 }}\"\r\n    ></mat-progress-bar>\r\n  </div>\r\n\r\n  <!-- Slideshow toolbar for Mobile version -->\r\n  <div\r\n    class=\"back-button-toolbar-container\"\r\n    *ngIf=\"isMobile && slideshow\"\r\n    [class.nav-up]=\"toolbar_up\"\r\n    [class.nav-down]=\"toolbar_down\"\r\n    #toolbar\r\n  >\r\n    <div class=\"back-button-toolbar\">\r\n      <button mat-icon-button class=\"button-back\" (click)=\"goBack()\">\r\n        <mat-icon>arrow_back</mat-icon>\r\n      </button>\r\n      <h2>{{ slideshow.title }}</h2>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- Slideshow content for 2 versions -->\r\n  <div\r\n    class=\"slideshow-content-container\"\r\n    (scroll)=\"hideAndShowToolbar()\"\r\n    [style.max-height]=\"\r\n      'calc(100% - ' + Navigation?.nativeElement.offsetHeight + 'px)'\r\n    \"\r\n    #slideshow_container\r\n  >\r\n    <mat-horizontal-stepper\r\n      #stepper\r\n      (panend)=\"onPanEnd($event)\"\r\n      *ngIf=\"slideshow\"\r\n      labelPosition=\"bottom\"\r\n      linear=\"false\"\r\n    >\r\n      <mat-step\r\n        *ngFor=\"let page of slideshow.pages\"\r\n        [label]=\"page.title\"\r\n        [state]=\"slideshow.pages.length >= page_index + 1 ? 'done' : ''\"\r\n      >\r\n        <div\r\n          *ngIf=\"isMobile\"\r\n          [style.height]=\"Toolbar?.nativeElement.offsetHeight - 6 + 'px'\"\r\n        ></div>\r\n        <div [data]=\"page.text\" markdown></div>\r\n        <div class=\"page-images\">\r\n          <div\r\n            [class.equal1Image]=\"page.images.length === 1\"\r\n            [class.lessThan3Images]=\"page.images.length < 3\"\r\n            [class.greaterEqual3Images]=\"page.images.length >= 3\"\r\n          >\r\n            <ng-container *ngFor=\"let img of page.images\">\r\n              <mat-card *ngIf=\"img.image\">\r\n                <mat-card-header>\r\n                  <mat-card-title>{{ img.title }}</mat-card-title>\r\n                </mat-card-header>\r\n                <mat-card-content>\r\n                  <solid-core-media\r\n                    [image]=\"img.img\"\r\n                    [hasDialog]=\"true\"\r\n                    [hasAttributions]=\"true\"\r\n                    [name]=\"img.title\"\r\n                    [slideshowPageChanged]=\"page_index + 1\"\r\n                  ></solid-core-media>\r\n                  <p markdown class=\"caption\" [data]=\"img.caption\"></p>\r\n                </mat-card-content>\r\n              </mat-card>\r\n            </ng-container>\r\n          </div>\r\n        </div>\r\n      </mat-step>\r\n    </mat-horizontal-stepper>\r\n  </div>\r\n\r\n  <!-- Slideshow lower toolbar for Mobile version -->\r\n  <div\r\n    class=\"navigation-toolbar-container\"\r\n    *ngIf=\"isMobile && slideshow\"\r\n    #navigation\r\n  >\r\n    <mat-progress-bar\r\n      mode=\"determinate\"\r\n      value=\"{{ ((page_index + 1) / slideshow.pages.length) * 100 }}\"\r\n    ></mat-progress-bar>\r\n    <div #toolbar class=\"navigation-toolbar\">\r\n      <button\r\n        [disabled]=\"page_index === 0\"\r\n        mat-icon-button\r\n        class=\"button-left\"\r\n        (click)=\"onPrevStepClick()\"\r\n      >\r\n        <mat-icon aria-label=\"Vorheriger Schritt\">navigate_before</mat-icon>\r\n      </button>\r\n      <span>\r\n        {{ slideshow.pages[page_index].title }} ({{ page_index + 1 }}/{{\r\n          slideshow.pages.length\r\n        }})\r\n      </span>\r\n      <button\r\n        [disabled]=\"page_index + 1 === slideshow.pages.length\"\r\n        (click)=\"onNextStepClick()\"\r\n        class=\"button-right\"\r\n        mat-icon-button\r\n      >\r\n        <mat-icon aria-label=\"NÃ¤chster Schritt\">navigate_next</mat-icon>\r\n      </button>\r\n    </div>\r\n  </div>\r\n</div>\r\n","// export class LoadSlideshow {\r\n//   static readonly type = '[Slideshow] load all slideshows';\r\n// }\r\n\r\nexport class AddSlideshow {\r\n  static readonly type = '[Slideshow] add slideshow';\r\n  constructor(public payload: string) {}\r\n}\r\n","import { Action, Selector, State, StateContext } from '@ngxs/store';\r\nimport { Slideshow, SlideshowApi } from './slideshow.model';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { AddSlideshow } from './slideshow.actions';\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport {\r\n  SOLID_CORE_CONFIG,\r\n  SolidCoreConfig,\r\n  ImageModel,\r\n} from '@zentrumnawi/solid-core';\r\nimport { tap, map } from 'rxjs/operators';\r\n\r\nexport type SlideshowStateModel = Slideshow[];\r\n\r\n@State<SlideshowStateModel>({\r\n  name: 'slideshow',\r\n  defaults: [],\r\n})\r\n@Injectable()\r\nexport class SlideshowState {\r\n  constructor(\r\n    @Inject(SOLID_CORE_CONFIG) private _config: SolidCoreConfig,\r\n    private _http: HttpClient\r\n  ) {}\r\n\r\n  // @Selector()\r\n  // public static getSlideshowByCategoriesAndId(state: SlideshowStateModel) {\r\n  //   // This redundant variable is required\r\n  //   // https://github.com/ng-packagr/ng-packagr/issues/696\r\n  //   const fn = function (\r\n  //     id: number,\r\n  //     categories: string | undefined\r\n  //   ): Slideshow | undefined {\r\n  //     return state\r\n  //       .filter((slideshow) => slideshow.categories === categories)\r\n  //       .find((slideshow) => slideshow.id === id);\r\n  //   };\r\n  //   return fn;\r\n  // }\r\n\r\n  // @Selector()\r\n  // public static getSlideshowByCategories(state: SlideshowStateModel) {\r\n  //   const fn = function (\r\n  //     categories: string | undefined\r\n  //   ): Slideshow[] | undefined {\r\n  //     return state.filter((s) => {\r\n  //       if (!categories) {\r\n  //         return;\r\n  //       } else {\r\n  //         return s.categories === categories;\r\n  //       }\r\n  //     });\r\n  //   };\r\n  //   return fn;\r\n  // }\r\n  // @Selector()\r\n  // public static getSlideshowsByCategories(state: SlideshowStateModel) {\r\n  //   const fn = function (\r\n  //     categories: string | undefined\r\n  //   ): Slideshow[] | undefined {\r\n  //     return state.filter((s) => {\r\n  //       if (!categories) {\r\n  //         return;\r\n  //       } else {\r\n  //         return s.categories === categories;\r\n  //       }\r\n  //     });\r\n  //   };\r\n  //   return fn;\r\n  // }\r\n\r\n  // @Selector()\r\n  // public static SlideshowByCategoryCounter(state: SlideshowStateModel) {\r\n  //   const fn = function (categories: string | undefined): number {\r\n  //     return state.filter((s) => s.categories === categories).length;\r\n  //   };\r\n  //   return fn;\r\n  // }\r\n\r\n  // @Selector()\r\n  // public static getSlideshows(state: SlideshowStateModel) {\r\n  //   // This redundant variable is required\r\n  //   // https://github.com/ng-packagr/ng-packagr/issues/696\r\n  //   const fn = () =>\r\n  //     state.map((s) => ({\r\n  //       id: s.id,\r\n  //       title: s.title,\r\n  //       title_image: s.title_image,\r\n  //       position: s.position,\r\n  //       categories: s.categories,\r\n  //     }));\r\n  //   return fn();\r\n  // }\r\n\r\n  // @Action(LoadSlideshow)\r\n  // public load(ctx: StateContext<SlideshowStateModel>) {\r\n  //   if (ctx.getState().length > 0) {\r\n  //     console.log(ctx.getState());\r\n\r\n  //     return;\r\n  //   }\r\n  //   return this._http\r\n  //     .get<Slideshow[]>(`${this._config.apiUrl}/slideshows`)\r\n  //     .pipe(\r\n  //       map((response) => {\r\n  //         const mapit = (input: SlideshowApi[]): Slideshow[] => {\r\n  //           return input.map((slideshow) => {\r\n  //             return {\r\n  //               ...slideshow,\r\n  //               categories: slideshow.categories[0],\r\n  //               pages: slideshow.pages.map((page) => ({\r\n  //                 ...page,\r\n  //                 images: page.images?.map((slideshowImg) => ({\r\n  //                   ...slideshowImg,\r\n  //                   img: new ImageModel(slideshowImg.image),\r\n  //                 })),\r\n  //               })),\r\n  //             };\r\n  //           });\r\n  //         };\r\n  //         return mapit(response);\r\n  //       }),\r\n  //       tap((res) => {\r\n  //         ctx.setState([\r\n  //           ...res.map((slideshow) => {\r\n  //             slideshow.pages = slideshow.pages.sort(\r\n  //               (a, b) => a.position - b.position\r\n  //             );\r\n  //             return slideshow;\r\n  //           }),\r\n  //         ]);\r\n  //       })\r\n  //     );\r\n  // }\r\n\r\n  // @Selector()\r\n  // public static getSlideshows(state: SlideshowStateModel) {\r\n  //   return [...state];\r\n  // }\r\n\r\n  // @Selector()\r\n  // public static getSlideshow(state: SlideshowStateModel) {\r\n  //   const fn = (slideshowId: number): Slideshow =>\r\n  //     state.filter((s) => s.id === slideshowId)[0];\r\n  //   return fn;\r\n  // }\r\n\r\n  // @Action(LoadSlideshow)\r\n  // public loadPage(\r\n  //   ctx: StateContext<SlideshowStateModel>,\r\n  // ) {\r\n  //   if (ctx.getState().length > 0) {\r\n  //     return;\r\n  //   }\r\n  //   return this._http\r\n  //     .get<Slideshow>(`${this._config.apiUrl}/slideshows`)\r\n  //     .pipe(\r\n  //       map((response) => {\r\n  //         const mapit = (slideshow: SlideshowApi): Slideshow => {\r\n  //           // return input.map((slideshow) => {\r\n  //           return {\r\n  //             ...slideshow,\r\n  //             categories: slideshow.categories,\r\n  //             pages: slideshow.pages.map((page) => ({\r\n  //               ...page,\r\n  //               images: page.images?.map((slideshowImg) => ({\r\n  //                 ...slideshowImg,\r\n  //                 img: new ImageModel(slideshowImg.image),\r\n  //               })),\r\n  //             })),\r\n  //           };\r\n  //           // });\r\n  //         };\r\n  //         return mapit(response);\r\n  //       }),\r\n  //       tap((res) => {\r\n  //         // ctx.setState([\r\n  //         //   ...res.map((slideshow) => {\r\n  //         //     slideshow.pages = slideshow.pages.sort(\r\n  //         //       (a, b) => a.position - b.position\r\n  //         //     );\r\n  //         //     return slideshow;\r\n  //         //   }),\r\n  //         // ]);\r\n  //       })\r\n  //     );\r\n  // }\r\n\r\n  @Selector()\r\n  public static getSlideshowById(state: SlideshowStateModel) {\r\n    return (slideshowId: string): Slideshow =>\r\n      state.filter((s) => s.id === Number.parseInt(slideshowId))[0];\r\n  }\r\n\r\n  @Action(AddSlideshow)\r\n  public addSlideshow(\r\n    ctx: StateContext<SlideshowStateModel>,\r\n    { payload }: AddSlideshow\r\n  ) {\r\n    const currentState = ctx.getState();\r\n    if (currentState.some((sl) => sl.id === Number.parseInt(payload))) {\r\n      // if slideshow is existed in the state\r\n      // to see the data is taken from state\r\n      console.log('slideshow not call api');\r\n      return;\r\n    }\r\n    return this._http\r\n      .get<Slideshow>(`${this._config.apiUrl}/slideshows/${payload}`)\r\n      .pipe(\r\n        map((response) => {\r\n          // if slideshow is not existed in the state\r\n          // to see the data is taken from API, call API\r\n          console.log('slideshow call api');\r\n          const mapit = (slideshow: SlideshowApi): Slideshow => {\r\n            return {\r\n              id: slideshow.id,\r\n              title: slideshow.title,\r\n              position: slideshow.position,\r\n              categories: slideshow.categories,\r\n              pages: slideshow.pages.map((page) => ({\r\n                ...page,\r\n                images: page.images?.map((slideshowImg) => ({\r\n                  ...slideshowImg,\r\n                  img: new ImageModel(slideshowImg.image),\r\n                })),\r\n              })),\r\n            };\r\n          };\r\n          return mapit(response);\r\n        }),\r\n        tap((res) => {\r\n          res.pages.sort((a, b) => a.position - b.position);\r\n          ctx.setState(\r\n            [...currentState, res].sort((a, b) => a.position - b.position)\r\n          );\r\n        })\r\n      );\r\n  }\r\n}\r\n","export class GetSlideshowSelect {\r\n  static readonly type = '[SlideshowSelect] get slideshow select';\r\n}\r\n","export class GetCategories {\r\n  static readonly type = '[Category] get slideshow categories;';\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { Action, Selector, State, StateContext } from '@ngxs/store';\r\nimport { SolidCoreConfig, SOLID_CORE_CONFIG } from '@zentrumnawi/solid-core';\r\nimport { GetCategories } from './categories.actions';\r\nimport { SlideshowCategory } from './categories.model';\r\nimport { map, tap } from 'rxjs/operators';\r\n\r\nexport type CategoriesStateModel = SlideshowCategory[];\r\n\r\n@State<CategoriesStateModel>({\r\n  name: 'categories',\r\n  defaults: [],\r\n})\r\n@Injectable()\r\nexport class CategoriesState {\r\n  constructor(\r\n    private _http: HttpClient,\r\n    @Inject(SOLID_CORE_CONFIG) private _config: SolidCoreConfig\r\n  ) {}\r\n\r\n  @Selector()\r\n  public static getSlideshowCategoriesItems(state: CategoriesStateModel) {\r\n    const fn = () =>\r\n      state.map((s) => ({\r\n        id: s.id,\r\n        name: s.name,\r\n        slug: s.slug,\r\n      }));\r\n    return fn();\r\n  }\r\n\r\n  @Action(GetCategories)\r\n  public GetSlideshowCategories(ctx: StateContext<CategoriesStateModel>) {\r\n    if (ctx.getState().length > 0) {\r\n      return;\r\n    }\r\n    return this._http\r\n      .get<SlideshowCategory[]>(`${this._config.apiUrl}/categories`)\r\n      .pipe(\r\n        map((res) => {\r\n          const mapit = (input: SlideshowCategory[]): SlideshowCategory[] => {\r\n            return input.map((categories) => {\r\n              return {\r\n                ...categories,\r\n              };\r\n            });\r\n          };\r\n          return mapit(res);\r\n        }),\r\n        tap((res) => {\r\n          ctx.setState([...res.map((categories) => categories)]);\r\n        })\r\n      );\r\n  }\r\n}\r\n","import { Action, Selector, State, StateContext } from '@ngxs/store';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { SOLID_CORE_CONFIG, SolidCoreConfig } from '@zentrumnawi/solid-core';\r\nimport { tap, map } from 'rxjs/operators';\r\nimport { GetSlideshowSelect } from './slideshow-select.actions';\r\nimport { SlideshowSelectApi } from './slideshow-select.model';\r\n\r\nexport type SlideshowSelectStateModel = SlideshowSelectApi[];\r\n\r\n@State<SlideshowSelectStateModel>({\r\n  name: 'slideshowSelect',\r\n  defaults: [],\r\n})\r\n@Injectable()\r\nexport class SlideshowSelectState {\r\n  constructor(\r\n    @Inject(SOLID_CORE_CONFIG) private _config: SolidCoreConfig,\r\n    private _http: HttpClient\r\n  ) {}\r\n\r\n  @Selector()\r\n  public static getSlideshowSelect(state: SlideshowSelectStateModel) {\r\n    const fn = () =>\r\n      state.map((s) => ({\r\n        id: s.id,\r\n        pages: s.pages,\r\n        title_image: s.title_image,\r\n        categories: s.categories,\r\n        position: s.position,\r\n        title: s.title,\r\n      }));\r\n    return fn();\r\n  }\r\n\r\n  @Action(GetSlideshowSelect)\r\n  public load(ctx: StateContext<SlideshowSelectStateModel>) {\r\n    if (ctx.getState().length > 0) {\r\n      return;\r\n    }\r\n    return this._http\r\n      .get<SlideshowSelectApi[]>(`${this._config.apiUrl}/slideshows`)\r\n      .pipe(\r\n        map((response) => {\r\n          const mapit = (input: SlideshowSelectApi[]): SlideshowSelectApi[] => {\r\n            return input.map((slideshow) => {\r\n              return {\r\n                ...slideshow,\r\n                categories: slideshow.categories,\r\n              };\r\n            });\r\n          };\r\n          return mapit(response);\r\n        }),\r\n        tap((res) => {\r\n          ctx.setState([...res].sort((a, b) => a.position - b.position));\r\n        })\r\n      );\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Inject,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { Select } from '@ngxs/store';\r\nimport { Dispatch } from '@ngxs-labs/dispatch-decorator';\r\nimport { GetSlideshowSelect } from '../../state/slideshow-select.actions';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { CategoriesState } from '../../state/categories.state';\r\nimport { SlideshowCategory } from '../../state/categories.model';\r\nimport { GetCategories } from '../../state/categories.actions';\r\nimport { SlideshowSelectState } from '../../state/slideshow-select.state';\r\nimport { SOLID_SLIDESHOW_APP_ROUTING_CONFIG } from '../../app-config';\r\nimport { SlideshowSelectApi } from '../../state/slideshow-select.model';\r\n\r\n@Component({\r\n  selector: 'solid-slideshow-slideshow-select',\r\n  templateUrl: './slideshow-select.component.html',\r\n  styleUrls: ['./slideshow-select.component.scss'],\r\n})\r\nexport class SlideshowSelectComponent implements OnInit, OnDestroy {\r\n  private $destroyed = new Subject();\r\n\r\n  @ViewChild('slideshow_select_container')\r\n  public slideshow_select_container?: ElementRef;\r\n  @ViewChild('toolbar') public Toolbar?: ElementRef;\r\n  @Select(CategoriesState.getSlideshowCategoriesItems)\r\n  public Categories!: Observable<SlideshowCategory[]>;\r\n  @Select(SlideshowSelectState.getSlideshowSelect)\r\n  public SlideshowSelect!: Observable<SlideshowSelectApi[]>;\r\n  @Output() selectSlideshow = new EventEmitter<any>();\r\n\r\n  public lastScrollTop = 0;\r\n  public toolbar_up = false;\r\n  public toolbar_down = false;\r\n  public hasOnlyOneCategory = false;\r\n  public category_name?: string;\r\n  public step?: number;\r\n\r\n  constructor(\r\n    @Inject(SOLID_SLIDESHOW_APP_ROUTING_CONFIG) public routingConfig: any,\r\n    private route: ActivatedRoute,\r\n    private router: Router\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.GetSlideshowSelect();\r\n    this.GetSlideshowCategories();\r\n  }\r\n\r\n  @Dispatch()\r\n  private async GetSlideshowSelect() {\r\n    return new GetSlideshowSelect();\r\n  }\r\n\r\n  @Dispatch()\r\n  private GetSlideshowCategories() {\r\n    return new GetCategories();\r\n  }\r\n\r\n  public SelectSlideshow(slug: string, slideshowid: number, pageid: number) {\r\n    this.selectSlideshow.emit({ slug, slideshowid, pageid });\r\n    this.router.navigate([slug, slideshowid, pageid], {\r\n      relativeTo: this.route,\r\n    });\r\n  }\r\n\r\n  public hideAndShowToolbar() {\r\n    const delta = 5;\r\n    const scrollTop = this.slideshow_select_container?.nativeElement.scrollTop;\r\n    const toolbarHeight = this.Toolbar?.nativeElement.offsetHeight;\r\n    if (Math.abs(this.lastScrollTop - scrollTop) <= delta) {\r\n      return;\r\n    }\r\n\r\n    if (scrollTop > this.lastScrollTop && scrollTop > toolbarHeight) {\r\n      // Scroll Down\r\n      this.toolbar_down = false;\r\n      this.toolbar_up = true;\r\n    } else {\r\n      // Scroll Up\r\n      this.toolbar_up = false;\r\n      this.toolbar_down = true;\r\n    }\r\n    this.lastScrollTop = scrollTop;\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.$destroyed.next(true);\r\n  }\r\n}\r\n","<div class=\"container\">\r\n  <div class=\"back-button-toolbar\">\r\n    <button mat-icon-button class=\"button-back\" routerLink=\"\">\r\n      <mat-icon>arrow_back</mat-icon>\r\n    </button>\r\n    <h2>{{ routingConfig.title }}</h2>\r\n  </div>\r\n  <div class=\"select-container\">\r\n    <mat-accordion class=\"slideshow-select-container\" multi>\r\n      <mat-expansion-panel\r\n        *ngFor=\"let category of Categories | async; let i = index\"\r\n      >\r\n        <mat-expansion-panel-header>\r\n          <mat-panel-title> {{ category.name }} </mat-panel-title>\r\n        </mat-expansion-panel-header>\r\n        <div\r\n          *ngFor=\"let slideshowselect of SlideshowSelect | async\"\r\n          class=\"mat-card-container\"\r\n        >\r\n          <mat-card\r\n            *ngIf=\"slideshowselect.categories.includes(category.name)\"\r\n            (click)=\"\r\n              SelectSlideshow(\r\n                category.slug,\r\n                slideshowselect.id,\r\n                slideshowselect.pages[0]\r\n              )\r\n            \"\r\n          >\r\n            <div class=\"mat-card-child\">\r\n              <img\r\n                class=\"slideshowImg\"\r\n                [src]=\"\r\n                  slideshowselect.title_image\r\n                    ? slideshowselect.title_image.img.thumbnail\r\n                    : 'assets/icons/icon.svg'\r\n                \"\r\n                [alt]=\"\r\n                  slideshowselect.title_image\r\n                    ? slideshowselect.title_image.img_alt\r\n                    : 'Kein Bild vorhanden'\r\n                \"\r\n              />\r\n              <span class=\"slideshowTitle\">{{ slideshowselect.title }}</span>\r\n            </div>\r\n          </mat-card>\r\n        </div>\r\n      </mat-expansion-panel>\r\n    </mat-accordion>\r\n  </div>\r\n</div>\r\n","import { Component, Inject, OnDestroy, OnInit } from '@angular/core';\r\nimport { SlideshowState } from '../../state/slideshow.state';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { Slideshow } from '../../state/slideshow.model';\r\nimport { Select, Store } from '@ngxs/store';\r\nimport { Dispatch } from '@ngxs-labs/dispatch-decorator';\r\nimport { AddSlideshow } from '../../state/slideshow.actions';\r\nimport { map, takeUntil } from 'rxjs/operators';\r\nimport { Navigate } from '@ngxs/router-plugin';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { SOLID_SLIDESHOW_APP_ROUTING_CONFIG } from '../../app-config';\r\n\r\nexport function __internal__selectRouterParam(s: any) {\r\n  return s.router.state.params;\r\n}\r\n\r\n@Component({\r\n  selector: 'solid-slideshow-slideshow-base',\r\n  templateUrl: './slideshow-base.component.html',\r\n  styleUrls: ['./slideshow-base.component.scss'],\r\n})\r\nexport class SlideshowBaseComponent implements OnInit, OnDestroy {\r\n  private $destroyed = new Subject<void>();\r\n\r\n  @Select(__internal__selectRouterParam)\r\n  params!: Observable<any>;\r\n\r\n  public SlideshowS?: Slideshow | null = null;\r\n  public Slideshow?: Observable<Slideshow>;\r\n  public SelectedSlideshow = false;\r\n  public DeepLinkFirstLoad = false;\r\n  public slideshowId!: string;\r\n\r\n  constructor(\r\n    @Inject(SOLID_SLIDESHOW_APP_ROUTING_CONFIG) public routingConfig: any,\r\n    private store: Store,\r\n    private route: ActivatedRoute\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.params.pipe(takeUntil(this.$destroyed)).subscribe((x) => {\r\n      if (Object.keys(x).length === 0) {\r\n        this.SelectedSlideshow = false;\r\n        this.DeepLinkFirstLoad = false;\r\n      }\r\n    });\r\n\r\n    this.slideshowId = this.route.firstChild?.snapshot.params['slideshowId'];\r\n    if (this.slideshowId) {\r\n      this.getSlideshow(this.slideshowId);\r\n      this.SelectedSlideshow = true;\r\n      this.DeepLinkFirstLoad = true;\r\n    }\r\n  }\r\n\r\n  getSlideshow(slideshowId: string) {\r\n    this.store.dispatch(new AddSlideshow(slideshowId));\r\n    this.Slideshow = this.store\r\n      .select(SlideshowState.getSlideshowById)\r\n      .pipe(map((fn) => fn(slideshowId)));\r\n  }\r\n\r\n  selectSlideshow(data: any) {\r\n    this.SelectedSlideshow = true;\r\n    if (data.slideshowid) {\r\n      this.getSlideshow(data.slideshowid);\r\n    }\r\n  }\r\n\r\n  @Dispatch()\r\n  goBack() {\r\n    this.SelectedSlideshow = false;\r\n    this.DeepLinkFirstLoad = false;\r\n    return new Navigate([`${this.routingConfig.url}`]);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.$destroyed.next();\r\n  }\r\n}\r\n","<solid-slideshow-slideshow-select\r\n  *ngIf=\"!DeepLinkFirstLoad\"\r\n  [class.disappear]=\"SelectedSlideshow\"\r\n  [class.appear]=\"!SelectedSlideshow\"\r\n  (selectSlideshow)=\"selectSlideshow($event)\"\r\n></solid-slideshow-slideshow-select>\r\n<solid-slideshow\r\n  *ngIf=\"SelectedSlideshow\"\r\n  [selectSlideshow]=\"Slideshow | async\"\r\n  (backButtonClick)=\"goBack()\"\r\n></solid-slideshow>\r\n","import { RouterModule, Routes } from '@angular/router';\r\nimport { SlideshowBaseComponent } from './components/slideshow-base/slideshow-base.component';\r\nimport { SlideshowSelectComponent } from './components/slideshow-select/slideshow-select.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: SlideshowBaseComponent,\r\n    children: [\r\n      {\r\n        path: ':categoriesSlug/:slideshowId/:slideshowPageId',\r\n        component: SlideshowSelectComponent,\r\n      },\r\n      {\r\n        path: '**',\r\n        redirectTo: '',\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\nexport const SolidSlideshowRoutingModule = RouterModule.forChild(routes);\r\n","import { NgModule } from '@angular/core';\r\nimport { SolidCoreModule } from '@zentrumnawi/solid-core';\r\nimport { SlideshowComponent } from './components/slideshow/slideshow.component';\r\nimport { SolidSlideshowRoutingModule } from './solid-slideshow-routing.module';\r\nimport { MatStepperModule } from '@angular/material/stepper';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { NgxsModule } from '@ngxs/store';\r\nimport { SlideshowState } from './state/slideshow.state';\r\nimport { STEPPER_GLOBAL_OPTIONS } from '@angular/cdk/stepper';\r\nimport { SlideshowSelectComponent } from './components/slideshow-select/slideshow-select.component';\r\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { CategoriesState } from './state/categories.state';\r\nimport { SlideshowSelectState } from './state/slideshow-select.state';\r\nimport { SlideshowBaseComponent } from './components/slideshow-base/slideshow-base.component';\r\n\r\n// This workaround is required for the \"old\" angular compiler in production mode. Ivy library publishing is not supported until angular 10.\r\n// https://github.com/ng-packagr/ng-packagr/issues/767\r\nexport const ngxsFeatureModule = NgxsModule.forFeature([\r\n  SlideshowState,\r\n  CategoriesState,\r\n  SlideshowSelectState,\r\n]);\r\n\r\n@NgModule({\r\n  declarations: [\r\n    SlideshowComponent,\r\n    SlideshowSelectComponent,\r\n    SlideshowBaseComponent,\r\n  ],\r\n  imports: [\r\n    SolidCoreModule,\r\n    SolidSlideshowRoutingModule,\r\n    ngxsFeatureModule,\r\n    MatStepperModule,\r\n    MatIconModule,\r\n    MatCardModule,\r\n    MatButtonModule,\r\n    MatProgressBarModule,\r\n    MatExpansionModule,\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: STEPPER_GLOBAL_OPTIONS,\r\n      useValue: { displayDefaultIndicatorType: false },\r\n    },\r\n  ],\r\n})\r\nexport class SolidSlideshowModule {}\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["i1","__decorate","i2","i3","i4","i5","i6","i4.SlideshowComponent","i5.SlideshowSelectComponent"],"mappings":"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"}